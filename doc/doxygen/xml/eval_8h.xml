<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="eval_8h" kind="file" language="C++">
    <compoundname>eval.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="datastructures_2basic_8h" local="no">ViennaRNA/datastructures/basic.h</includes>
    <includes refid="fold__compound_8h" local="no">ViennaRNA/fold_compound.h</includes>
    <includes refid="datastructures_2char__stream_8h" local="no">ViennaRNA/datastructures/char_stream.h</includes>
    <includes refid="move_8h" local="no">ViennaRNA/landscape/move.h</includes>
    <includes refid="params_2basic_8h" local="no">ViennaRNA/params/basic.h</includes>
    <includedby refid="fold_8h" local="no">ViennaRNA/fold.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>stdarg.h</label>
      </node>
      <node id="15">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="14">
        <label>stdlib.h</label>
      </node>
      <node id="18">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ViennaRNA/datastructures/char_stream.h</label>
        <link refid="datastructures_2char__stream_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>limits.h</label>
      </node>
      <node id="9">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ViennaRNA/landscape/move.h</label>
        <link refid="move_8h"/>
      </node>
      <node id="13">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="16">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>ViennaRNA/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>ViennaRNA/fold.h</label>
        <link refid="fold_8h"/>
      </node>
      <node id="1">
        <label>ViennaRNA/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>Basic Energy Evaluation Interface with Dot-Bracket Structure String</header>
      <memberdef kind="function" id="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_structure</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure)</argsstring>
        <name>vrna_eval_structure</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation of a given pair of structure and sequence (alignment). Model details, energy parameters, and possibly soft constraints are used as provided via the parameter &apos;fc&apos;. The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> does not need to contain any DP matrices, but requires all most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound</ref>(sequence,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Accepts vrna_fold_compound_t of type <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447da7e264dd3cf2dc9b6448caabcb7763cd6" kindref="member">VRNA_FC_TYPE_SINGLE</ref> and <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447dab821ce46ea3cf665be97df22a76f5023" kindref="member">VRNA_FC_TYPE_COMPARATIVE</ref></para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000066"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="76" column="1" declfile="ViennaRNA/eval.h" declline="76" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_covar_structure</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure)</argsstring>
        <name>vrna_eval_covar_structure</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate the pseudo energy derived by the covariance scores of a set of aligned sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>Consensus structure prediction is driven by covariance scores of base pairs in rows of the provided alignment. This function allows one to retrieve the total amount of this covariance pseudo energy scores. The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> does not need to contain any DP matrices, but requires all most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative</ref>(alignment,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>Accepts vrna_fold_compound_t of type <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447dab821ce46ea3cf665be97df22a76f5023" kindref="member">VRNA_FC_TYPE_COMPARATIVE</ref> only!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary (consensus) structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The covariance pseudo energy score of the input structure given the input sequence alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000070"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_covar_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_covar_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="101" column="1" declfile="ViennaRNA/eval.h" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga4078d8889e54c1f2e832f6c558399498" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_structure_verbose</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure, FILE *file)</argsstring>
        <name>vrna_eval_structure_verbose</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA and print contributions on a per-loop base. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a simplyfied version of <ref refid="group__eval_1gaf1fe5f30df6a7a9a1a6c137edcf173d2" kindref="member">vrna_eval_structure_v()</ref> that uses the <emphasis>default</emphasis> verbosity level.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>,</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000068"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_structure_verbose()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_verbose()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="119" column="1" declfile="ViennaRNA/eval.h" declline="119" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gaf1fe5f30df6a7a9a1a6c137edcf173d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_structure_v</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_structure_v</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA and print contributions on a per-loop base. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for detailed energy evaluation of a given sequence/structure pair. In contrast to <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> this function prints detailed energy contributions based on individual loops to a file handle. If NULL is passed as file handle, this function defaults to print to stdout. Any positive <computeroutput>verbosity_level</computeroutput> activates potential warning message of the energy evaluting functions, while values <formula id="47">$ \ge 1 $</formula> allow for detailed control of what data is printed. A negative parameter <computeroutput>verbosity_level</computeroutput> turns off printing all together.</para>
<para>Model details, energy parameters, and possibly soft constraints are used as provided via the parameter &apos;fc&apos;. The fold_compound does not need to contain any DP matrices, but all the most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound</ref>(sequence,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>,</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="150" column="1" declfile="ViennaRNA/eval.h" declline="150" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gad1e50a7f48773295e9da8a789fa43474" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_structure_cstr</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure, int verbosity_level, vrna_cstr_t output_stream)</argsstring>
        <name>vrna_eval_structure_cstr</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>vrna_cstr_t</type>
          <declname>output_stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="157" column="1" declfile="ViennaRNA/eval.h" declline="157" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basic Energy Evaluation Interface with Structure Pair Table</header>
      <memberdef kind="function" id="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt</definition>
        <argsstring>(vrna_fold_compound_t *fc, const short *pt)</argsstring>
        <name>vrna_eval_structure_pt</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation of a given sequence/structure pair where the structure is provided in pair_table format as obtained from <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>. Model details, energy parameters, and possibly soft constraints are used as provided via the parameter &apos;fc&apos;. The fold_compound does not need to contain any DP matrices, but all the most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound</ref>(sequence,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000067"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_structure_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_pt()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="191" column="1" declfile="ViennaRNA/eval.h" declline="191" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga9e8775770750783304d24fe0c4b15293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt_verbose</definition>
        <argsstring>(vrna_fold_compound_t *fc, const short *pt, FILE *file)</argsstring>
        <name>vrna_eval_structure_pt_verbose</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a simplyfied version of <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> that uses the <emphasis>default</emphasis> verbosity level.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" kindref="member">vrna_eval_structure_pt_v()</ref>, <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000069"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_structure_pt_verbose()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_pt_verbose()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="209" column="1" declfile="ViennaRNA/eval.h" declline="209" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt_v</definition>
        <argsstring>(vrna_fold_compound_t *fc, const short *pt, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_structure_pt_v</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation of a given sequence/structure pair where the structure is provided in pair_table format as obtained from <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>. Model details, energy parameters, and possibly soft constraints are used as provided via the parameter &apos;fc&apos;. The fold_compound does not need to contain any DP matrices, but all the most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound</ref>(sequence,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting> In contrast to <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> this function prints detailed energy contributions based on individual loops to a file handle. If NULL is passed as file handle, this function defaults to print to stdout. Any positive <computeroutput>verbosity_level</computeroutput> activates potential warning message of the energy evaluting functions, while values <formula id="47">$ \ge 1 $</formula> allow for detailed control of what data is printed. A negative parameter <computeroutput>verbosity_level</computeroutput> turns off printing all together.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="240" column="1" declfile="ViennaRNA/eval.h" declline="240" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified Energy Evaluation with Sequence and Dot-Bracket Strings</header>
      <memberdef kind="function" id="group__eval_1ga7e5273464b775d4130245681312c1369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_structure_simple</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>vrna_eval_structure_simple</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation of a given sequence/structure pair. In contrast to <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> this function assumes default model details and default energy parameters in order to evaluate the free energy of the secondary structure. Therefore, it serves as a simple interface function for energy evaluation for situations where no changes on the energy model are required.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>,</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000076"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="271" column="1" declfile="ViennaRNA/eval.h" declline="271" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_structure</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>vrna_eval_circ_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a sequence/structure pair where the sequence is circular. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>, <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>, <ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure()</ref>, <ref refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" kindref="member">vrna_eval_circ_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the structure given the circular input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000077"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" kindref="member">vrna_eval_circ_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="286" column="1" declfile="ViennaRNA/eval.h" declline="286" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga3263504825ef4b523eba797c99921df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_gquad_structure</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>vrna_eval_gquad_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a sequence/structure pair where the structure may contain G-Quadruplexes. </para>
        </briefdescription>
        <detaileddescription>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>, <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>, <ref refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" kindref="member">vrna_eval_gquad_consensus_structure()</ref>, <ref refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" kindref="member">vrna_eval_gquad_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the structure including contributions of G-quadruplexes in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000078"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" kindref="member">vrna_eval_gquad_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="308" column="1" declfile="ViennaRNA/eval.h" declline="308" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_gquad_structure</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>vrna_eval_circ_gquad_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a sequence/structure pair where the sequence is circular and the structure may contain G-Quadruplexes. </para>
        </briefdescription>
        <detaileddescription>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>, <ref refid="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" kindref="member">vrna_eval_circ_gquad_consensus_structure()</ref>, <ref refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" kindref="member">vrna_eval_circ_gquad_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the structure including contributions of G-quadruplexes in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000079"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" kindref="member">vrna_eval_circ_gquad_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="331" column="1" declfile="ViennaRNA/eval.h" declline="331" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga4c2895a7dcd756ef2dc7f76db7c4c53e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_structure_simple_verbose</definition>
        <argsstring>(const char *string, const char *structure, FILE *file)</argsstring>
        <name>vrna_eval_structure_simple_verbose</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a simplyfied version of <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> that uses the <emphasis>default</emphasis> verbosity level.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="350" column="1" declfile="ViennaRNA/eval.h" declline="350" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gacd6278343e77d13f1d53588e50d303bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_structure_simple_v</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_structure_simple_v</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for detailed energy evaluation of a given sequence/structure pair. In contrast to <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> this function prints detailed energy contributions based on individual loops to a file handle. If NULL is passed as file handle, this function defaults to print to stdout. Any positive <computeroutput>verbosity_level</computeroutput> activates potential warning message of the energy evaluting functions, while values <formula id="47">$ \ge 1 $</formula> allow for detailed control of what data is printed. A negative parameter <computeroutput>verbosity_level</computeroutput> turns off printing all together.</para>
<para>In contrast to <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> this function assumes default model details and default energy parameters in order to evaluate the free energy of the secondary structure. Threefore, it serves as a simple interface function for energy evaluation for situations where no changes on the energy model are required.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>,</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000084"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="379" column="1" declfile="ViennaRNA/eval.h" declline="379" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_structure_v</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_circ_structure_v</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate free energy of a sequence/structure pair, assume sequence to be circular and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the same as <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> but assumes the input sequence to be circularized.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref>, <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000085"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="401" column="1" declfile="ViennaRNA/eval.h" declline="401" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_gquad_structure_v</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_gquad_structure_v</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate free energy of a sequence/structure pair, allow for G-Quadruplexes in the structure and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the same as <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> but allows for annotated G-Quadruplexes in the dot-bracket structure input.</para>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref>, <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000086"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="430" column="1" declfile="ViennaRNA/eval.h" declline="430" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_gquad_structure_v</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_circ_gquad_structure_v</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate free energy of a sequence/structure pair, assume sequence to be circular, allow for G-Quadruplexes in the structure, and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is the same as <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> but assumes the input sequence to be circular and allows for annotated G-Quadruplexes in the dot-bracket structure input.</para>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000087"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="457" column="1" declfile="ViennaRNA/eval.h" declline="457" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified Energy Evaluation with Sequence Alignments and Consensus Structure Dot-Bracket String</header>
      <memberdef kind="function" id="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_consensus_structure_simple</definition>
        <argsstring>(const char **alignment, const char *structure)</argsstring>
        <name>vrna_eval_consensus_structure_simple</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA sequence alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation for a given multiple sequence alignment and consensus structure pair. In contrast to <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> this function assumes default model details and default energy parameters in order to evaluate the free energy of the secondary structure. Therefore, it serves as a simple interface function for energy evaluation for situations where no changes on the energy model are required.</para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters and hyphen (&apos;-&apos;) to denote gaps </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the input alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000080"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="494" column="1" declfile="ViennaRNA/eval.h" declline="494" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gac96577cf232c71160f762737a994b7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_consensus_structure</definition>
        <argsstring>(const char **alignment, const char *structure)</argsstring>
        <name>vrna_eval_circ_consensus_structure</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a multiple sequence alignment/consensus structure pair where the sequences are circular. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref>, <ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple()</ref>, <ref refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" kindref="member">vrna_eval_gquad_consensus_structure()</ref>, <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>, <ref refid="group__eval_1gae89240c230e4740b22a703ee953396b9" kindref="member">vrna_eval_circ_consensus_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the circular input sequence in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000081"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="514" column="1" declfile="ViennaRNA/eval.h" declline="514" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_gquad_consensus_structure</definition>
        <argsstring>(const char **alignment, const char *structure)</argsstring>
        <name>vrna_eval_gquad_consensus_structure</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a multiple sequence alignment/consensus structure pair where the structure may contain G-Quadruplexes. </para>
        </briefdescription>
        <detaileddescription>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref>, <ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple()</ref>, <ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure()</ref>, <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>, <ref refid="group__eval_1ga8abc794fc48d43268ced5e8cde017baa" kindref="member">vrna_eval_gquad_consensus_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure including contributions of G-quadruplexes in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000082"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="541" column="1" declfile="ViennaRNA/eval.h" declline="541" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_gquad_consensus_structure</definition>
        <argsstring>(const char **alignment, const char *structure)</argsstring>
        <name>vrna_eval_circ_gquad_consensus_structure</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a multiple sequence alignment/consensus structure pair where the sequence is circular and the structure may contain G-Quadruplexes. </para>
        </briefdescription>
        <detaileddescription>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref>, <ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple()</ref>, <ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure()</ref>, <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>, <ref refid="group__eval_1gaecd3e17292a0b3927277434019a5e187" kindref="member">vrna_eval_circ_gquad_consensus_structure_v()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure including contributions of G-quadruplexes in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000083"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="568" column="1" declfile="ViennaRNA/eval.h" declline="568" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga3e7e57b9b4fafcf739eb6646d45be881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_consensus_structure_simple_verbose</definition>
        <argsstring>(const char **alignment, const char *structure, FILE *file)</argsstring>
        <name>vrna_eval_consensus_structure_simple_verbose</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a consensus structure for an RNA sequence alignment and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a simplyfied version of <ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref> that uses the <emphasis>default</emphasis> verbosity level.</para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref>, <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the conensus structure given the aligned input sequences in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="592" column="1" declfile="ViennaRNA/eval.h" declline="592" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_consensus_structure_simple_v</definition>
        <argsstring>(const char **alignment, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_consensus_structure_simple_v</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a consensus structure for an RNA sequence alignment and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for detailed energy evaluation of a given sequence alignment/consensus structure pair. In contrast to <ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple()</ref> this function prints detailed energy contributions based on individual loops to a file handle. If NULL is passed as file handle, this function defaults to print to stdout. Any positive <computeroutput>verbosity_level</computeroutput> activates potential warning message of the energy evaluting functions, while values <formula id="47">$ \ge 1 $</formula> allow for detailed control of what data is printed. A negative parameter <computeroutput>verbosity_level</computeroutput> turns off printing all together.</para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para>vrna_eval_consensus_structure(), <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the sequence alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000088"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="622" column="1" declfile="ViennaRNA/eval.h" declline="622" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gae89240c230e4740b22a703ee953396b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_consensus_structure_v</definition>
        <argsstring>(const char **alignment, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_circ_consensus_structure_v</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a consensus structure for an alignment of circular RNA sequences and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is identical with <ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref> but assumed the aligned sequences to be circular.</para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref>, <ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the sequence alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000089"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="648" column="1" declfile="ViennaRNA/eval.h" declline="648" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga8abc794fc48d43268ced5e8cde017baa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_gquad_consensus_structure_v</definition>
        <argsstring>(const char **alignment, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_gquad_consensus_structure_v</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a consensus structure for an RNA sequence alignment, allow for annotated G-Quadruplexes in the structure and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is identical with <ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref> but allows for annotated G-Quadruplexes in the consensus structure.</para>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref>, <ref refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" kindref="member">vrna_eval_gquad_consensus_structure()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the sequence alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000090"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="681" column="1" declfile="ViennaRNA/eval.h" declline="681" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gaecd3e17292a0b3927277434019a5e187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>int vrna_eval_circ_gquad_consensus_structure_v</definition>
        <argsstring>(const char **alignment, const char *structure, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_circ_gquad_consensus_structure_v</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Evaluate the free energy of a consensus structure for an alignment of circular RNA sequences, allow for annotated G-Quadruplexes in the structure and print contributions per loop. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is identical with <ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref> but assumes the sequences in the alignment to be circular and allows for annotated G-Quadruplexes in the consensus structure.</para>
<para>G-Quadruplexes are annotated as plus signs (&apos;+&apos;) for each G involved in the motif. Linker sequences must be denoted by dots (&apos;.&apos;) as they are considered unpaired. Below is an example of a 2-layer G-quadruplex: <programlisting filename=".unparsed"><codeline><highlight class="normal">GGAAGGAAAGGAGG</highlight></codeline>
<codeline><highlight class="normal">++..++...++.++</highlight></codeline>
</programlisting></para>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v()</ref>, <ref refid="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" kindref="member">vrna_eval_circ_gquad_consensus_structure()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Consensus secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the consensus structure given the sequence alignment in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000091"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="714" column="1" declfile="ViennaRNA/eval.h" declline="714" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified Energy Evaluation with Sequence String and Structure Pair Table</header>
      <memberdef kind="function" id="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt_simple</definition>
        <argsstring>(const char *string, const short *pt)</argsstring>
        <name>vrna_eval_structure_pt_simple</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>In contrast to <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> this function assumes default model details and default energy parameters in order to evaluate the free energy of the secondary structure. Threefore, it serves as a simple interface function for energy evaluation for situations where no changes on the energy model are required.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000092"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" kindref="member">vrna_eval_structure_pt_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="744" column="1" declfile="ViennaRNA/eval.h" declline="744" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga76e152ee9a02be23da14cdddf52b4e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt_simple_verbose</definition>
        <argsstring>(const char *string, const short *pt, FILE *file)</argsstring>
        <name>vrna_eval_structure_pt_simple_verbose</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is a simplyfied version of <ref refid="group__eval_1gac40b813d35289da9816d0c1eec94faa5" kindref="member">vrna_eval_structure_pt_simple_v()</ref> that uses the <emphasis>default</emphasis> verbosity level.</para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gac40b813d35289da9816d0c1eec94faa5" kindref="member">vrna_eval_structure_pt_simple_v()</ref>, <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref>, <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="762" column="1" declfile="ViennaRNA/eval.h" declline="762" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gac40b813d35289da9816d0c1eec94faa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_structure_pt_simple_v</definition>
        <argsstring>(const char *string, const short *pt, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_structure_pt_simple_v</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows for energy evaluation of a given sequence/structure pair where the structure is provided in pair_table format as obtained from <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>. Model details, energy parameters, and possibly soft constraints are used as provided via the parameter &apos;fc&apos;. The fold_compound does not need to contain any DP matrices, but all the most basic init values as one would get from a call like this: <programlisting filename=".c"><codeline><highlight class="normal">fc<sp/>=<sp/><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound</ref>(sequence,<sp/>NULL,<sp/><ref refid="group__fold__compound_1ga61469c423131552c8483229f8b6c7e0e" kindref="member">VRNA_OPTION_EVAL_ONLY</ref>);</highlight></codeline>
</programlisting> In contrast to <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref> this function assumes default model details and default energy parameters in order to evaluate the free energy of the secondary structure. Threefore, it serves as a simple interface function for energy evaluation for situations where no changes on the energy model are required.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" kindref="member">vrna_eval_structure_pt_v()</ref>, <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure as pair_table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>A file handle where this function should print to (may be NULL). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="792" column="1" declfile="ViennaRNA/eval.h" declline="792" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified Energy Evaluation with Sequence Alignment and Consensus Structure Pair Table</header>
      <memberdef kind="function" id="group__eval_1gabbb4d2a7aa324ec9cce8f47ce61ab8af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_consensus_structure_pt_simple</definition>
        <argsstring>(const char **alignment, const short *pt)</argsstring>
        <name>vrna_eval_consensus_structure_pt_simple</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Evaluate the Free Energy of a Consensus Secondary Structure given a Sequence Alignment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The free energy returned from this function already includes the covariation pseudo energies that is used fir comparative structure prediction within this library.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple()</ref>, <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref>, <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref>, <ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment in uppercase letters. Gaps are denoted by hyphens (&apos;-&apos;) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in pair table format </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Free energy of the consensus structure in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000093"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="821" column="1" declfile="ViennaRNA/eval.h" declline="821" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1ga2769e4369d023ad2d5c5f4d2ee825c23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_consensus_structure_pt_simple_verbose</definition>
        <argsstring>(const char **alignment, const short *pt, FILE *file)</argsstring>
        <name>vrna_eval_consensus_structure_pt_simple_verbose</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="826" column="1" declfile="ViennaRNA/eval.h" declline="826" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval_1gaf2d227b3d54bf9b693a3df52faf5e2e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_consensus_structure_pt_simple_v</definition>
        <argsstring>(const char **alignment, const short *pt, int verbosity_level, FILE *file)</argsstring>
        <name>vrna_eval_consensus_structure_pt_simple_v</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="wrappers_1_wrappers000094"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="832" column="1" declfile="ViennaRNA/eval.h" declline="832" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="eval_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="20" column="11" bodyfile="ViennaRNA/eval.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__eval_1gaf4afe19780b61b4962c613bde324128b" prot="public" static="no">
        <name>VRNA_VERBOSITY_QUIET</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>Quiet level verbosity setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="40" column="9" bodyfile="ViennaRNA/eval.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__eval_1ga47430d9e875084cfb983b22612e3abdf" prot="public" static="no">
        <name>VRNA_VERBOSITY_DEFAULT</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Default level verbosity setting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="46" column="9" bodyfile="ViennaRNA/eval.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__eval__deprecated_1gab9b2c3a37a5516614c06d0ab54b97cda" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cut_point</definition>
        <argsstring></argsstring>
        <name>cut_point</name>
        <briefdescription>
<para>first pos of second seq for cofolding </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="964" column="13" declfile="ViennaRNA/eval.h" declline="964" declcolumn="13"/>
      </memberdef>
      <memberdef kind="variable" id="group__eval__deprecated_1ga567530678f6260a1a649a5beca5da4c5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int eos_debug</definition>
        <argsstring></argsstring>
        <name>eos_debug</name>
        <briefdescription>
<para>verbose info from energy_of_struct </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="969" column="13" declfile="ViennaRNA/eval.h" declline="969" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_loop_pt</definition>
        <argsstring>(vrna_fold_compound_t *fc, int i, const short *pt)</argsstring>
        <name>vrna_eval_loop_pt</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a loop. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>position of covering base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>free energy of the loop in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000071"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_loop_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_loop_pt()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="863" column="1" declfile="ViennaRNA/eval.h" declline="863" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__loops_1ga905758a7e1320638345f1ef793769f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_loop_pt_v</definition>
        <argsstring>(vrna_fold_compound_t *fc, int i, const short *pt, int verbosity_level)</argsstring>
        <name>vrna_eval_loop_pt_v</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a loop. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>position of covering base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>The level of verbosity of this function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>free energy of the loop in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="878" column="1" declfile="ViennaRNA/eval.h" declline="878" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_eval_move</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure, int m1, int m2)</argsstring>
        <name>vrna_eval_move</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a move (closing or opening of a base pair) </para>
        </briefdescription>
        <detaileddescription>
<para>If the parameters m1 and m2 are negative, it is deletion (opening) of a base pair, otherwise it is insertion (opening).</para>
<para><simplesect kind="see"><para><ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>first coordinate of base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>second coordinate of base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>energy change of the move in kcal/mol (<ref refid="constants_8h_1a12c2040f25d8e3a7b9e1c2024c618cb6" kindref="member">INF</ref> / 100. upon any error)</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000072"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_move()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_move()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="909" column="1" declfile="ViennaRNA/eval.h" declline="909" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_move_pt</definition>
        <argsstring>(vrna_fold_compound_t *fc, short *pt, int m1, int m2)</argsstring>
        <name>vrna_eval_move_pt</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a move (closing or opening of a base pair) </para>
        </briefdescription>
        <detaileddescription>
<para>If the parameters m1 and m2 are negative, it is deletion (opening) of a base pair, otherwise it is insertion (opening).</para>
<para><simplesect kind="see"><para><ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A vrna_fold_compound_t containing the energy parameters and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>first coordinate of base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>second coordinate of base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>energy change of the move in 10cal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000073"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>eval_move_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_move_pt()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="931" column="1" declfile="ViennaRNA/eval.h" declline="931" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__move_1ga8bd14b548874366b8a2a9c65eff08888" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_move_pt_simple</definition>
        <argsstring>(const char *string, short *pt, int m1, int m2)</argsstring>
        <name>vrna_eval_move_pt_simple</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="938" column="1" declfile="ViennaRNA/eval.h" declline="938" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__move_1ga7b651856d7b37cede016a2c6ebd8d9b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_eval_move_shift_pt</definition>
        <argsstring>(vrna_fold_compound_t *fc, vrna_move_t *m, short *structure)</argsstring>
        <name>vrna_eval_move_shift_pt</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type><ref refid="group__neighbors_1ga08630e00206cd163ea29c462bf5f4755" kindref="member">vrna_move_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="945" column="1" declfile="ViennaRNA/eval.h" declline="945" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_structure</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level)</argsstring>
        <name>energy_of_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA using global model detail settings. </para>
        </briefdescription>
        <detaileddescription>
<para>If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><simplesect kind="note"><para>OpenMP: This function relies on several global model settings variables and thus is not to be considered threadsafe. See <ref refid="group__eval__deprecated_1gaf9d064d3c496de42eca6734a96fd2090" kindref="member">energy_of_struct_par()</ref> for a completely threadsafe implementation.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000048"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>a flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="992" column="8" declfile="ViennaRNA/eval.h" declline="992" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1gaf9d064d3c496de42eca6734a96fd2090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_struct_par</definition>
        <argsstring>(const char *string, const char *structure, vrna_param_t *parameters, int verbosity_level)</argsstring>
        <name>energy_of_struct_par</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><xrefsect id="deprecated_1_deprecated000049"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A data structure containing the prescaled energy contributions and the model details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1013" column="8" declfile="ViennaRNA/eval.h" declline="1013" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_circ_structure</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level)</argsstring>
        <name>energy_of_circ_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded circular RNA. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>OpenMP: This function relies on several global model settings variables and thus is not to be considered threadsafe. See <ref refid="group__eval__deprecated_1ga3f01f9744ba6a40555eb4d81fc77f6df" kindref="member">energy_of_circ_struct_par()</ref> for a completely threadsafe implementation.</para>
</simplesect>
If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><xrefsect id="deprecated_1_deprecated000050"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1036" column="8" declfile="ViennaRNA/eval.h" declline="1036" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga3f01f9744ba6a40555eb4d81fc77f6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_circ_struct_par</definition>
        <argsstring>(const char *string, const char *structure, vrna_param_t *parameters, int verbosity_level)</argsstring>
        <name>energy_of_circ_struct_par</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded circular RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><xrefsect id="deprecated_1_deprecated000051"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A data structure containing the prescaled energy contributions and the model details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1057" column="8" declfile="ViennaRNA/eval.h" declline="1057" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga30687ad32835b9894875940958e3eb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_gquad_structure</definition>
        <argsstring>(const char *string, const char *structure, int verbosity_level)</argsstring>
        <name>energy_of_gquad_structure</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1063" column="8" declfile="ViennaRNA/eval.h" declline="1063" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga7d8e18eab7bdc45744b063c81a25ca78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_gquad_struct_par</definition>
        <argsstring>(const char *string, const char *structure, vrna_param_t *parameters, int verbosity_level)</argsstring>
        <name>energy_of_gquad_struct_par</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1069" column="8" declfile="ViennaRNA/eval.h" declline="1069" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga8831445966b761417e713360791299d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int energy_of_structure_pt</definition>
        <argsstring>(const char *string, short *ptable, short *s, short *s1, int verbosity_level)</argsstring>
        <name>energy_of_structure_pt</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><simplesect kind="note"><para>OpenMP: This function relies on several global model settings variables and thus is not to be considered threadsafe. See <ref refid="group__eval__deprecated_1ga49acb3d5627dc6823a7ce12d116d4c69" kindref="member">energy_of_struct_pt_par()</ref> for a completely threadsafe implementation.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000052"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> or <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptable</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>a flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the free energy of the input structure given the input sequence in 10kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1097" column="6" declfile="ViennaRNA/eval.h" declline="1097" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga49acb3d5627dc6823a7ce12d116d4c69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int energy_of_struct_pt_par</definition>
        <argsstring>(const char *string, short *ptable, short *s, short *s1, vrna_param_t *parameters, int verbosity_level)</argsstring>
        <name>energy_of_struct_pt_par</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
<para>Calculate the free energy of an already folded RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>If verbosity level is set to a value &gt;0, energies of structure elements are printed to stdout</para>
<para><xrefsect id="deprecated_1_deprecated000053"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> or <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence in uppercase letters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptable</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>Encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A data structure containing the prescaled energy contributions and the model details. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>verbosity_level</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag to turn verbose output on/off </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy of the input structure given the input sequence in 10kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1122" column="6" declfile="ViennaRNA/eval.h" declline="1122" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga539ecaed89730f7644c202f304d7529b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_move</definition>
        <argsstring>(const char *string, const char *structure, int m1, int m2)</argsstring>
        <name>energy_of_move</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a move (closing or opening of a base pair) </para>
        </briefdescription>
        <detaileddescription>
<para>If the parameters m1 and m2 are negative, it is deletion (opening) of a base pair, otherwise it is insertion (opening).</para>
<para><xrefsect id="deprecated_1_deprecated000054"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>first coordinate of base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>second coordinate of base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>energy change of the move in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1145" column="8" declfile="ViennaRNA/eval.h" declline="1145" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga49e0ee561be69faf0568213546f6a53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int energy_of_move_pt</definition>
        <argsstring>(short *pt, short *s, short *s1, int m1, int m2)</argsstring>
        <name>energy_of_move_pt</name>
        <param>
          <type>short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m2</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a move (closing or opening of a base pair) </para>
        </briefdescription>
        <detaileddescription>
<para>If the parameters m1 and m2 are negative, it is deletion (opening) of a base pair, otherwise it is insertion (opening).</para>
<para><xrefsect id="deprecated_1_deprecated000055"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>first coordinate of base pair </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>second coordinate of base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>energy change of the move in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1171" column="6" declfile="ViennaRNA/eval.h" declline="1171" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga507d4fd93f4b398d793ba2402731388d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int loop_energy</definition>
        <argsstring>(short *ptable, short *s, short *s1, int i)</argsstring>
        <name>loop_energy</name>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Calculate energy of a loop. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000056"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" kindref="member">vrna_eval_loop_pt()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" kindref="member">vrna_eval_loop_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptable</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>position of covering base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>free energy of the loop in 10cal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1190" column="8" declfile="ViennaRNA/eval.h" declline="1190" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1gac2b37fea2145c94d925a3f33378ef87b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_struct</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>energy_of_struct</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the free energy of an already folded RNA</para>
<para><simplesect kind="note"><para>This function is not entirely threadsafe! Depending on the state of the global variable <ref refid="group__eval__deprecated_1ga567530678f6260a1a649a5beca5da4c5" kindref="member">eos_debug</ref> it prints energy information to stdout or not...<linebreak/>
 </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000057"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used in future programs! Use <ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure</ref>, <ref refid="group__eval__deprecated_1ga657222e2758c46bf13b416ef3032e417" kindref="member">energy_of_circ_struct()</ref>, <ref refid="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" kindref="member">energy_of_struct_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1209" column="8" declfile="ViennaRNA/eval.h" declline="1209" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int energy_of_struct_pt</definition>
        <argsstring>(const char *string, short *ptable, short *s, short *s1)</argsstring>
        <name>energy_of_struct_pt</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the free energy of an already folded RNA</para>
<para><simplesect kind="note"><para>This function is not entirely threadsafe! Depending on the state of the global variable <ref refid="group__eval__deprecated_1ga567530678f6260a1a649a5beca5da4c5" kindref="member">eos_debug</ref> it prints energy information to stdout or not...<linebreak/>
 </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000058"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used in future programs! Use <ref refid="group__eval__deprecated_1ga8831445966b761417e713360791299d8" kindref="member">energy_of_structure_pt()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__deprecated_1ga89c32307ee50a0026f4a3131fac0845a" kindref="member">make_pair_table()</ref>, <ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptable</parametername>
</parameternamelist>
<parameterdescription>
<para>the pair table of the secondary structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>encoded RNA sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the free energy of the input structure given the input sequence in 10kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1232" column="6" declfile="ViennaRNA/eval.h" declline="1232" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__eval__deprecated_1ga657222e2758c46bf13b416ef3032e417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float energy_of_circ_struct</definition>
        <argsstring>(const char *string, const char *structure)</argsstring>
        <name>energy_of_circ_struct</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the free energy of an already folded circular RNA</para>
<para><simplesect kind="note"><para>This function is not entirely threadsafe! Depending on the state of the global variable <ref refid="group__eval__deprecated_1ga567530678f6260a1a649a5beca5da4c5" kindref="member">eos_debug</ref> it prints energy information to stdout or not...<linebreak/>
 </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000059"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used in future programs Use <ref refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" kindref="member">energy_of_circ_structure()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" kindref="member">energy_of_circ_structure()</ref>, <ref refid="group__eval__deprecated_1gac2b37fea2145c94d925a3f33378ef87b" kindref="member">energy_of_struct()</ref>, <ref refid="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" kindref="member">energy_of_struct_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the free energy of the input structure given the input sequence in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/eval.h" line="1251" column="8" declfile="ViennaRNA/eval.h" declline="1251" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions and variables related to energy evaluation of sequence/structure pairs. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_EVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_EVAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datastructures_2basic_8h" kindref="compound">ViennaRNA/datastructures/basic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fold__compound_8h" kindref="compound">ViennaRNA/fold_compound.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datastructures_2char__stream_8h" kindref="compound">ViennaRNA/datastructures/char_stream.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="move_8h" kindref="compound">ViennaRNA/landscape/move.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="params_2basic_8h" kindref="compound">ViennaRNA/params/basic.h</ref>&gt;</highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>for<sp/>deprecated<sp/>functions<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_VERBOSITY_QUIET<sp/><sp/><sp/><sp/><sp/>-1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__eval_1ga47430d9e875084cfb983b22612e3abdf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_VERBOSITY_DEFAULT<sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group__eval_1gaf1fe5f30df6a7a9a1a6c137edcf173d2" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaf1fe5f30df6a7a9a1a6c137edcf173d2" kindref="member">vrna_eval_structure_v</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">vrna_eval_structure_cstr(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vrna_cstr_t<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output_stream);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>basic<sp/>eval<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" kindref="member">vrna_eval_structure_pt_v</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>basic<sp/>eval<sp/>interface<sp/>with<sp/>pair<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="group__eval_1ga7e5273464b775d4130245681312c1369" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="group__eval_1ga3263504825ef4b523eba797c99921df4" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="group__eval_1ga4c2895a7dcd756ef2dc7f76db7c4c53e" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga4c2895a7dcd756ef2dc7f76db7c4c53e" kindref="member">vrna_eval_structure_simple_verbose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379" refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" refkind="member"><highlight class="normal"><ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" refkind="member"><highlight class="normal"><ref refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" kindref="member">vrna_eval_circ_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" kindref="member">vrna_eval_gquad_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" refkind="member"><highlight class="normal"><ref refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" kindref="member">vrna_eval_circ_gquad_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>simplified<sp/>eval<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514" refid="group__eval_1gac96577cf232c71160f762737a994b7c6" refkind="member"><highlight class="normal"><ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" kindref="member">vrna_eval_gquad_consensus_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568" refid="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" refkind="member"><highlight class="normal"><ref refid="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" kindref="member">vrna_eval_circ_gquad_consensus_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592" refid="group__eval_1ga3e7e57b9b4fafcf739eb6646d45be881" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga3e7e57b9b4fafcf739eb6646d45be881" kindref="member">vrna_eval_consensus_structure_simple_verbose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622" refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" refkind="member"><highlight class="normal"><ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="group__eval_1gae89240c230e4740b22a703ee953396b9" refkind="member"><highlight class="normal"><ref refid="group__eval_1gae89240c230e4740b22a703ee953396b9" kindref="member">vrna_eval_circ_consensus_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681" refid="group__eval_1ga8abc794fc48d43268ced5e8cde017baa" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga8abc794fc48d43268ced5e8cde017baa" kindref="member">vrna_eval_gquad_consensus_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="group__eval_1gaecd3e17292a0b3927277434019a5e187" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaecd3e17292a0b3927277434019a5e187" kindref="member">vrna_eval_circ_gquad_consensus_structure_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>simplified<sp/>comparative<sp/>eval<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744" refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="group__eval_1ga76e152ee9a02be23da14cdddf52b4e44" refkind="member"><highlight class="normal"><ref refid="group__eval_1ga76e152ee9a02be23da14cdddf52b4e44" kindref="member">vrna_eval_structure_pt_simple_verbose</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt,</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792" refid="group__eval_1gac40b813d35289da9816d0c1eec94faa5" refkind="member"><highlight class="normal"><ref refid="group__eval_1gac40b813d35289da9816d0c1eec94faa5" kindref="member">vrna_eval_structure_pt_simple_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt,</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>simplified<sp/>eval<sp/>interface<sp/>with<sp/>pair<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821" refid="group__eval_1gabbb4d2a7aa324ec9cce8f47ce61ab8af" refkind="member"><highlight class="normal"><ref refid="group__eval_1gabbb4d2a7aa324ec9cce8f47ce61ab8af" kindref="member">vrna_eval_consensus_structure_pt_simple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">vrna_eval_consensus_structure_pt_simple_verbose(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832" refid="group__eval_1gaf2d227b3d54bf9b693a3df52faf5e2e4" refkind="member"><highlight class="normal"><ref refid="group__eval_1gaf2d227b3d54bf9b693a3df52faf5e2e4" kindref="member">vrna_eval_consensus_structure_pt_simple_v</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*file);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>simplified<sp/>eval<sp/>interface<sp/>with<sp/>pair<sp/>table<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" refkind="member"><highlight class="normal"><ref refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" kindref="member">vrna_eval_loop_pt</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt);</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878" refid="group__eval__loops_1ga905758a7e1320638345f1ef793769f57" refkind="member"><highlight class="normal"><ref refid="group__eval__loops_1ga905758a7e1320638345f1ef793769f57" kindref="member">vrna_eval_loop_pt_v</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909" refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" refkind="member"><highlight class="normal"><ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931" refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" refkind="member"><highlight class="normal"><ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal">vrna_eval_move_pt_simple(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1,</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">vrna_eval_move_shift_pt(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__move__s" kindref="compound">vrna_move_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*m,</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="group__eval__deprecated_1gab9b2c3a37a5516614c06d0ab54b97cda" kindref="member">cut_point</ref>;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><ref refid="group__eval__deprecated_1ga567530678f6260a1a649a5beca5da4c5" kindref="member">eos_debug</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="992" refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_simple()<sp/>and<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1gaf9d064d3c496de42eca6734a96fd2090" kindref="member">energy_of_struct_par</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__param__s" kindref="compound">vrna_param_t</ref><sp/><sp/>*parameters,</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1013" refid="group__eval__deprecated_1gaf9d064d3c496de42eca6734a96fd2090" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" kindref="member">energy_of_circ_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1036" refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_circ_structure_simple()<sp/>and<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga3f01f9744ba6a40555eb4d81fc77f6df" kindref="member">energy_of_circ_struct_par</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__param__s" kindref="compound">vrna_param_t</ref><sp/>*parameters,</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1057" refid="group__eval__deprecated_1ga3f01f9744ba6a40555eb4d81fc77f6df" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energy_of_gquad_structure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_simple()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>energy_of_gquad_struct_par(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__param__s" kindref="compound">vrna_param_t</ref><sp/><sp/>*parameters,</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga8831445966b761417e713360791299d8" kindref="member">energy_of_structure_pt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptable,</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s,</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1097" refid="group__eval__deprecated_1ga8831445966b761417e713360791299d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_pt_simple()<sp/>and<sp/>vrna_eval_structure_pt()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga49acb3d5627dc6823a7ce12d116d4c69" kindref="member">energy_of_struct_pt_par</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ptable,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s,</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__param__s" kindref="compound">vrna_param_t</ref><sp/>*parameters,</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>verbosity_level),</highlight></codeline>
<codeline lineno="1122" refid="group__eval__deprecated_1ga49acb3d5627dc6823a7ce12d116d4c69" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_pt()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga539ecaed89730f7644c202f304d7529b" kindref="member">energy_of_move</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m1,</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m2),</highlight></codeline>
<codeline lineno="1145" refid="group__eval__deprecated_1ga539ecaed89730f7644c202f304d7529b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_move()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga49e0ee561be69faf0568213546f6a53f" kindref="member">energy_of_move_pt</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*s,</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>m1,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>m2),</highlight></codeline>
<codeline lineno="1171" refid="group__eval__deprecated_1ga49e0ee561be69faf0568213546f6a53f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_move_pt_simple()<sp/>and<sp/>vrna_eval_move_pt()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="group__eval__deprecated_1ga507d4fd93f4b398d793ba2402731388d" kindref="member">loop_energy</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*ptable,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*s,</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>i),</highlight></codeline>
<codeline lineno="1190" refid="group__eval__deprecated_1ga507d4fd93f4b398d793ba2402731388d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_loop_pt()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1gac2b37fea2145c94d925a3f33378ef87b" kindref="member">energy_of_struct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*structure),</highlight></codeline>
<codeline lineno="1209" refid="group__eval__deprecated_1gac2b37fea2145c94d925a3f33378ef87b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_simple()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" kindref="member">energy_of_struct_pt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ptable,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*s1),</highlight></codeline>
<codeline lineno="1232" refid="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_structure_pt_simple()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="group__eval__deprecated_1ga657222e2758c46bf13b416ef3032e417" kindref="member">energy_of_circ_struct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure),</highlight></codeline>
<codeline lineno="1251" refid="group__eval__deprecated_1ga657222e2758c46bf13b416ef3032e417" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_eval_circ_structure_simple()<sp/>and<sp/>vrna_eval_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/eval.h"/>
  </compounddef>
</doxygen>
