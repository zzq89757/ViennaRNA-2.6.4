<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="deprecated" kind="page">
    <compoundname>deprecated</compoundname>
    <title>Deprecated List</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga4cf00f0659e5f0480335d69e797f05b1" kindref="member">alifold</ref>  (const char **strings, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000012"/>Usage of this function is discouraged! Use <ref refid="group__mfe__global_1ga6c9d3bef3e92c6d423ffac9f981418c1" kindref="member">vrna_alifold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga3c81b3967056c3888b8472b65fbb16f5" kindref="member">alimake_pair_table</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000205"/>Use <ref refid="group__struct__utils__pair__table_1ga1ee4cdcda1f57d32dcb38032116d335d" kindref="member">vrna_pt_ali_get()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga0df40248788f0fb17ebdc59d74116d1c" kindref="member">alipbacktrack</ref>  (double *prob)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000023"/>Use <ref refid="group__subopt__stochbt_1ga594844ac73c4e66e00d6791b31540634" kindref="member">vrna_pbacktrack()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga604a42ad64178279551ad3e4def3d603" kindref="member">alipf_circ_fold</ref>  (const char **sequences, char *structure, vrna_ep_t **pl)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000020"/>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga1a5f6cfb9d761fa862ce4edc7c369cd2" kindref="member">alipf_fold</ref>  (const char **sequences, char *structure, vrna_ep_t **pl)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000019"/>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gab46954fb0ed3b6d5631e7f9b802978cd" kindref="member">alipf_fold_par</ref>  (const char **sequences, char *structure, vrna_ep_t **pl, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained, int is_circular)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000018"/>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils__deprecated_1gaab48d4dac655d688abe921389ac2847c" kindref="member">aliPS_color_aln</ref>  (const char *structure, const char *filename, const char *seqs[], const char *names[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000174"/>Use <ref refid="group__alignment__plots_1ga3bb7409f5b73c2273f9f76cf8b754034" kindref="member">vrna_file_PS_aln()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>File <ref refid="aln__util_8h" kindref="compound">aln_util.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000026"/>Use <ref refid="utils_2alignments_8h" kindref="compound">ViennaRNA/utils/alignments.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gab61df77cf7949cd516181fce0c3d7d78" kindref="member">assign_plist_from_db</ref>  (vrna_ep_t **pl, const char *struc, float pr)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000200"/>Use <ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" kindref="member">assign_plist_from_pr</ref>  (vrna_ep_t **pl, FLT_OR_DBL *probs, int length, double cutoff)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000210"/>Use <ref refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" kindref="member">vrna_plist_from_probs()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga9c80d92391f2833549a8b6dac92233f0" kindref="member">b2C</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000132"/>See <ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga549e259a963d77e2d5b7e14083fc016e" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_SHORT</ref> for a replacement </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga07b7e90e712559a1992fba3ac6d21bbd" kindref="member">b2HIT</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000131"/>See <ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" kindref="member">VRNA_STRUCTURE_TREE_HIT</ref> for a replacement </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga5cd2feb367feeacad0c03cb7ddba5f10" kindref="member">b2Shapiro</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000133"/>See <ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> and <ref refid="group__struct__utils__tree_1ga91f2e3a3a502d5445fd7fe5983a5fe92" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT</ref> for a replacement </para>
</listitem>
<varlistentry><term>Global <ref refid="fold__vars_8h_1a0244a629b5ab4f58b77590c3dfd130dc" kindref="member">base_pair</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000081"/>Do not use this variable anymore!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__data__structures_1gaaeed53a7508c6ce549a98223e94b25df" kindref="member">bondT</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000219"/>Use <ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance</ref>  (const char *str1, const char *str2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000207"/>Use vrna_bp_distance instead</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga49962ad6242b8c628de6ca16bb831c1d" kindref="member">bppm_symbol</ref>  (const float *x)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000214"/>Use <ref refid="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" kindref="member">vrna_bpp_symbol()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure</ref>  (char *structure, FLT_OR_DBL *pr, unsigned int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000213"/>Use <ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="part__func_8h_1ae89a63bd83e75a80b2ba36d20b31ce81" kindref="member">centroid</ref>  (int length, double *dist)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000109"/>This function is deprecated and should not be used anymore as it is not threadsafe! </para>
</listitem>
<varlistentry><term>File <ref refid="char__stream_8h" kindref="compound">char_stream.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000029"/>Use <ref refid="datastructures_2char__stream_8h" kindref="compound">ViennaRNA/datastructures/char_stream.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gadbd3b0b1c144cbfb4efe704b2b260f96" kindref="member">circalifold</ref>  (const char **strings, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000013"/>Usage of this function is discouraged! Use vrna_alicircfold(), and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" kindref="member">circfold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000067"/>Use <ref refid="group__mfe__global_1gaf973483d8acbc8cc9aacfc8a9b7f0074" kindref="member">vrna_circfold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gae5c1e7331718669bdae7a86de2be6184" kindref="member">co_pf_fold</ref>  (char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000114"/>{Use <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> instead!} </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gaabfc6cb6d02b8f08ac4c92f4f5b125d9" kindref="member">co_pf_fold_par</ref>  (char *sequence, char *structure, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000115"/>Use <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000030"/>use <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par</ref>  (const char *string, char *structure, vrna_param_t *parameters, int is_constrained)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000031"/>use <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1gadd463184355d0803b6ee6e09f29182f2" kindref="member">compute_BPdifferences</ref>  (short *pt1, short *pt2, unsigned int turn)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000209"/>Use <ref refid="group__struct__utils_1ga5a27bd058183170afd4716f5b8ff511a" kindref="member">vrna_refBPdist_matrix()</ref> instead</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga94c19120130e66a667a10a3c8598550c" kindref="member">compute_probabilities</ref>  (double FAB, double FEA, double FEB, vrna_ep_t *prAB, vrna_ep_t *prA, vrna_ep_t *prB, int Alength)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000117"/>{ Use <ref refid="group__thermodynamics_1gaa1e39e73afb51fbaf4ae38f0c066c46b" kindref="member">vrna_pf_dimer_probs()</ref> instead!} </para>
</listitem>
<varlistentry><term>Global <ref refid="hard_8h_1a36c3a6c3218b041f992052767bc74549" kindref="member">constrain_ptypes</ref>  (const char *constraint, unsigned int length, char *ptype, int *BP, int min_loop_size, unsigned int idx_type)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000164"/>Do not use this function anymore! Structure constraints are now handled through <ref refid="group__hard__constraints_1gac7e4c4f8abe3163a68110c5bff24e01d" kindref="member">vrna_hc_t</ref> and related functions. </para>
</listitem>
<varlistentry><term>File <ref refid="constraints_8h" kindref="compound">constraints.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000039"/>Use <ref refid="constraints_2basic_8h" kindref="compound">ViennaRNA/constraints/basic.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="constraints__hard_8h" kindref="compound">constraints_hard.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000040"/>Use <ref refid="hard_8h" kindref="compound">ViennaRNA/constraints/hard.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="constraints__ligand_8h" kindref="compound">constraints_ligand.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000041"/>Use <ref refid="ligand_8h" kindref="compound">ViennaRNA/constraints/ligand.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="constraints__SHAPE_8h" kindref="compound">constraints_SHAPE.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000042"/>Use <ref refid="SHAPE_8h" kindref="compound">ViennaRNA/constraints/SHAPE.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="constraints__soft_8h" kindref="compound">constraints_soft.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000043"/>Use <ref refid="soft_8h" kindref="compound">ViennaRNA/constraints/soft.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="convert__epars_8h" kindref="compound">convert_epars.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000044"/>Use <ref refid="convert_8h" kindref="compound">ViennaRNA/params/convert.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1gafeaa6d68eef3a99d0a7aa08aa91c6601" kindref="member">copy_pair_table</ref>  (const short *pt)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000204"/>Use <ref refid="group__struct__utils__pair__table_1ga2daefbbd6d9f8803731651882f54332d" kindref="member">vrna_ptable_copy()</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__data__structures_1ga8412f116a2eb07b59ade9e14ca7c5ef1" kindref="member">cpair</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000217"/>Use <ref refid="group__data__structures_1gae4fc91141cc69c6d8eaf1332cb991ecc" kindref="member">vrna_cpair_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="alifold_8h_1af3cbac6ff5d706d6e414677841ddf94c" kindref="member">cv_fact</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000016"/>See <ref refid="structvrna__md__s_1a62ebefb9d0643e5c4c8a2ec84a105ce6" kindref="member">vrna_md_t.cv_fact</ref>, and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> to avoid using global variables </para>
</listitem>
<varlistentry><term>File <ref refid="data__structures_8h" kindref="compound">data_structures.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000045"/>Use <ref refid="datastructures_2basic_8h" kindref="compound">ViennaRNA/datastructures/basic.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__kl__neighborhood__mfe_1ga05bf4f31d216b1b160fd2d3d68e9b487" kindref="member">destroy_TwoDfold_variables</ref>  (<ref refid="structTwoDfold__vars" kindref="compound">TwoDfold_vars</ref> *our_variables)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000003"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__mfe_1gaaee907015f196f670406649d98e5f8ab" kindref="member">vrna_mfe_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="2Dpfold_8h_1afe994291458ee2ac34d3eb825ef62a15" kindref="member">destroy_TwoDpfold_variables</ref>  (<ref refid="structTwoDpfold__vars" kindref="compound">TwoDpfold_vars</ref> *vars)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000008"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga51f9851f3500c2aae66674142a6a2dd5" kindref="member">E_Stem</ref>  (int type, int si1, int sj1, int extLoop, vrna_param_t *P)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000156"/>Please use one of the functions <ref refid="group__eval__loops__ext_1gaa0c313c90da11aa741dcd62746d85337" kindref="member">vrna_E_ext_stem()</ref> and E_MLstem() instead! Use the former for cases where <computeroutput>extLoop</computeroutput> != 0 and the latter otherwise. </para>
</listitem>
<varlistentry><term>File <ref refid="energy__const_8h" kindref="compound">energy_const.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000046"/>Use <ref refid="constants_8h" kindref="compound">ViennaRNA/params/constants.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="alifold_8h_1a1c48869c03b49a342bf4cbdd61900081" kindref="member">energy_of_alistruct</ref>  (const char **sequences, const char *structure, int n_seq, float *energy)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000015"/>Usage of this function is discouraged! Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref>, and <ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga657222e2758c46bf13b416ef3032e417" kindref="member">energy_of_circ_struct</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000059"/>This function is deprecated and should not be used in future programs Use <ref refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" kindref="member">energy_of_circ_structure()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga3f01f9744ba6a40555eb4d81fc77f6df" kindref="member">energy_of_circ_struct_par</ref>  (const char *string, const char *structure, vrna_param_t *parameters, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000051"/>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1gaeb14f3664aec67fc03268ac75253f0f8" kindref="member">energy_of_circ_structure</ref>  (const char *string, const char *structure, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000050"/>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga539ecaed89730f7644c202f304d7529b" kindref="member">energy_of_move</ref>  (const char *string, const char *structure, int m1, int m2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000054"/>Use <ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga49e0ee561be69faf0568213546f6a53f" kindref="member">energy_of_move_pt</ref>  (short *pt, short *s, short *s1, int m1, int m2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000055"/>Use <ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1gac2b37fea2145c94d925a3f33378ef87b" kindref="member">energy_of_struct</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000057"/>This function is deprecated and should not be used in future programs! Use <ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1gaf9d064d3c496de42eca6734a96fd2090" kindref="member">energy_of_struct_par</ref>  (const char *string, const char *structure, vrna_param_t *parameters, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000049"/>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga27ce6f68512d43bf1fe14a06c9d76d5c" kindref="member">energy_of_struct_pt</ref>  (const char *string, short *ptable, short *s, short *s1)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000058"/>This function is deprecated and should not be used in future programs! Use <ref refid="group__eval__deprecated_1ga8831445966b761417e713360791299d8" kindref="member">energy_of_structure_pt()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga49acb3d5627dc6823a7ce12d116d4c69" kindref="member">energy_of_struct_pt_par</ref>  (const char *string, short *ptable, short *s, short *s1, vrna_param_t *parameters, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000053"/>Use <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> or <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1gaf93986cb3cb29770ec9cca69c9fab8cf" kindref="member">energy_of_structure</ref>  (const char *string, const char *structure, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000048"/>Use <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure()</ref> or <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga8831445966b761417e713360791299d8" kindref="member">energy_of_structure_pt</ref>  (const char *string, short *ptable, short *s, short *s1, int verbosity_level)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000052"/>Use <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt()</ref> or <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose()</ref> instead! </para>
</listitem>
<varlistentry><term>File <ref refid="energy__par_8h" kindref="compound">energy_par.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000047"/>Use <ref refid="default_8h_source" kindref="compound">ViennaRNA/params/default.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga446828a191c127861e76e2c84055f672" kindref="member">exp_E_ExtLoop</ref>  (int type, int si1, int sj1, vrna_exp_param_t *P)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000157"/>Use <ref refid="group__eval__loops__ext_1ga357484958d3cd677f88f16c75c8a5730" kindref="member">vrna_exp_E_ext_stem()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="part__func_8h_1a7b6ab474cc80accc48010ccfcc59f96b" kindref="member">expHairpinEnergy</ref>  (int u, int type, short si1, short sj1, const char *string)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000113"/>Use exp_E_Hairpin() from <ref refid="loop__energies_8h" kindref="compound">loop_energies.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="part__func_8h_1a68ba6f3a48e08ca131ab54621ce3a2d7" kindref="member">expLoopEnergy</ref>  (int u1, int u2, int type, int type2, short si1, short sj1, short sp1, short sq1)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000112"/>Use exp_E_IntLoop() from <ref refid="loop__energies_8h" kindref="compound">loop_energies.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga11b6ab8bd9be1821fea352b190a01cab" kindref="member">export_ali_bppm</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000021"/>Usage of this function is discouraged! The new <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> allows direct access to the folding matrices, including the pair probabilities! The pair probability array returned here reflects the one of the latest call to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, or any of the old API calls for consensus structure partition function folding. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga04d5d639fd4473ca766436a9bae5665c" kindref="member">export_circfold_arrays</ref>  (int *Fc_p, int *FcH_p, int *FcI_p, int *FcM_p, int **fM2_p, int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000073"/>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga004bb901e7fd2f8d5ae68f9530318ce1" kindref="member">export_circfold_arrays_par</ref>  (int *Fc_p, int *FcH_p, int *FcI_p, int *FcM_p, int **fM2_p, int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p, vrna_param_t **P_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000074"/>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gad94c0133157bed6912fe7fe866e0039e" kindref="member">export_co_bppm</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000119"/>This function is deprecated and will be removed soon! The base pair probability array is available through the <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> data structure, and its associated <ref refid="group__dp__matrices_1ga68729ab3fed26bdd1806fa814f172fc1" kindref="member">vrna_mx_pf_t</ref> member. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga5cb6b59983f1f74ccc00b9b9c4e84482" kindref="member">export_cofold_arrays</ref>  (int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **fc_p, int **indx_p, char **ptype_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000036"/>folding matrices now reside within the <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>. Thus, this function will only work in conjunction with a prior call to the deprecated functions <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref> </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga5f5bf4df35d0554f6ace9579f8744c48" kindref="member">export_cofold_arrays_gq</ref>  (int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **fc_p, int **ggg_p, int **indx_p, char **ptype_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000035"/>folding matrices now reside within the fold compound. Thus, this function will only work in conjunction with a prior call to <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref> </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga99641b8dbb40891da5490d3cc271e607" kindref="member">export_fold_arrays</ref>  (int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000071"/>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga6606ec0ec964ea506fdadb997a1a5328" kindref="member">export_fold_arrays_par</ref>  (int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p, vrna_param_t **P_p)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000072"/>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>File <ref refid="exterior__loops_8h" kindref="compound">exterior_loops.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000060"/>Use <ref refid="external_8h" kindref="compound">ViennaRNA/loops/external.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="file__formats_8h" kindref="compound">file_formats.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000061"/>Use <ref refid="io_2file__formats_8h" kindref="compound">ViennaRNA/io/file_formats.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="file__formats__msa_8h" kindref="compound">file_formats_msa.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000062"/>Use <ref refid="io_2file__formats__msa_8h" kindref="compound">ViennaRNA/io/file_formats_msa.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="file__utils_8h" kindref="compound">file_utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000063"/>Use <ref refid="io_2utils_8h" kindref="compound">ViennaRNA/io/utils.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1ab213334ce977b6d21611cdea6b80c3bf" kindref="member">filecopy</ref>  (FILE *from, FILE *to)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000193"/>Use <ref refid="group__file__utils_1ga4382a56d2fee9ed738364b99329edc7c" kindref="member">vrna_file_copy()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__deprecated_1ga4c0dabf032c04eeab9c7370d15db6ad2" kindref="member">find_saddle</ref>  (const char *seq, const char *s1, const char *s2, int width)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000169"/>Use <ref refid="group__paths__direct_1gad77dbfa125158f534147c0015a849bc3" kindref="member">vrna_path_findpath_saddle()</ref> instead! </para>
</listitem>
<varlistentry><term>File <ref refid="findpath_8h" kindref="compound">findpath.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000064"/>Use <ref refid="landscape_2findpath_8h" kindref="compound">ViennaRNA/landscape/findpath.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" kindref="member">fold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000066"/>use <ref refid="group__mfe__global_1ga29a33b2895f4e67b0480271ff289afdc" kindref="member">vrna_fold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par</ref>  (const char *sequence, char *structure, vrna_param_t *parameters, int is_constrained, int is_circular)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000065"/>use <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga72095e4554b5d577250ea14c42acc49e" kindref="member">free_alifold_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000014"/>Usage of this function is discouraged! It only affects memory being free&apos;d that was allocated by an old API function before. Release of memory occupied by the newly introduced <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> is handled by <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga0c0498f35686e26b38ee460d3db1a661" kindref="member">free_alipf_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000022"/>Usage of this function is discouraged! This function only free&apos;s memory allocated by old API function calls. Memory allocated by any of the new API calls (starting with vrna_) will be not affected! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga107fdfe5fd641868156bfd849f6866c7" kindref="member">free_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000068"/>See <ref refid="group__mfe__global_1ga29a33b2895f4e67b0480271ff289afdc" kindref="member">vrna_fold()</ref>, <ref refid="group__mfe__global_1gaf973483d8acbc8cc9aacfc8a9b7f0074" kindref="member">vrna_circfold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gaafb33d7473eb9af9d1b168ca8761c41a" kindref="member">free_co_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000032"/>This function will only free memory allocated by a prior call of <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref>. See <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> for how to use the new API </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gade3ce34ae8214811374b1d28a40dc247" kindref="member">free_co_pf_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000120"/>This function will be removed for the new API soon! See <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> for an alternative</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__deprecated_1ga9056421d716ae89f0ed3f107627f395b" kindref="member">free_path</ref>  (vrna_path_t *path)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000170"/>Use <ref refid="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" kindref="member">vrna_path_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000102"/>See vrna_fold_compound_t and its related functions for how to free memory occupied by the dynamic programming matrices </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga5349960075b1847720a2e9df021e2675" kindref="member">get_alipf_arrays</ref>  (short ***S_p, short ***S5_p, short ***S3_p, unsigned short ***a2s_p, char ***Ss_p, FLT_OR_DBL **qb_p, FLT_OR_DBL **qm_p, FLT_OR_DBL **q1k_p, FLT_OR_DBL **qln_p, short **pscore)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000024"/>It is discouraged to use this function! The new <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> allows direct access to all necessary consensus structure prediction related variables! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga665a446ba8ff211e551297a8fa36ec27" kindref="member">get_boltzmann_factor_copy</ref>  (vrna_exp_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000148"/>Use <ref refid="group__energy__parameters_1ga70bc46be7cfa5434a71efe241c4f0609" kindref="member">vrna_exp_params_copy()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1gaef2b931c7e9d4ffb0a5c33df50ec2068" kindref="member">get_boltzmann_factors</ref>  (double temperature, double betaScale, vrna_md_t md, double pf_scale)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000147"/>Use <ref refid="group__energy__parameters_1gab1f3016f96aa96bff020cdd904605afa" kindref="member">vrna_exp_params()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga2aa1d87c97f35d2e4121634a17556829" kindref="member">get_boltzmann_factors_ali</ref>  (unsigned int n_seq, double temperature, double betaScale, vrna_md_t md, double pf_scale)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000150"/>Use <ref refid="group__energy__parameters_1gaf78c09e685e6eef4100b1a41d4042550" kindref="member">vrna_exp_params_comparative()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="part__func_8h_1a4e99e951dfdc006fe56c3a59374378ed" kindref="member">get_centroid_struct_gquad_pr</ref>  (int length, double *dist)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000110"/>This function is deprecated and should not be used anymore as it is not threadsafe! </para>
</listitem>
<varlistentry><term>Global <ref refid="centroid_8h_1a7dcc64bcefcf682396dd3bbea02416fe" kindref="member">get_centroid_struct_pl</ref>  (int length, double *dist, vrna_ep_t *pl)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000027"/>This function was renamed to <ref refid="group__centroid__fold_1ga13881673a0b214d42a59140ef5764dbb" kindref="member">vrna_centroid_from_plist()</ref>  </para>
</listitem>
<varlistentry><term>Global <ref refid="centroid_8h_1ac92486ce514677256f4a832dc518759c" kindref="member">get_centroid_struct_pr</ref>  (int length, double *dist, FLT_OR_DBL *pr)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000028"/>This function was renamed to <ref refid="group__centroid__fold_1ga98193ede06778a9ea966cc8fc43d0804" kindref="member">vrna_centroid_from_probs()</ref>  </para>
</listitem>
<varlistentry><term>Global <ref refid="concentrations_8h_1a163159722a422ba90335a601fc34b8fb" kindref="member">get_concentrations</ref>  (double FEAB, double FEAA, double FEBB, double FEA, double FEB, double *startconc)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000038"/>{ Use <ref refid="group__pf__cofold_1ga83b8d5d0f7875d6d5013b208f23e3356" kindref="member">vrna_pf_dimer_concentrations()</ref> instead!} </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1abe51806d14cff0789a8c1df7dbc45b71" kindref="member">get_line</ref>  (FILE *fp)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000183"/>Use <ref refid="group__file__utils_1gad16c270b70a77c753088b29de8a802dc" kindref="member">vrna_read_line()</ref> as a substitute! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils__deprecated_1gaa2d600be90844094ec145ea14a314d2f" kindref="member">get_mpi</ref>  (char *Alseq[], int n_seq, int length, int *mini)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000182"/>Use <ref refid="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" kindref="member">vrna_aln_mpi()</ref> as a replacement</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__deprecated_1gac009a44db824f90a6de5f9c28b9b3222" kindref="member">get_path</ref>  (const char *seq, const char *s1, const char *s2, int width)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000171"/>Use <ref refid="group__paths__direct_1ga2fed8ff126f5becd82cedd81a25c9bf0" kindref="member">vrna_path_findpath()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="part__func__co_8h_1afb35675f133966dc9f8a8c2c9686e13a" kindref="member">get_plist</ref>  (vrna_ep_t *pl, int length, double cut_off)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000116"/>{ This function is deprecated and will be removed soon!} use <ref refid="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" kindref="member">assign_plist_from_pr()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga0ccf4e1be085a573533fd6b9da2d8cf9" kindref="member">get_scaled_alipf_parameters</ref>  (unsigned int n_seq)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000149"/>Use <ref refid="group__energy__parameters_1gaf78c09e685e6eef4100b1a41d4042550" kindref="member">vrna_exp_params_comparative()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga7fa6a000d7c16feab939f2c4ee626197" kindref="member">get_scaled_parameters</ref>  (double temperature, vrna_md_t md)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000152"/>Use <ref refid="group__energy__parameters_1gad0e3e7e74bdc50d1709d40c92993185e" kindref="member">vrna_params()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1gabf3b9271c41dd3fac02d56e0b02b3344" kindref="member">get_scaled_pf_parameters</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000146"/>Use <ref refid="group__energy__parameters_1gab1f3016f96aa96bff020cdd904605afa" kindref="member">vrna_exp_params()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__kl__neighborhood__mfe_1gac9284f132cf0eaa0a2f43590eda05488" kindref="member">get_TwoDfold_variables</ref>  (const char *seq, const char *structure1, const char *structure2, int circ)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000002"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__mfe_1gaaee907015f196f670406649d98e5f8ab" kindref="member">vrna_mfe_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="2Dpfold_8h_1a1aca740e2a75ab2b2951538266e53d64" kindref="member">get_TwoDpfold_variables</ref>  (const char *seq, const char *structure1, char *structure2, int circ)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000007"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>File <ref refid="hairpin__loops_8h" kindref="compound">hairpin_loops.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000084"/>Use <ref refid="hairpin_8h" kindref="compound">ViennaRNA/loops/hairpin.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gab327ce11972f5ac069d52c8dedfdb700" kindref="member">HairpinE</ref>  (int size, int type, int si1, int sj1, const char *string)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000076"/>{This function is deprecated and will be removed soon. Use E_Hairpin() instead!}  </para>
</listitem>
<varlistentry><term>Global <ref refid="strings_8h_1ad9dc7bfc9aa664dc6698f17ce07fc7e7" kindref="member">hamming</ref>  (const char *s1, const char *s2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000198"/>Use <ref refid="group__string__utils_1ga301798b43b6f66687985c725efd14f32" kindref="member">vrna_hamming_distance()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="strings_8h_1a96d3c36717d624514055ce201cab1542" kindref="member">hamming_bound</ref>  (const char *s1, const char *s2, int n)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000199"/>Use <ref refid="group__string__utils_1ga5d1c2271e79d9bcb52d4e68360763fb9" kindref="member">vrna_hamming_distance_bound()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="fold__vars_8h_1a92089ae3a51b5d75a14ce9cc29cc8317" kindref="member">iindx</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000083"/>Do not use this variable anymore!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gaa12dda9dd6179cdd22bcce87c0682c07" kindref="member">init_co_pf_fold</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000118"/>{ This function is deprecated and will be removed soon!}</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga15176e23eceeff8c7d14eabcfec8a2af" kindref="member">init_pf_fold</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000108"/>This function is obsolete and will be removed soon! </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a8aaa6d9be6f803f496d9b97375c371f3" kindref="member">init_rand</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000190"/>Use <ref refid="group__utils_1ga0ad1f40ea316e5c5918695c35613027a" kindref="member">vrna_init_rand()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gafee0c32208aa2ac97338b6e3fbad7fa5" kindref="member">initialize_cofold</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000037"/>{This function is obsolete and will be removed soon!} </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gac3f0a28d9cb609d388b155445073fd20" kindref="member">initialize_fold</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000077"/>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API! </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a68ff0849d44f62fe491800378a5ffcb4" kindref="member">int_urn</ref>  (int from, int to)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000192"/>Use <ref refid="group__utils_1ga46111bb3747dbcf4609f0d40ae169ad9" kindref="member">vrna_int_urn()</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="interior__loops_8h" kindref="compound">interior_loops.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000085"/>Use <ref refid="internal_8h" kindref="compound">ViennaRNA/loops/internal.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window__deprecated_1gafdd1e11b5c7ad443b9f86b818e67bab4" kindref="member">Lfold</ref>  (const char *string, const char *structure, int maxdist)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000086"/>Use <ref refid="group__mfe__window_1gacdbc049dcfc7a0e2eb37a327efab91e2" kindref="member">vrna_mfe_window()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window__deprecated_1ga9b568887c6091a54252729adcb35f6d2" kindref="member">Lfoldz</ref>  (const char *string, const char *structure, int maxdist, int zsc, double min_z)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000087"/>Use <ref refid="group__mfe__window_1ga90d3756f07aa78a47ffac187ead3c0aa" kindref="member">vrna_mfe_window_zscore()</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="loop__energies_8h" kindref="compound">loop_energies.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000088"/>Use <ref refid="all_8h" kindref="compound">ViennaRNA/loops/all.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__deprecated_1ga507d4fd93f4b398d793ba2402731388d" kindref="member">loop_energy</ref>  (short *ptable, short *s, short *s1, int i)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000056"/>Use <ref refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" kindref="member">vrna_eval_loop_pt()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga2163034a25c6115d894b199e97e03f6c" kindref="member">LoopEnergy</ref>  (int n1, int n2, int type, int type_2, int si1, int sj1, int sp1, int sq1)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000075"/>{This function is deprecated and will be removed soon. Use E_IntLoop() instead!}  </para>
</listitem>
<varlistentry><term>Global <ref refid="profiledist_8h_1a904c7eaf4a2413567c00ac4891749d18" kindref="member">Make_bp_profile</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000128"/>This function is deprecated and will be removed soon! See <ref refid="profiledist_8h_1a3dff26e707a2a2e65a0f759caabde6e7" kindref="member">Make_bp_profile_bppm()</ref> for a replacement </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga89c32307ee50a0026f4a3131fac0845a" kindref="member">make_pair_table</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000203"/>Use <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga9aa3bf3b4346bb7fb88efc154dd07a79" kindref="member">make_pair_table_snoop</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000206"/>Use <ref refid="group__struct__utils__pair__table_1gaef0f7e1a6c00c81a349973de53039dda" kindref="member">vrna_pt_snoop_get()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga578cd9712dee812fb1c58aa3cc489864" kindref="member">make_referenceBP_array</ref>  (short *reference_pt, unsigned int turn)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000208"/>Use <ref refid="group__struct__utils_1gab4c2a00c99ce1d612ffa5bde114eb96d" kindref="member">vrna_refBPcnt_matrix()</ref> instead</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mea__fold_1ga396ec6144c6a74fcbab4cea6b42d76c3" kindref="member">MEA</ref>  (plist *p, char *structure, double gamma)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000089"/>Use <ref refid="group__mea__fold_1ga9b87b664ef014c1266aa50d5bc39f2ac" kindref="member">vrna_MEA()</ref> or <ref refid="group__mea__fold_1ga26afeef667f7013a743d1d1ebe42666a" kindref="member">vrna_MEA_from_plist()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" kindref="member">mean_bp_dist</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000111"/>This function is not threadsafe and should not be used anymore. Use <ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000105"/>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gad5ba36cef8d01cf4244cc09b9bf1ce1d" kindref="member">mean_bp_distance_pr</ref>  (int length, FLT_OR_DBL *pr)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000106"/>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead! </para>
</listitem>
<varlistentry><term>File <ref refid="multibranch__loops_8h" kindref="compound">multibranch_loops.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000094"/>Use <ref refid="multibranch_8h" kindref="compound">ViennaRNA/loops/multibranch.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="naview_8h" kindref="compound">naview.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000095"/>Use ViennaRNA/plotting/naview/naview.h instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="alifold_8h_1a502948a122a2af5b914355b1f3ea2f61" kindref="member">nc_fact</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000017"/>See <ref refid="structvrna__md__s_1abcf568e6124bfcb2f847ff4eb0dfded6" kindref="member">vrna_md_t.nc_fact</ref>, and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> to avoid using global variables </para>
</listitem>
<varlistentry><term>File <ref refid="neighbor_8h" kindref="compound">neighbor.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000096"/>Use <ref refid="landscape_2neighbor_8h" kindref="compound">ViennaRNA/landscape/neighbor.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a127ce946e56b5a5773781cabe68e38c5" kindref="member">nrerror</ref>  (const char message[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000187"/>Use <ref refid="group__message__utils_1ga36b35be01d7f36cf7f59c245eee628d1" kindref="member">vrna_message_error()</ref> instead! (since v2.3.0)  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" kindref="member">pack_structure</ref>  (const char *struc)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000201"/>Use <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> as a replacement</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__data__structures_1ga4381025ffbd692e54189b2c679c79c99" kindref="member">PAIR</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000215"/>Use <ref refid="group__data__structures_1gac8c5669d3fb813cacf506489689305ce" kindref="member">vrna_basepair_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils__deprecated_1ga7b61662a793ad0aa1ea38efc3a5baacc" kindref="member">pair_info</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000181"/>Use <ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>File <ref refid="params_8h" kindref="compound">params.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000097"/>Use <ref refid="params_2basic_8h" kindref="compound">ViennaRNA/params/basic.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga857dde86357d306cc902f0d8b2797659" kindref="member">paramT</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000144"/>Use <ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1gadf0ad2d46c9ca7b850437d1b79627a7e" kindref="member">parenthesis_structure</ref>  (char *structure, vrna_bp_stack_t *bp, int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000211"/>use vrna_parenthesis_structure() instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1gab9c5c8311bd5120900585d4fa50c2df0" kindref="member">parenthesis_zuker</ref>  (char *structure, vrna_bp_stack_t *bp, int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000212"/>use vrna_parenthesis_zuker instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__deprecated_1gab6b8737d5377e70a7815d04aae7fd884" kindref="member">path_t</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000172"/>Use <ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt__deprecated_1ga00474051204ac9ad576b3e45174d03ff" kindref="member">pbacktrack_circ</ref>  (char *sequence)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000101"/>Use <ref refid="group__subopt__stochbt_1ga594844ac73c4e66e00d6791b31540634" kindref="member">vrna_pbacktrack()</ref> instead. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000100"/>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par</ref>  (const char *sequence, char *structure, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained, int is_circular)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000099"/>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga8bffe1828e2cbec101769f5cc0b1535b" kindref="member">pf_paramT</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000145"/>Use <ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__data__structures_1ga9608eed021ebfbdd7a901cfdc446c8e9" kindref="member">plist</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000216"/>Use <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> or <ref refid="structvrna__elem__prob__s" kindref="compound">vrna_elem_prob_s</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="plot__aln_8h" kindref="compound">plot_aln.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000124"/>Use <ref refid="plotting_2alignments_8h" kindref="compound">ViennaRNA/plotting/alignments.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="plot__layouts_8h" kindref="compound">plot_layouts.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000125"/>Use <ref refid="layouts_8h" kindref="compound">ViennaRNA/plotting/layouts.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="plot__structure_8h" kindref="compound">plot_structure.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000126"/>Use <ref refid="plotting_2structures_8h" kindref="compound">ViennaRNA/plotting/structures.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="plot__utils_8h" kindref="compound">plot_utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000127"/>Use <ref refid="plotting_2utils_8h" kindref="compound">ViennaRNA/plotting/utils.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000082"/>Do not use this variable anymore!  </para>
</listitem>
<varlistentry><term>Global <ref refid="hard_8h_1a4d167deb70bb51723e44374dc981deb2" kindref="member">print_tty_constraint</ref>  (unsigned int option)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000162"/>Use vrna_message_constraints() instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="hard_8h_1ae8ae8a34962b9959be3f6c40f0a80ac1" kindref="member">print_tty_constraint_full</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000163"/>Use <ref refid="group__constraints_1gaec7e13fa0465c2acc7a621d1aecb709f" kindref="member">vrna_message_constraint_options_all()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a6bf778117d31b7fd90db435323f4ef74" kindref="member">print_tty_input_seq</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000184"/>Use <ref refid="group__message__utils_1gaee1dd652ca5b9e56b096963a1576f73b" kindref="member">vrna_message_input_seq_simple()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1ae4ef89b662a3e9b5b5f0781d9757aba0" kindref="member">print_tty_input_seq_str</ref>  (const char *s)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000185"/>Use <ref refid="group__message__utils_1gaf4d194d558b0c975f269de01dea52460" kindref="member">vrna_message_input_seq()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils__deprecated_1ga821802c3685e37e15182341f6217470d" kindref="member">PS_color_aln</ref>  (const char *structure, const char *filename, const char *seqs[], const char *names[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000173"/>Use <ref refid="group__alignment__plots_1ga3bb7409f5b73c2273f9f76cf8b754034" kindref="member">vrna_file_PS_aln()</ref> instead!</para>
<para></para>
</listitem>
<varlistentry><term>File <ref refid="PS__dot_8h" kindref="compound">PS_dot.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000129"/>Use <ref refid="probabilities_8h" kindref="compound">ViennaRNA/plotting/probabilities.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils__deprecated_1ga689a97a7e3b8a2df14728b8204d9d57b" kindref="member">PS_dot_plot</ref>  (char *string, char *file)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000177"/>This function is deprecated and will be removed soon! Use <ref refid="group__plotting__utils__deprecated_1ga4d3a807be24a9a60a90a82dbc3225f02" kindref="member">PS_dot_plot_list()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils_1ga0873c7cc4cd7a11c9a2cea19dde7e9c9" kindref="member">PS_rna_plot</ref>  (char *string, char *structure, char *file)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000178"/>Use <ref refid="group__plotting__utils_1gabdc8f6548ba4a3bc3cd868ccbcfdb86a" kindref="member">vrna_file_PS_rnaplot()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils_1ga47856b2504b566588785597b6ebb8271" kindref="member">PS_rna_plot_a</ref>  (char *string, char *structure, char *file, char *pre, char *post)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000179"/>Use <ref refid="group__plotting__utils_1ga139a31dd0ba9fc6612431f67de901c31" kindref="member">vrna_file_PS_rnaplot_a()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils_1ga32fa0f97625119e9d24dd2e7153abc4f" kindref="member">PS_rna_plot_a_gquad</ref>  (char *string, char *structure, char *ssfile, char *pre, char *post)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000180"/>Use <ref refid="group__plotting__utils_1ga139a31dd0ba9fc6612431f67de901c31" kindref="member">vrna_file_PS_rnaplot_a()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="strings_8h_1a1b95eac365a021572e1c37e5993a89be" kindref="member">random_string</ref>  (int l, const char symbols[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000197"/>Use <ref refid="group__string__utils_1ga4eeb3750dcf860b9f3158249f95dbd7f" kindref="member">vrna_random_string()</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="read__epars_8h" kindref="compound">read_epars.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000130"/>Use <ref refid="io_8h" kindref="compound">ViennaRNA/params/io.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga165a142a3c68fb6655c69ef4ab7cd749" kindref="member">read_parameter_file</ref>  (const char fname[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000154"/>Use <ref refid="group__energy__parameters__rw_1gabb0583595c67094986ef90cb4f1c7555" kindref="member">vrna_params_load()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats_1gafd194a69af9d92b5b0412a7627ac1595" kindref="member">read_record</ref>  (char **header, char **sequence, char ***rest, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000168"/>This function is deprecated! Use <ref refid="group__file__formats_1ga8cfb7e271efc9e1f34640acb85475639" kindref="member">vrna_file_fasta_read_record()</ref> as a replacment. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga541f2cf7436e9bc939b0a49b24baf987" kindref="member">scale_parameters</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000151"/>Use <ref refid="group__energy__parameters_1gad0e3e7e74bdc50d1709d40c92993185e" kindref="member">vrna_params()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__data__structures_1gaaacedee1f05d3d45aa6764eca51a8876" kindref="member">sect</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000218"/>Use <ref refid="group__data__structures_1gacc9cdae790dac75a7024e7069c0d4400" kindref="member">vrna_sect_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__model__details_1gabad896c3650d420f3f3ddefc69e2bceb" kindref="member">set_model_details</ref>  (vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000093"/>This function will vanish as soon as backward compatibility of RNAlib is dropped (expected in version 3). Use <ref refid="group__model__details_1ga8ac6ff84936282436f822644bf841f66" kindref="member">vrna_md_set_default()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils__deprecated_1gac4ea13d35308f09940178d2b05a248c2" kindref="member">simple_circplot_coordinates</ref>  (short *pair_table, float *x, float *y)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000176"/>Consider switching to <ref refid="group__plot__layout__utils_1gaeec80faa235f3ca489bc5e50adc41460" kindref="member">vrna_plot_coords_circular_pt()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__plotting__utils__deprecated_1gaf4b9173e7d3fd361c3c85e6def194123" kindref="member">simple_xy_coordinates</ref>  (short *pair_table, float *X, float *Y)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000175"/>Consider switching to <ref refid="group__plot__layout__utils_1ga76788091848e73cfb24b31536e22b7dd" kindref="member">vrna_plot_coords_simple_pt()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="subopt_8h_1aa0f46ff02e1017469cf902d02ecd7f9a" kindref="member">SOLUTION</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000137"/>Use <ref refid="subopt_8h_1a01ae9a0f27d245d89f705afd843fc457" kindref="member">vrna_subopt_solution_t</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1ad7e1e137b3bf1f7108933d302a7f0177" kindref="member">space</ref>  (unsigned size)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000188"/>Use <ref refid="group__utils_1gaf37a0979367c977edfb9da6614eebe99" kindref="member">vrna_alloc()</ref> instead! (since v2.2.0)  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt__deprecated_1gacd79b1a570e6ad9be24cb11fe8cae30a" kindref="member">st_back</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000098"/>set the <emphasis>uniq_ML</emphasis> flag in <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> before passing it to <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga8f18624bcd0b47d1a266d9e5527e5362" kindref="member">stackProb</ref>  (double cutoff)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000107"/>Use <ref refid="group__thermodynamics_1gaa687ae9f56f5cedba1e863cd6d54af43" kindref="member">vrna_stack_prob()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="strings_8h_1ad3f18dd83f958f18b2f26ecb99305208" kindref="member">str_DNA2RNA</ref>  (char *sequence)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000196"/>Use <ref refid="group__string__utils_1gacfed92cba77064f6c743f9118d079bfc" kindref="member">vrna_seq_toRNA()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="strings_8h_1a17b796b806f96b70382077fb5bc519bb" kindref="member">str_uppercase</ref>  (char *sequence)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000195"/>Use <ref refid="group__string__utils_1ga4f44dca03c9d708d68e64c0610bb9091" kindref="member">vrna_seq_toupper()</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="stream__output_8h" kindref="compound">stream_output.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000134"/>Use <ref refid="datastructures_2stream__output_8h" kindref="compound">ViennaRNA/datastructures/stream_output.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="string__utils_8h" kindref="compound">string_utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000135"/>Use <ref refid="strings_8h" kindref="compound">ViennaRNA/utils/strings.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="structure__utils_8h" kindref="compound">structure_utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000136"/>Use <ref refid="utils_2structures_8h" kindref="compound">ViennaRNA/utils/structures.h</ref> instead  </para>
</listitem>
<varlistentry><term>File <ref refid="svm__utils_8h" kindref="compound">svm_utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000140"/>Use <ref refid="svm_8h_source" kindref="compound">ViennaRNA/utils/svm.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000092"/>Use <ref refid="group__model__details_1gaf9e527e9a2f7e6fd6e42bc6e602f5445" kindref="member">vrna_md_defaults_temperature()</ref>, and <ref refid="group__model__details_1ga96b24a74437f9ba46c4e06343155bf46" kindref="member">vrna_md_defaults_temperature_get()</ref> to change, and read the global default temperature settings </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a7afeb906cb36e9d77379eabc6907ac46" kindref="member">time_stamp</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000194"/>Use <ref refid="group__utils_1gad3bbe8d01afb1310609cb018d5290550" kindref="member">vrna_time_stamp()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__kl__neighborhood__mfe_1gaf4dc05bf8fc1ea53acd7aeb798ba80c2" kindref="member">TwoDfold_backtrack_f5</ref>  (unsigned int j, int k, int l, <ref refid="structTwoDfold__vars" kindref="compound">TwoDfold_vars</ref> *vars)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000005"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__mfe_1gaaee907015f196f670406649d98e5f8ab" kindref="member">vrna_mfe_TwoD()</ref>, <ref refid="group__kl__neighborhood__mfe_1ga973492e4a21fb31fcec45db713435952" kindref="member">vrna_backtrack5_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Class <ref refid="group__kl__neighborhood__mfe" kindref="compound">TwoDfold_vars</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000001"/>This data structure will be removed from the library soon! Use <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__mfe_1gaaee907015f196f670406649d98e5f8ab" kindref="member">vrna_mfe_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__kl__neighborhood__mfe_1ga7fc5e3e92fe97914ca4eccd33c01c2a7" kindref="member">TwoDfoldList</ref>  (<ref refid="structTwoDfold__vars" kindref="compound">TwoDfold_vars</ref> *vars, int distance1, int distance2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000004"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__mfe_1gaaee907015f196f670406649d98e5f8ab" kindref="member">vrna_mfe_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="2Dpfold_8h_1ae251288f50dd4ae7d315af0085775f71" kindref="member">TwoDpfold_pbacktrack</ref>  (<ref refid="structTwoDpfold__vars" kindref="compound">TwoDpfold_vars</ref> *vars, int d1, int d2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000010"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, <ref refid="group__kl__neighborhood__stochbt_1ga32031b44f64ad0565fced18a3bfa98f6" kindref="member">vrna_pbacktrack_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="2Dpfold_8h_1a13430ac6a7f90df426774f131647d2c7" kindref="member">TwoDpfold_pbacktrack5</ref>  (<ref refid="structTwoDpfold__vars" kindref="compound">TwoDpfold_vars</ref> *vars, int d1, int d2, unsigned int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000011"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, <ref refid="group__kl__neighborhood__stochbt_1gaf04a66128615598139d5d3bd047a4565" kindref="member">vrna_pbacktrack5_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>Class <ref refid="structTwoDpfold__vars" kindref="compound">TwoDpfold_vars</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000006"/>This data structure will be removed from the library soon! Use <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="2Dpfold_8h_1a692243dac482a1e158a8e1b7881cfda2" kindref="member">TwoDpfoldList</ref>  (<ref refid="structTwoDpfold__vars" kindref="compound">TwoDpfold_vars</ref> *vars, int maxDistance1, int maxDistance2)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000009"/>Use the new API that relies on <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> and the corresponding functions vrna_fold_compound_TwoD(), <ref refid="group__kl__neighborhood__pf_1ga60505826ff99f05e9e1579f34ebf4dee" kindref="member">vrna_pf_TwoD()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> instead! </para>
</listitem>
<varlistentry><term>File <ref refid="units_8h" kindref="compound">units.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000141"/>Use <ref refid="utils_2units_8h" kindref="compound">ViennaRNA/utils/units.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__deprecated_1ga071c6921efe1eb974f115ee6fefa3c39" kindref="member">unpack_structure</ref>  (const char *packed)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000202"/>Use <ref refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" kindref="member">vrna_db_unpack()</ref> as a replacement</para>
<para></para>
</listitem>
<varlistentry><term>Global <ref refid="alifold_8h_1ac484c6bd429bafbd353b91044508d8e9" kindref="member">update_alifold_params</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000025"/>Usage of this function is discouraged! The new API uses <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> to lump all folding related necessities together, including the energy parameters. Use vrna_update_fold_params() to update the energy parameters within a <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>.  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga6e0f36c1f9b7d9dd4bfbad914c1119e5" kindref="member">update_co_pf_params</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000121"/>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga75465d7e8793db68a434d83df9a2e794" kindref="member">update_co_pf_params_par</ref>  (int length, vrna_exp_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000122"/>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga4fcbf34e77b99bfbb2333d2ab0c41a57" kindref="member">update_cofold_params</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000033"/>See <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> for an alternative using the new API </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gaaadbd28b4e428710529ab4098fdacad3" kindref="member">update_cofold_params_par</ref>  (vrna_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000034"/>See <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> for an alternative using the new API </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1ga41bf8f6fa15b94471f7095cad9f0ccf3" kindref="member">update_fold_params</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000069"/>For non-default model settings use the new API with <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global__deprecated_1gae66dc422efb8f5d56717d92d6002a9f8" kindref="member">update_fold_params_par</ref>  (vrna_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000070"/>For non-default model settings use the new API with <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1ga384e927890f9c034ff09fa66da102d28" kindref="member">update_pf_params</ref>  (int length)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000103"/>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global__deprecated_1gaafe2d1b21f5418b123b088aa395e827d" kindref="member">update_pf_params_par</ref>  (int length, vrna_exp_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000104"/>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1aaa328491c84996e445d027fde9800f2e" kindref="member">urn</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000191"/>Use <ref refid="group__utils_1ga384e256ebb295d04a14426179db0dd6e" kindref="member">vrna_urn()</ref> instead!  </para>
</listitem>
<varlistentry><term>File <ref refid="utils_8h" kindref="compound">utils.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000123"/>Use <ref refid="utils_2basic_8h" kindref="compound">ViennaRNA/utils/basic.h</ref> instead </para>
<para><anchor id="deprecated_1_deprecated000142"/>Use <ref refid="utils_2basic_8h" kindref="compound">ViennaRNA/utils/basic.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__fold__compound_1ga7806651f51b195013839a218b3bbd5a3" kindref="member">vrna_callback_free_auxdata</ref>  (void *data)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000078"/>Use <ref refid="group__fold__compound_1gab4e75b7511179095ef41dc1a8656433a" kindref="member">vrna_auxdata_free_f(void *data)</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga9ef3a297201dbf838a8daff2b45c0c82" kindref="member">vrna_cofold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000091"/>This function is obsolete since <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref>/vrna_fold() can handle complexes multiple sequences since v2.5.0. Use <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref>/vrna_fold() for connected component MFE instead and compute MFEs of unconnected states separately. </para>
</listitem>
<varlistentry><term>Global <ref refid="group__constraints_1ga62e0ed0c33002c09423de4e646f85a2b" kindref="member">VRNA_CONSTRAINT_FILE</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000158"/>Use 0 instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats_1ga7d725ef525b29891abef3f1ed42599a4" kindref="member">VRNA_CONSTRAINT_MULTILINE</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000165"/>see <ref refid="group__file__formats_1gad37cbb63a05eed63ba25c91628409be0" kindref="member">vrna_extract_record_rest_structure()</ref>  </para>
</listitem>
<varlistentry><term>Global <ref refid="hard_8h_1a08d12a9a846ea593b7171d277c9f033f" kindref="member">VRNA_CONSTRAINT_NO_HEADER</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000161"/>This mode is not supported anymore! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__constraints_1ga62aa195893d02d1a79ca94952748df36" kindref="member">VRNA_CONSTRAINT_SOFT_MFE</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000159"/>This flag has no meaning anymore, since constraints are now always stored! (since v2.2.6) </para>
</listitem>
<varlistentry><term>Global <ref refid="group__constraints_1ga03fb5000c19b9a2082bf4ea30a543045" kindref="member">VRNA_CONSTRAINT_SOFT_PF</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000160"/>Use <ref refid="group__fold__compound_1gabfbadcddda3e74ce7f49035ef8f058f7" kindref="member">VRNA_OPTION_PF</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1a378d5bcf2bae1f3ec84c912c7d3908d2" kindref="member">vrna_exp_param_s::id</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000153"/>This attribute will be removed in version 3  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats_1ga55a9ae6dfeecc1b3f0c2acf6fa796c15" kindref="member">vrna_extract_record_rest_constraint</ref>  (char **cstruc, const char **lines, unsigned int option)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000166"/>Use <ref refid="group__file__formats_1gad37cbb63a05eed63ba25c91628409be0" kindref="member">vrna_extract_record_rest_structure()</ref> instead! </para>
</listitem>
<varlistentry><term>Global <ref refid="group__fold__compound_1abf5e82d14649b6179ae60ed7da6e4fc0" kindref="member">vrna_fc_s::pscore_pf_compat</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000080"/>This attribute will vanish in the future!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__fold__compound_1a7fe1235ce3d41287695f1ae1e283e8fc" kindref="member">vrna_fc_s::ptype_pf_compat</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000079"/>This attribute will vanish in the future! It&apos;s meant for backward compatibility only!  </para>
</listitem>
<varlistentry><term>File <ref refid="walk_8h" kindref="compound">walk.h</ref>  </term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000143"/>Use <ref refid="landscape_2walk_8h" kindref="compound">ViennaRNA/landscape/walk.h</ref> instead  </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1af2355fa8746f2f30fbe71db65dea3d51" kindref="member">warn_user</ref>  (const char message[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000186"/>Use <ref refid="group__message__utils_1ga6e07ed24add60693ba886d54d0a46635" kindref="member">vrna_message_warning()</ref> instead! (since v2.3.0)  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga8a43459be386a7489feeab68dc2c6c76" kindref="member">write_parameter_file</ref>  (const char fname[])</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000155"/>Use <ref refid="group__energy__parameters__rw_1ga0de3731b3e4017c52bd678549f6c4ae5" kindref="member">vrna_params_save()</ref> instead!  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer</ref>  (vrna_fold_compound_t *fc, char *structure)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000090"/>This function is obsolete since <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> can handle complexes multiple sequences since v2.5.0. Use <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> for connected component MFE instead and compute MFEs of unconnected states separately. </para>
</listitem>
<varlistentry><term>Global <ref refid="utils_2basic_8h_1a9037ada838835b1b9db41581a021b0c8" kindref="member">xrealloc</ref>  (void *p, unsigned size)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000189"/>Use <ref refid="group__utils_1ga27f4719a66c6f90d1cca3d1e6e696c6a" kindref="member">vrna_realloc()</ref> instead! (since v2.2.0)  </para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__zuker_1ga0d5104e3ecf119d8eabd40aa5fe47f90" kindref="member">zukersubopt</ref>  (const char *string)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000138"/>use vrna_zukersubopt() instead </para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__zuker_1gab6d0ea8cc1d02f6dd831ca81043c9eb8" kindref="member">zukersubopt_par</ref>  (const char *string, vrna_param_t *parameters)</term></varlistentry>
<listitem><para><anchor id="deprecated_1_deprecated000139"/>use vrna_zukersubopt() instead</para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="deprecated"/>
  </compounddef>
</doxygen>
