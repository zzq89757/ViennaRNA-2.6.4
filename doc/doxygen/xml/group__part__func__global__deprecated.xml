<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__part__func__global__deprecated" kind="group">
    <compoundname>part_func_global_deprecated</compoundname>
    <title>Deprecated Interface for Global Partition Function Computation</title>
    <innerfile refid="part__func__co_8h">part_func_co.h</innerfile>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__part__func__global__deprecated_1gab46954fb0ed3b6d5631e7f9b802978cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float alipf_fold_par</definition>
        <argsstring>(const char **sequences, char *structure, vrna_ep_t **pl, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained, int is_circular)</argsstring>
        <name>alipf_fold_par</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>calculate_bppm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_circular</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000018"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calculate_bppm</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_constrained</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_circular</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="171" column="8" declfile="ViennaRNA/alifold.h" declline="171" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga1a5f6cfb9d761fa862ce4edc7c369cd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float alipf_fold</definition>
        <argsstring>(const char **sequences, char *structure, vrna_ep_t **pl)</argsstring>
        <name>alipf_fold</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>The partition function version of <ref refid="group__mfe__global__deprecated_1ga4cf00f0659e5f0480335d69e797f05b1" kindref="member">alifold()</ref> works in analogy to <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>. Pair probabilities and information about sequence covariations are returned via the &apos;pi&apos; variable as a list of <ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> structs. The list is terminated by the first entry with pi.i = 0. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000019"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="190" column="8" declfile="ViennaRNA/alifold.h" declline="190" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga604a42ad64178279551ad3e4def3d603" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float alipf_circ_fold</definition>
        <argsstring>(const char **sequences, char *structure, vrna_ep_t **pl)</argsstring>
        <name>alipf_circ_fold</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000020"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="203" column="8" declfile="ViennaRNA/alifold.h" declline="203" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga11b6ab8bd9be1821fea352b190a01cab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
        <definition>FLT_OR_DBL* export_ali_bppm</definition>
        <argsstring>(void)</argsstring>
        <name>export_ali_bppm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a pointer to the base pair probability array. </para>
        </briefdescription>
        <detaileddescription>
<para>Accessing the base pair probabilities for a pair (i,j) is achieved by <verbatim>FLT_OR_DBL *pr = export_bppm(); pr_ij = pr[iindx[i]-j]; </verbatim></para>
<para><xrefsect id="deprecated_1_deprecated000021"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Usage of this function is discouraged! The new <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> allows direct access to the folding matrices, including the pair probabilities! The pair probability array returned here reflects the one of the latest call to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, or any of the old API calls for consensus structure partition function folding.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, and <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the base pair probability array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="223" column="13" declfile="ViennaRNA/alifold.h" declline="223" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga0c0498f35686e26b38ee460d3db1a661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_alipf_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_alipf_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free the memory occupied by folding matrices allocated by alipf_fold, alipf_circ_fold, etc. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000022"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Usage of this function is discouraged! This function only free&apos;s memory allocated by old API function calls. Memory allocated by any of the new API calls (starting with vrna_) will be not affected!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>, vrna_vrna_fold_compound_free() </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="236" column="8" declfile="ViennaRNA/alifold.h" declline="236" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga0df40248788f0fb17ebdc59d74116d1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* alipbacktrack</definition>
        <argsstring>(double *prob)</argsstring>
        <name>alipbacktrack</name>
        <param>
          <type>double *</type>
          <declname>prob</declname>
        </param>
        <briefdescription>
<para>Sample a consensus secondary structure from the Boltzmann ensemble according its probability. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000023"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subopt__stochbt_1ga594844ac73c4e66e00d6791b31540634" kindref="member">vrna_pbacktrack()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prob</parametername>
</parameternamelist>
<parameterdescription>
<para>to be described (berni) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sampled consensus secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="247" column="8" declfile="ViennaRNA/alifold.h" declline="247" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga5349960075b1847720a2e9df021e2675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_alipf_arrays</definition>
        <argsstring>(short ***S_p, short ***S5_p, short ***S3_p, unsigned short ***a2s_p, char ***Ss_p, FLT_OR_DBL **qb_p, FLT_OR_DBL **qm_p, FLT_OR_DBL **q1k_p, FLT_OR_DBL **qln_p, short **pscore)</argsstring>
        <name>get_alipf_arrays</name>
        <param>
          <type>short ***</type>
          <declname>S_p</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S5_p</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S3_p</declname>
        </param>
        <param>
          <type>unsigned short ***</type>
          <declname>a2s_p</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>Ss_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qb_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qm_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>q1k_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qln_p</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>pscore</declname>
        </param>
        <briefdescription>
<para>Get pointers to (almost) all relavant arrays used in alifold&apos;s partition function computation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>To obtain meaningful pointers, call alipf_fold first!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, pf_alifold(), <ref refid="group__part__func__global__deprecated_1ga604a42ad64178279551ad3e4def3d603" kindref="member">alipf_circ_fold()</ref></para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000024"><xreftitle>Deprecated</xreftitle><xrefdescription><para>It is discouraged to use this function! The new <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> allows direct access to all necessary consensus structure prediction related variables!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>S_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S&apos; array (integer representation of nucleotides) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S5_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S5&apos; array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S3_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S3&apos; array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2s_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the alignment-column to sequence position mapping array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ss_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;Ss&apos; array </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qb_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>B</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qm_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>M</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>q1k_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 5&apos; slice of the Q matrix ( <formula id="0">$q1k(k) = Q(1, k)$</formula>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qln_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 3&apos; slice of the Q matrix ( <formula id="1">$qln(l) = Q(l, n)$</formula>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pscore</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the start of a pscore list </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non Zero if everything went fine, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="282" column="6" declfile="ViennaRNA/alifold.h" declline="282" declcolumn="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_fold_par</definition>
        <argsstring>(const char *sequence, char *structure, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained, int is_circular)</argsstring>
        <name>pf_fold_par</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>calculate_bppm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_circular</declname>
        </param>
        <briefdescription>
<para>Compute the partition function <formula id="61">$Q$</formula> for a given RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>structure</emphasis> is not a NULL pointer on input, it contains on return a string consisting of the letters &quot; . , | { } ( ) &quot; denoting bases that are essentially unpaired, weakly paired, strongly paired without preference, weakly upstream (downstream) paired, or strongly up- (down-)stream paired bases, respectively. If <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref> is not 0, the <emphasis>structure</emphasis> string is interpreted on input as a list of constraints for the folding. The character &quot;x&quot; marks bases that must be unpaired, matching brackets &quot; ( ) &quot; denote base pairs, all other characters are ignored. Any pairs conflicting with the constraint will be forbidden. This is usually sufficient to ensure the constraints are honored. If the parameter calculate_bppm is set to 0 base pairing probabilities will not be computed (saving CPU time), otherwise after calculations took place <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> will contain the probability that bases <emphasis>i</emphasis> and <emphasis>j</emphasis> pair.</para>
<para><xrefsect id="deprecated_1_deprecated000099"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref></para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure()</ref>, <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>, <ref refid="group__energy__parameters_1gab1f3016f96aa96bff020cdd904605afa" kindref="member">vrna_exp_params()</ref>, <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing the precalculated Boltzmann factors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">calculate_bppm</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to Base pair probability calculations on/off (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_constrained</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to indicate that a structure contraint is passed via the structure argument (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_circular</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to (de-)activate postprocessing steps in case RNA sequence is circular (0==off) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="402" column="19" declfile="ViennaRNA/part_func.h" declline="402" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_fold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>pf_fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the partition function <formula id="61">$Q$</formula> of an RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>structure</emphasis> is not a NULL pointer on input, it contains on return a string consisting of the letters &quot; . , | { } ( ) &quot; denoting bases that are essentially unpaired, weakly paired, strongly paired without preference, weakly upstream (downstream) paired, or strongly up- (down-)stream paired bases, respectively. If <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref> is not 0, the <emphasis>structure</emphasis> string is interpreted on input as a list of constraints for the folding. The character &quot;x&quot; marks bases that must be unpaired, matching brackets &quot; ( ) &quot; denote base pairs, all other characters are ignored. Any pairs conflicting with the constraint will be forbidden. This is usually sufficient to ensure the constraints are honored. If <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> has been set to 0 base pairing probabilities will not be computed (saving CPU time), otherwise <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> will contain the probability that bases <emphasis>i</emphasis> and <emphasis>j</emphasis> pair.</para>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>.<linebreak/>
 <bold>OpenMP:</bold> This function is not entirely threadsafe. While the recursions are working on their own copies of data the model details for the recursions are determined from the global settings just before entering the recursions. Consider using <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> for a really threadsafe implementation.</para>
</simplesect>
<simplesect kind="pre"><para>This function takes its model details from the global variables provided in <emphasis>RNAlib</emphasis> </para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref>, <ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure()</ref>, <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="450" column="19" declfile="ViennaRNA/part_func.h" declline="450" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_circ_fold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>pf_circ_fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the partition function of a circular RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>.<linebreak/>
 <bold>OpenMP:</bold> This function is not entirely threadsafe. While the recursions are working on their own copies of data the model details for the recursions are determined from the global settings just before entering the recursions. Consider using <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> for a really threadsafe implementation.</para>
</simplesect>
<simplesect kind="pre"><para>This function takes its model details from the global variables provided in <emphasis>RNAlib</emphasis> </para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref></para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000100"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="486" column="19" declfile="ViennaRNA/part_func.h" declline="486" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_pf_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_pf_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free arrays for the partition function recursions. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this function if you want to free all allocated memory associated with the partition function forward recursion. <simplesect kind="note"><para>Successive calls of <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> already check if they should free any memory from a previous run.<linebreak/>
 <bold>OpenMP notice:</bold><linebreak/>
 This function should be called before leaving a thread in order to avoid leaking memory</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000102"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See vrna_fold_compound_t and its related functions for how to free memory occupied by the dynamic programming matrices</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="post"><para>All memory allocated by <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> will be free&apos;d</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="546" column="18" declfile="ViennaRNA/part_func.h" declline="546" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga384e927890f9c034ff09fa66da102d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_pf_params</definition>
        <argsstring>(int length)</argsstring>
        <name>update_pf_params</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this function to recalculate the pair matrix and energy parameters after a change in folding parameters like <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref></para>
<para><xrefsect id="deprecated_1_deprecated000103"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="560" column="18" declfile="ViennaRNA/part_func.h" declline="560" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gaafe2d1b21f5418b123b088aa395e827d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_pf_params_par</definition>
        <argsstring>(int length, vrna_exp_param_t *parameters)</argsstring>
        <name>update_pf_params_par</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000104"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="573" column="18" declfile="ViennaRNA/part_func.h" declline="573" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
        <definition>FLT_OR_DBL* export_bppm</definition>
        <argsstring>(void)</argsstring>
        <name>export_bppm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a pointer to the base pair probability array. </para>
        </briefdescription>
        <detaileddescription>
<para>Accessing the base pair probabilities for a pair (i,j) is achieved by <programlisting><codeline><highlight class="normal">FLT_OR_DBL<sp/>*pr<sp/><sp/>=<sp/>export_bppm();</highlight></codeline>
<codeline><highlight class="normal">pr_ij<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pr[iindx[i]-j];</highlight></codeline>
</programlisting></para>
<para><simplesect kind="pre"><para>Call <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> first to fill the base pair probability array</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref>, <ref refid="group__utils_1ga70b180e9ea764218a82647a1cd347445" kindref="member">vrna_idx_row_wise()</ref></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the base pair probability array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="593" column="14" declfile="ViennaRNA/part_func.h" declline="593" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga42faebdfce6f070c5f89adfc8427525c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_pf_arrays</definition>
        <argsstring>(short **S_p, short **S1_p, char **ptype_p, FLT_OR_DBL **qb_p, FLT_OR_DBL **qm_p, FLT_OR_DBL **q1k_p, FLT_OR_DBL **qln_p)</argsstring>
        <name>get_pf_arrays</name>
        <param>
          <type>short **</type>
          <declname>S_p</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>S1_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qb_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qm_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>q1k_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qln_p</declname>
        </param>
        <briefdescription>
<para>Get the pointers to (almost) all relavant computation arrays used in partition function computation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>In order to assign meaningful pointers, you have to call <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> or <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> first!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">S_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S&apos; array (integer representation of nucleotides) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">S1_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S1&apos; array (2nd integer representation of nucleotides) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptype_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pair type matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qb_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>B</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qm_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>M</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">q1k_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 5&apos; slice of the Q matrix ( <formula id="0">$q1k(k) = Q(1, k)$</formula>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qln_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 3&apos; slice of the Q matrix ( <formula id="1">$qln(l) = Q(l, n)$</formula>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non Zero if everything went fine, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="622" column="17" declfile="ViennaRNA/part_func.h" declline="622" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga189e2a1ec6cc32c53ea72f7543b0441e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_subseq_F</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_subseq_F</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the free energy of a subsequence from the q[] array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="632" column="20" declfile="ViennaRNA/part_func.h" declline="632" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mean_bp_distance</definition>
        <argsstring>(int length)</argsstring>
        <name>mean_bp_distance</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance of the last partition function computation. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000105"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref>, <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mean base pair distance in thermodynamic ensemble </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="649" column="20" declfile="ViennaRNA/part_func.h" declline="649" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gad5ba36cef8d01cf4244cc09b9bf1ce1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mean_bp_distance_pr</definition>
        <argsstring>(int length, FLT_OR_DBL *pr)</argsstring>
        <name>mean_bp_distance_pr</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance in the thermodynamic ensemble. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a threadsafe implementation of <ref refid="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" kindref="member">mean_bp_dist()</ref> !</para>
<para><formula id="63">$&lt;d&gt; = \sum_{a,b} p_a p_b d(S_a,S_b)$</formula><linebreak/>
this can be computed from the pair probs <formula id="64">$p_ij$</formula> as<linebreak/>
 <formula id="65">$&lt;d&gt; = \sum_{ij} p_{ij}(1-p_{ij})$</formula></para>
<para><xrefsect id="deprecated_1_deprecated000106"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix containing the base pair probabilities </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pair distance of the structure ensemble </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="671" column="20" declfile="ViennaRNA/part_func.h" declline="671" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga8f18624bcd0b47d1a266d9e5527e5362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
        <definition>vrna_ep_t* stackProb</definition>
        <argsstring>(double cutoff)</argsstring>
        <name>stackProb</name>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
<para>Get the probability of stacks. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000107"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gaa687ae9f56f5cedba1e863cd6d54af43" kindref="member">vrna_stack_prob()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="680" column="13" declfile="ViennaRNA/part_func.h" declline="680" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga15176e23eceeff8c7d14eabcfec8a2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_pf_fold</definition>
        <argsstring>(int length)</argsstring>
        <name>init_pf_fold</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Allocate space for <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000108"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is obsolete and will be removed soon!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="691" column="18" declfile="ViennaRNA/part_func.h" declline="691" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gae5c1e7331718669bdae7a86de2be6184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__pf__cofold_1ga444df1587c9a2ca15b8eb25188f629c3" kindref="member">vrna_dimer_pf_t</ref></type>
        <definition>vrna_dimer_pf_t co_pf_fold</definition>
        <argsstring>(char *sequence, char *structure)</argsstring>
        <name>co_pf_fold</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate partition function and base pair probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the cofold partition function folding. The second molecule starts at the <ref refid="fold__vars_8h_1ab9b2c3a37a5516614c06d0ab54b97cda" kindref="member">cut_point</ref> nucleotide.</para>
<para><simplesect kind="note"><para>OpenMP: Since this function relies on the global parameters <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref>, <ref refid="group__model__details_1ga72b511ed1201f7e23ec437e468790d74" kindref="member">dangles</ref>, <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref> and <ref refid="group__model__details_1gad3b22044065acc6dee0af68931b52cfd" kindref="member">pf_scale</ref> it is not threadsafe according to concurrent changes in these variables! Use <ref refid="group__part__func__global__deprecated_1gaabfc6cb6d02b8f08ac4c92f4f5b125d9" kindref="member">co_pf_fold_par()</ref> instead to circumvent this issue.</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000114"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{Use <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> instead!}</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Concatenated RNA sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Will hold the structure or constraints </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrna_dimer_pf_t structure containing a set of energies needed for concentration computations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="78" column="18" declfile="ViennaRNA/part_func_co.h" declline="78" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gaabfc6cb6d02b8f08ac4c92f4f5b125d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__pf__cofold_1ga444df1587c9a2ca15b8eb25188f629c3" kindref="member">vrna_dimer_pf_t</ref></type>
        <definition>vrna_dimer_pf_t co_pf_fold_par</definition>
        <argsstring>(char *sequence, char *structure, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained)</argsstring>
        <name>co_pf_fold_par</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>calculate_bppm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <briefdescription>
<para>Calculate partition function and base pair probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the cofold partition function folding. The second molecule starts at the <ref refid="fold__vars_8h_1ab9b2c3a37a5516614c06d0ab54b97cda" kindref="member">cut_point</ref> nucleotide.</para>
<para><xrefsect id="deprecated_1_deprecated000115"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__energy__parameters_1gaef2b931c7e9d4ffb0a5c33df50ec2068" kindref="member">get_boltzmann_factors()</ref>, <ref refid="group__part__func__global__deprecated_1gae5c1e7331718669bdae7a86de2be6184" kindref="member">co_pf_fold()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>Concatenated RNA sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the structure constraint </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing the precalculated Boltzmann factors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calculate_bppm</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to turn Base pair probability calculations on/off (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_constrained</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to indicate that a structure contraint is passed via the structure argument (0==off) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrna_dimer_pf_t structure containing a set of energies needed for concentration computations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="106" column="18" declfile="ViennaRNA/part_func_co.h" declline="106" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga94c19120130e66a667a10a3c8598550c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void compute_probabilities</definition>
        <argsstring>(double FAB, double FEA, double FEB, vrna_ep_t *prAB, vrna_ep_t *prA, vrna_ep_t *prB, int Alength)</argsstring>
        <name>compute_probabilities</name>
        <param>
          <type>double</type>
          <declname>FAB</declname>
        </param>
        <param>
          <type>double</type>
          <declname>FEA</declname>
        </param>
        <param>
          <type>double</type>
          <declname>FEB</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prAB</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prA</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Alength</declname>
        </param>
        <briefdescription>
<para>Compute Boltzmann probabilities of dimerization without homodimers. </para>
        </briefdescription>
        <detaileddescription>
<para>Given the pair probabilities and free energies (in the null model) for a dimer AB and the two constituent monomers A and B, compute the conditional pair probabilities given that a dimer AB actually forms. Null model pair probabilities are given as a list as produced by <ref refid="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" kindref="member">assign_plist_from_pr()</ref>, the dimer probabilities &apos;prAB&apos; are modified in place.</para>
<para><xrefsect id="deprecated_1_deprecated000117"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{ Use <ref refid="group__thermodynamics_1gaa1e39e73afb51fbaf4ae38f0c066c46b" kindref="member">vrna_pf_dimer_probs()</ref> instead!}</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of dimer AB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FEA</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of monomer A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FEB</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of monomer B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prAB</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities for dimer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prA</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities monomer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prB</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities monomer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of molecule A </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="146" column="7" declfile="ViennaRNA/part_func_co.h" declline="146" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gaa12dda9dd6179cdd22bcce87c0682c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_co_pf_fold</definition>
        <argsstring>(int length)</argsstring>
        <name>init_co_pf_fold</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>DO NOT USE THIS FUNCTION ANYMORE <xrefsect id="deprecated_1_deprecated000118"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{ This function is deprecated and will be removed soon!}</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="154" column="9" declfile="ViennaRNA/part_func_co.h" declline="154" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gad94c0133157bed6912fe7fe866e0039e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
        <definition>FLT_OR_DBL* export_co_bppm</definition>
        <argsstring>(void)</argsstring>
        <name>export_co_bppm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a pointer to the base pair probability array. </para>
        </briefdescription>
        <detaileddescription>
<para>Accessing the base pair probabilities for a pair (i,j) is achieved by <verbatim>FLT_OR_DBL *pr = export_bppm(); pr_ij = pr[iindx[i]-j]; </verbatim></para>
<para><xrefsect id="deprecated_1_deprecated000119"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and will be removed soon! The base pair probability array is available through the <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> data structure, and its associated <ref refid="group__dp__matrices_1ga68729ab3fed26bdd1806fa814f172fc1" kindref="member">vrna_mx_pf_t</ref> member.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__utils_1ga70b180e9ea764218a82647a1cd347445" kindref="member">vrna_idx_row_wise()</ref></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the base pair probability array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="173" column="13" declfile="ViennaRNA/part_func_co.h" declline="173" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gade3ce34ae8214811374b1d28a40dc247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_co_pf_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_co_pf_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free the memory occupied by <ref refid="group__part__func__global__deprecated_1gae5c1e7331718669bdae7a86de2be6184" kindref="member">co_pf_fold()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000120"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function will be removed for the new API soon! See <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, and <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> for an alternative</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="184" column="7" declfile="ViennaRNA/part_func_co.h" declline="184" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga6e0f36c1f9b7d9dd4bfbad914c1119e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_co_pf_params</definition>
        <argsstring>(int length)</argsstring>
        <name>update_co_pf_params</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function recalculates all energy parameters given the current model settings.</para>
<para><xrefsect id="deprecated_1_deprecated000121"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the current RNA sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="199" column="7" declfile="ViennaRNA/part_func_co.h" declline="199" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga75465d7e8793db68a434d83df9a2e794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_co_pf_params_par</definition>
        <argsstring>(int length, vrna_exp_param_t *parameters)</argsstring>
        <name>update_co_pf_params_par</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function recalculates all energy parameters given the current model settings. It&apos;s second argument can either be NULL or a data structure containing the precomputed Boltzmann factors. In the first scenario, the necessary data structure will be created automatically according to the current global model settings, i.e. this mode might not be threadsafe. However, if the provided data structure is not NULL, threadsafety for the model parameters <ref refid="group__model__details_1ga72b511ed1201f7e23ec437e468790d74" kindref="member">dangles</ref>, <ref refid="group__model__details_1gad3b22044065acc6dee0af68931b52cfd" kindref="member">pf_scale</ref> and <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref> is regained, since their values are taken from this data structure during subsequent calculations.</para>
<para><xrefsect id="deprecated_1_deprecated000122"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of the current RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>data structure containing the precomputed Boltzmann factors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_co.h" line="224" column="7" declfile="ViennaRNA/part_func_co.h" declline="224" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gab61df77cf7949cd516181fce0c3d7d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_plist_from_db</definition>
        <argsstring>(vrna_ep_t **pl, const char *struc, float pr)</argsstring>
        <name>assign_plist_from_db</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> from a dot-bracket string. </para>
        </briefdescription>
        <detaileddescription>
<para>The dot-bracket string is parsed and for each base pair an entry in the plist is created. The probability of each pair in the list is set by a function parameter.</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><xrefsect id="deprecated_1_deprecated000200"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability for each base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="881" column="7" declfile="ViennaRNA/utils/structures.h" declline="881" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_plist_from_pr</definition>
        <argsstring>(vrna_ep_t **pl, FLT_OR_DBL *probs, int length, double cutoff)</argsstring>
        <name>assign_plist_from_pr</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
<para>Create a vrna_ep_t from a probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The probability matrix given is parsed and all pair probabilities above the given threshold are used to create an entry in the plist</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000210"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" kindref="member">vrna_plist_from_probs()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vrna_ep_t that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability matrix used for creating the plist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>The cutoff value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1033" column="8" declfile="ViennaRNA/utils/structures.h" declline="1033" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
