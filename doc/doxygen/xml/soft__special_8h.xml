<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="soft__special_8h" kind="file" language="C++">
    <compoundname>soft_special.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" prot="public" static="no">
        <name>VRNA_SC_MOD_CHECK_FALLBACK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Check for sequence positions whether they resemble the fallback base. </para>
        </briefdescription>
        <detaileddescription>
<para>This flag can be used to enable a sanity check within the vrna_sc_mod*() functions to see whether a supposedly modified position actually resembles the fallback base as specified in the modification parameters</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="37" column="9" bodyfile="ViennaRNA/constraints/soft_special.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" prot="public" static="no">
        <name>VRNA_SC_MOD_CHECK_UNMOD</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Check for sequence positions whether they resemble the unmodified base. </para>
        </briefdescription>
        <detaileddescription>
<para>This flag can be used to enable a sanity check within the vrna_sc_mod*() functions to see whether a supposedly modified position actually resembles the unmodified base as specified in the modification parameters</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref>, <ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="52" column="9" bodyfile="ViennaRNA/constraints/soft_special.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" prot="public" static="no">
        <name>VRNA_SC_MOD_SILENT</name>
        <initializer>4</initializer>
        <briefdescription>
<para>Do not produce any warnings within the vrna_sc_mod*() functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="61" column="9" bodyfile="ViennaRNA/constraints/soft_special.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" prot="public" static="no">
        <name>VRNA_SC_MOD_DEFAULT</name>
        <initializer>(<ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref> | <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>)</initializer>
        <briefdescription>
<para>Default settings for the vrna_sc_mod*() functions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref>, <ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="72" column="9" bodyfile="ViennaRNA/constraints/soft_special.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" prot="public" static="no">
        <type>struct <ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_s</ref> *</type>
        <definition>typedef struct vrna_sc_mod_param_s* vrna_sc_mod_param_t</definition>
        <argsstring></argsstring>
        <name>vrna_sc_mod_param_t</name>
        <briefdescription>
<para>Modified base parameter data structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile()</ref>, <ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="22" column="34" bodyfile="ViennaRNA/constraints/soft_special.h" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref></type>
        <definition>vrna_sc_mod_param_t vrna_sc_mod_read_from_jsonfile</definition>
        <argsstring>(const char *filename, vrna_md_t *md)</argsstring>
        <name>vrna_sc_mod_read_from_jsonfile</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
<para>Parse and extract energy parameters for a modified base from a JSON file. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json()</ref>, <ref refid="group__modified__bases_1ga0e76e3dee44ab51c6758a5e2275f8bad" kindref="member">vrna_sc_mod_parameters_free()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, modified-bases-params</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON file containing the specifications of the modified base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>A model-details data structure (for look-up of canonical base pairs) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Parameters of the modified base</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000064"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>sc_mod_read_from_jsonfile()</computeroutput> where the <computeroutput>md</computeroutput> parameter may be omitted and defaults to <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.sc_mod_read_from_jsonfile()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="85" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="85" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga73651701673a35080ff60ee156596da1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref></type>
        <definition>vrna_sc_mod_param_t vrna_sc_mod_read_from_json</definition>
        <argsstring>(const char *json, vrna_md_t *md)</argsstring>
        <name>vrna_sc_mod_read_from_json</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type><ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
<para>Parse and extract energy parameters for a modified base from a JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile()</ref>, <ref refid="group__modified__bases_1ga0e76e3dee44ab51c6758a5e2275f8bad" kindref="member">vrna_sc_mod_parameters_free()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, modified-bases-params</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON file containing the specifications of the modified base </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>A model-details data structure (for look-up of canonical base pairs) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Parameters of the modified base</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000065"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>sc_mod_read_from_json()</computeroutput> where the <computeroutput>md</computeroutput> parameter may be omitted and defaults to <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.sc_mod_read_from_json()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="100" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="100" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga0e76e3dee44ab51c6758a5e2275f8bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_sc_mod_parameters_free</definition>
        <argsstring>(vrna_sc_mod_param_t params)</argsstring>
        <name>vrna_sc_mod_parameters_free</name>
        <param>
          <type><ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref></type>
          <declname>params</declname>
        </param>
        <briefdescription>
<para>Release memory occupied by a modified base parameter data structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Properly free a <ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref> data structure</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>The data structure to free </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="112" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="112" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_json</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *json, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_json</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Prepare soft constraint callbacks for modified base as specified in JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function prepares all requirements to acknowledge modified bases as specified in the provided <computeroutput>json</computeroutput> string. All subsequent predictions will treat each modification site special and adjust energy contributions if necessary.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref>, <ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>, modified-bases-params</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON formatted string with the modified base parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000055"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_json()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_json()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="136" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="136" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_jsonfile</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *json_file, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_jsonfile</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>json_file</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Prepare soft constraint callbacks for modified base as specified in JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, this function prepares all requirements to acknowledge modified bases as specified in the provided <computeroutput>json</computeroutput> file. All subsequent predictions will treat each modification site special and adjust energy contributions if necessary.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref>, <ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>, modified-bases-params</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON formatted string with the modified base parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000056"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_jsonfile()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_jsonfile()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="163" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod</definition>
        <argsstring>(vrna_fold_compound_t *fc, const vrna_sc_mod_param_t params, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const <ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref></type>
          <declname>params</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Prepare soft constraint callbacks for modified base as specified in JSON string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes a <ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref> data structure as obtained from <ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json()</ref> or <ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile()</ref> and prepares all requirements to acknowledge modified bases as specified in the provided <computeroutput>params</computeroutput> data structure. All subsequent predictions will treat each modification site special and adjust energy contributions if necessary.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json()</ref>, <ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile()</ref>, <ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json()</ref>, <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile()</ref>, <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A()</ref>, <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine()</ref>, <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine()</ref>, <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA()</ref>, <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine()</ref>, <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine()</ref> <ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON formatted string with the modified base parameters </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000057"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="193" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="193" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_m6A</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_m6A</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for N6-methyl-adenosine (m6A) </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for m6A using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from <verbatim>embed:rst:inline :cite:t:`kierzek:2022` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000058"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_m6A()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_m6A()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="216" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="216" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_pseudouridine</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_pseudouridine</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for Pseudouridine. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for pseudouridine using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from <verbatim>embed:rst:inline :cite:t:`hudson:2013` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000059"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_pseudouridine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_pseudouridine()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="238" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_inosine</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_inosine</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for Inosine. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for inosine using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from <verbatim>embed:rst:inline :cite:t:`wright:2007` </verbatim> and <verbatim>embed:rst:inline :cite:t:`wright:2018` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000060"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_inosine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_inosine()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="260" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="260" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_7DA</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_7DA</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for 7-deaza-adenosine (7DA) </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for 7-deaza-adenosine using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from <verbatim>embed:rst:inline :cite:t:`richardson:2016` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000061"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_7DA()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_7DA()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="282" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="282" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_purine</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_purine</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for Purine (a.k.a. nebularine) </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for Purine using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from <verbatim>embed:rst:inline :cite:t:`jolley:2017` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000062"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_purine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_purine()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="304" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="304" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_sc_mod_dihydrouridine</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</argsstring>
        <name>vrna_sc_mod_dihydrouridine</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>modification_sites</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Add soft constraint callbacks for dihydrouridine. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience wrapper to add support for dihydrouridine using the soft constraint callback mechanism. Modification sites are provided as a list of sequence positions (1-based). Energy parameter corrections are derived from Rosetta/RECESS predictions.</para>
<para><simplesect kind="see"><para><ref refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" kindref="member">VRNA_SC_MOD_CHECK_FALLBACK</ref>, <ref refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" kindref="member">VRNA_SC_MOD_CHECK_UNMOD</ref>, <ref refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" kindref="member">VRNA_SC_MOD_SILENT</ref>, <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold_compound the corrections should be bound to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modification_sites</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of modification site, i.e. positions that contain the modified base (1-based, last element in the list indicated by 0) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitvector of options how to handle the input, e.g. <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of sequence positions modified base parameters will be used for</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000063"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_dihydrouridine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_dihydrouridine()` in the :doc:`/api_python` </verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/constraints/soft_special.h" line="326" column="1" declfile="ViennaRNA/constraints/soft_special.h" declline="326" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Specialized implementations that utilize the soft constraint callback mechanism. </para>
    </briefdescription>
    <detaileddescription>
<para>, </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_CONSTRAINTS_SOFT_SPECIAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_CONSTRAINTS_SOFT_SPECIAL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="22" refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_s</ref><sp/>*<ref refid="group__modified__bases_1ga05e46c6a7c7040b2c4236b218dadb0e5" kindref="member">vrna_sc_mod_param_t</ref>;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__modified__bases_1gaf973a647d9109b874b563bbe399a662d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_SC_MOD_CHECK_FALLBACK<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__modified__bases_1gaf80006636cdabb5f6ea577479a4cc3f2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_SC_MOD_CHECK_UNMOD<sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group__modified__bases_1ga873ecdf39af24a547ad154aa39d7d0fe" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_SC_MOD_SILENT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_SC_MOD_DEFAULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(VRNA_SC_MOD_CHECK_FALLBACK<sp/>|<sp/>VRNA_SC_MOD_CHECK_UNMOD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_t</ref></highlight></codeline>
<codeline lineno="85" refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/><sp/>*md);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_t</ref></highlight></codeline>
<codeline lineno="100" refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/><sp/>*md);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="group__modified__bases_1ga0e76e3dee44ab51c6758a5e2275f8bad" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga0e76e3dee44ab51c6758a5e2275f8bad" kindref="member">vrna_sc_mod_parameters_free</ref>(<ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_t</ref><sp/>params);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*json,</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*json_file,</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/><sp/><sp/><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__sc__mod__param__s" kindref="compound">vrna_sc_mod_param_t</ref><sp/>params,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326" refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" refkind="member"><highlight class="normal"><ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*modification_sites,</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/constraints/soft_special.h"/>
  </compounddef>
</doxygen>
