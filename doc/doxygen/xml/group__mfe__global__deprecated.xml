<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__mfe__global__deprecated" kind="group">
    <compoundname>mfe_global_deprecated</compoundname>
    <title>Deprecated Interface for Global MFE Prediction</title>
    <innerfile refid="alifold_8h">alifold.h</innerfile>
    <innerfile refid="cofold_8h">cofold.h</innerfile>
    <innerfile refid="fold_8h">fold.h</innerfile>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga4cf00f0659e5f0480335d69e797f05b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float alifold</definition>
        <argsstring>(const char **strings, char *structure)</argsstring>
        <name>alifold</name>
        <param>
          <type>const char **</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute MFE and according consensus structure of an alignment of sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function predicts the consensus structure for the aligned &apos;sequences&apos; and returns the minimum free energy; the mfe structure in bracket notation is returned in &apos;structure&apos;.</para>
<para>Sufficient space must be allocated for &apos;structure&apos; before calling <ref refid="group__mfe__global__deprecated_1ga4cf00f0659e5f0480335d69e797f05b1" kindref="member">alifold()</ref>.</para>
<para><xrefsect id="deprecated_1_deprecated000012"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Usage of this function is discouraged! Use <ref refid="group__mfe__global_1ga6c9d3bef3e92c6d423ffac9f981418c1" kindref="member">vrna_alifold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global_1ga6c9d3bef3e92c6d423ffac9f981418c1" kindref="member">vrna_alifold()</ref>, <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a NULL terminated array of character arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a character array that may contain a constraining consensus structure (will be overwritten by a consensus structure that exhibits the MFE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy score in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="65" column="8" declfile="ViennaRNA/alifold.h" declline="65" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gadbd3b0b1c144cbfb4efe704b2b260f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float circalifold</definition>
        <argsstring>(const char **strings, char *structure)</argsstring>
        <name>circalifold</name>
        <param>
          <type>const char **</type>
          <declname>strings</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute MFE and according structure of an alignment of sequences assuming the sequences are circular instead of linear. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000013"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Usage of this function is discouraged! Use vrna_alicircfold(), and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para>vrna_alicircfold(), <ref refid="group__mfe__global_1ga6c9d3bef3e92c6d423ffac9f981418c1" kindref="member">vrna_alifold()</ref>, <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>strings</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a NULL terminated array of character arrays </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a character array that may contain a constraining consensus structure (will be overwritten by a consensus structure that exhibits the MFE) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The free energy score in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="80" column="8" declfile="ViennaRNA/alifold.h" declline="80" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga72095e4554b5d577250ea14c42acc49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_alifold_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_alifold_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free the memory occupied by MFE alifold functions. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000014"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Usage of this function is discouraged! It only affects memory being free&apos;d that was allocated by an old API function before. Release of memory occupied by the newly introduced <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> is handled by <ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref></para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__fold__compound_1ga576a077b418a9c3650e06f8e5d296fc2" kindref="member">vrna_fold_compound_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/alifold.h" line="94" column="7" declfile="ViennaRNA/alifold.h" declline="94" declcolumn="7"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float cofold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>cofold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the minimum free energy of two interacting RNA molecules. </para>
        </briefdescription>
        <detaileddescription>
<para>The code is analog to the <ref refid="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" kindref="member">fold()</ref> function. If <ref refid="fold__vars_8h_1ab9b2c3a37a5516614c06d0ab54b97cda" kindref="member">cut_point</ref> ==-1 results should be the same as with <ref refid="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" kindref="member">fold()</ref>.</para>
<para><xrefsect id="deprecated_1_deprecated000030"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The two sequences concatenated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Will hold the barcket dot structure of the dimer molecule </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>minimum free energy of the structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="45" column="19" declfile="ViennaRNA/cofold.h" declline="45" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float cofold_par</definition>
        <argsstring>(const char *string, char *structure, vrna_param_t *parameters, int is_constrained)</argsstring>
        <name>cofold_par</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <briefdescription>
<para>Compute the minimum free energy of two interacting RNA molecules. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000031"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="59" column="19" declfile="ViennaRNA/cofold.h" declline="59" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gaafb33d7473eb9af9d1b168ca8761c41a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_co_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_co_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free memory occupied by <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000032"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function will only free memory allocated by a prior call of <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref>. See <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> for how to use the new API</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>folding matrices now reside in the fold compound, and should be free&apos;d there</para>
</simplesect>
<simplesect kind="see"><para>vrna_fc_destroy(), <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="75" column="18" declfile="ViennaRNA/cofold.h" declline="75" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga4fcbf34e77b99bfbb2333d2ab0c41a57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_cofold_params</definition>
        <argsstring>(void)</argsstring>
        <name>update_cofold_params</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Recalculate parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000033"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> for an alternative using the new API</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="85" column="18" declfile="ViennaRNA/cofold.h" declline="85" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gaaadbd28b4e428710529ab4098fdacad3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_cofold_params_par</definition>
        <argsstring>(vrna_param_t *parameters)</argsstring>
        <name>update_cofold_params_par</name>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Recalculate parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000034"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> for an alternative using the new API</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="95" column="18" declfile="ViennaRNA/cofold.h" declline="95" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga5f5bf4df35d0554f6ace9579f8744c48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_cofold_arrays_gq</definition>
        <argsstring>(int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **fc_p, int **ggg_p, int **indx_p, char **ptype_p)</argsstring>
        <name>export_cofold_arrays_gq</name>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fc_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>ggg_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <briefdescription>
<para>Export the arrays of partition function cofold (with gquadruplex support) </para>
        </briefdescription>
        <detaileddescription>
<para>Export the cofold arrays for use e.g. in the concentration Computations or suboptimal secondary structure backtracking</para>
<para><xrefsect id="deprecated_1_deprecated000035"><xreftitle>Deprecated</xreftitle><xrefdescription><para>folding matrices now reside within the fold compound. Thus, this function will only work in conjunction with a prior call to <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref></para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> for the new API</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f5_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;f5&apos; array, i.e. array conatining best free energy in interval [1,j] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;c&apos; array, i.e. array containing best free energy in interval [i,j] given that i pairs with j </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fML_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;M&apos; array, i.e. array containing best free energy in interval [i,j] for any multiloop segment with at least one stem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fM1_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;M1&apos; array, i.e. array containing best free energy in interval [i,j] for multiloop segment with exactly one stem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fc_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;fc&apos; array, i.e. array ... </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ggg_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;ggg&apos; array, i.e. array containing best free energy of a gquadruplex delimited by [i,j] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indx_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the indexing array used for accessing the energy matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptype_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ptype array containing the base pair types for each possibility (i,j) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="128" column="18" declfile="ViennaRNA/cofold.h" declline="128" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga5cb6b59983f1f74ccc00b9b9c4e84482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_cofold_arrays</definition>
        <argsstring>(int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **fc_p, int **indx_p, char **ptype_p)</argsstring>
        <name>export_cofold_arrays</name>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fc_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <briefdescription>
<para>Export the arrays of partition function cofold. </para>
        </briefdescription>
        <detaileddescription>
<para>Export the cofold arrays for use e.g. in the concentration Computations or suboptimal secondary structure backtracking</para>
<para><xrefsect id="deprecated_1_deprecated000036"><xreftitle>Deprecated</xreftitle><xrefdescription><para>folding matrices now reside within the <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>. Thus, this function will only work in conjunction with a prior call to the deprecated functions <ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref> or <ref refid="group__mfe__global__deprecated_1ga7612cfeeb1b793f1e4179b1eb53df1f3" kindref="member">cofold_par()</ref></para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer()</ref> for the new API</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f5_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;f5&apos; array, i.e. array conatining best free energy in interval [1,j] </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;c&apos; array, i.e. array containing best free energy in interval [i,j] given that i pairs with j </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fML_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;M&apos; array, i.e. array containing best free energy in interval [i,j] for any multiloop segment with at least one stem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fM1_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;M1&apos; array, i.e. array containing best free energy in interval [i,j] for multiloop segment with exactly one stem </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fc_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;fc&apos; array, i.e. array ... </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indx_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the indexing array used for accessing the energy matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptype_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the ptype array containing the base pair types for each possibility (i,j) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="158" column="18" declfile="ViennaRNA/cofold.h" declline="158" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gafee0c32208aa2ac97338b6e3fbad7fa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize_cofold</definition>
        <argsstring>(int length)</argsstring>
        <name>initialize_cofold</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>allocate arrays for folding <xrefsect id="deprecated_1_deprecated000037"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{This function is obsolete and will be removed soon!}</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/cofold.h" line="169" column="18" declfile="ViennaRNA/cofold.h" declline="169" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float fold_par</definition>
        <argsstring>(const char *sequence, char *structure, vrna_param_t *parameters, int is_constrained, int is_circular)</argsstring>
        <name>fold_par</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_circular</declname>
        </param>
        <briefdescription>
<para>Compute minimum free energy and an appropriate secondary structure of an RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>The first parameter given, the RNA sequence, must be <emphasis>uppercase</emphasis> and should only contain an alphabet <formula id="48">$\Sigma$</formula> that is understood by the RNAlib<linebreak/>
(e.g. <formula id="49">$ \Sigma = \{A,U,C,G\} $</formula>)<linebreak/>
 The second parameter, <emphasis>structure</emphasis>, must always point to an allocated block of memory with a size of at least <formula id="50">$\mathrm{strlen}(\mathrm{sequence})+1$</formula></para>
<para>If the third parameter is NULL, global model detail settings are assumed for the folding recursions. Otherwise, the provided parameters are used.</para>
<para>The fourth parameter indicates whether a secondary structure constraint in enhanced dot-bracket notation is passed through the structure parameter or not. If so, the characters &quot; | x &lt; &gt; &quot; are recognized to mark bases that are paired, unpaired, paired upstream, or downstream, respectively. Matching brackets &quot; ( ) &quot; denote base pairs, dots &quot;.&quot; are used for unconstrained bases.</para>
<para>To indicate that the RNA sequence is circular and thus has to be post-processed, set the last parameter to non-zero</para>
<para>After a successful call of <ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par()</ref>, a backtracked secondary structure (in dot-bracket notation) that exhibits the minimum of free energy will be written to the memory <emphasis>structure</emphasis> is pointing to. The function returns the minimum of free energy for any fold of the sequence given.</para>
<para><simplesect kind="note"><para>OpenMP: Passing NULL to the &apos;parameters&apos; argument involves access to several global model detail variables and thus is not to be considered threadsafe</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000065"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref>, <ref refid="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" kindref="member">fold()</ref>, <ref refid="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" kindref="member">circfold()</ref>, <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref>, set_energy_model(), <ref refid="group__energy__parameters_1ga7fa6a000d7c16feab939f2c4ee626197" kindref="member">get_scaled_parameters()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where the secondary structure in dot-bracket notation will be written to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>A data structure containing the pre-scaled energy contributions and the model details. (NULL may be passed, see OpenMP notes above) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_constrained</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to indicate that a structure constraint is passed via the structure argument (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_circular</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to (de-)activate post-processing steps in case RNA sequence is circular (0==off)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum free energy (MFE) in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="83" column="8" declfile="ViennaRNA/fold.h" declline="83" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float fold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute minimum free energy and an appropriate secondary structure of an RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>This function essentially does the same thing as <ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par()</ref>. However, it takes its model details, i.e. <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref>, <ref refid="group__model__details_1ga72b511ed1201f7e23ec437e468790d74" kindref="member">dangles</ref>, <ref refid="group__model__details_1ga4f6265bdf0ead7ff4628a360adbfd77e" kindref="member">tetra_loop</ref>, <ref refid="group__model__details_1gabf380d09e4f1ab94fc6af57cf0ad5d32" kindref="member">noGU</ref>, <ref refid="group__model__details_1gaa8d1c7b92489179e1eafa562b7bdd259" kindref="member">no_closingGU</ref>, <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref>, <ref refid="group__model__details_1ga097eccaabd6ae8b4fef83cccff85bb5d" kindref="member">noLonelyPairs</ref> from the current global settings within the library</para>
<para><xrefsect id="deprecated_1_deprecated000066"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use <ref refid="group__mfe__global_1ga29a33b2895f4e67b0480271ff289afdc" kindref="member">vrna_fold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par()</ref>, <ref refid="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" kindref="member">circfold()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where the secondary structure in dot-bracket notation will be written to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum free energy (MFE) in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="102" column="8" declfile="ViennaRNA/fold.h" declline="102" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float circfold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>circfold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute minimum free energy and an appropriate secondary structure of a circular RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>This function essentially does the same thing as <ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par()</ref>. However, it takes its model details, i.e. <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref>, <ref refid="group__model__details_1ga72b511ed1201f7e23ec437e468790d74" kindref="member">dangles</ref>, <ref refid="group__model__details_1ga4f6265bdf0ead7ff4628a360adbfd77e" kindref="member">tetra_loop</ref>, <ref refid="group__model__details_1gabf380d09e4f1ab94fc6af57cf0ad5d32" kindref="member">noGU</ref>, <ref refid="group__model__details_1gaa8d1c7b92489179e1eafa562b7bdd259" kindref="member">no_closingGU</ref>, <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref>, <ref refid="group__model__details_1ga097eccaabd6ae8b4fef83cccff85bb5d" kindref="member">noLonelyPairs</ref> from the current global settings within the library</para>
<para><xrefsect id="deprecated_1_deprecated000067"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__mfe__global_1gaf973483d8acbc8cc9aacfc8a9b7f0074" kindref="member">vrna_circfold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__mfe__global__deprecated_1ga2bc41df5d71fee6fd8da9904ee65d8fb" kindref="member">fold_par()</ref>, <ref refid="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" kindref="member">circfold()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where the secondary structure in dot-bracket notation will be written to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the minimum free energy (MFE) in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="121" column="8" declfile="ViennaRNA/fold.h" declline="121" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga107fdfe5fd641868156bfd849f6866c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free arrays for mfe folding. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000068"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga29a33b2895f4e67b0480271ff289afdc" kindref="member">vrna_fold()</ref>, <ref refid="group__mfe__global_1gaf973483d8acbc8cc9aacfc8a9b7f0074" kindref="member">vrna_circfold()</ref>, or <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="131" column="7" declfile="ViennaRNA/fold.h" declline="131" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga41bf8f6fa15b94471f7095cad9f0ccf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_fold_params</definition>
        <argsstring>(void)</argsstring>
        <name>update_fold_params</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000069"><xreftitle>Deprecated</xreftitle><xrefdescription><para>For non-default model settings use the new API with <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="142" column="7" declfile="ViennaRNA/fold.h" declline="142" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gae66dc422efb8f5d56717d92d6002a9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_fold_params_par</definition>
        <argsstring>(vrna_param_t *parameters)</argsstring>
        <name>update_fold_params_par</name>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000070"><xreftitle>Deprecated</xreftitle><xrefdescription><para>For non-default model settings use the new API with <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref> and <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="151" column="7" declfile="ViennaRNA/fold.h" declline="151" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga99641b8dbb40891da5490d3cc271e607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_fold_arrays</definition>
        <argsstring>(int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p)</argsstring>
        <name>export_fold_arrays</name>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000071"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="165" column="7" declfile="ViennaRNA/fold.h" declline="165" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga6606ec0ec964ea506fdadb997a1a5328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_fold_arrays_par</definition>
        <argsstring>(int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p, vrna_param_t **P_p)</argsstring>
        <name>export_fold_arrays_par</name>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> **</type>
          <declname>P_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000072"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="180" column="7" declfile="ViennaRNA/fold.h" declline="180" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga04d5d639fd4473ca766436a9bae5665c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_circfold_arrays</definition>
        <argsstring>(int *Fc_p, int *FcH_p, int *FcI_p, int *FcM_p, int **fM2_p, int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p)</argsstring>
        <name>export_circfold_arrays</name>
        <param>
          <type>int *</type>
          <declname>Fc_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcH_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcI_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcM_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM2_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000073"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="199" column="7" declfile="ViennaRNA/fold.h" declline="199" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga004bb901e7fd2f8d5ae68f9530318ce1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void export_circfold_arrays_par</definition>
        <argsstring>(int *Fc_p, int *FcH_p, int *FcI_p, int *FcM_p, int **fM2_p, int **f5_p, int **c_p, int **fML_p, int **fM1_p, int **indx_p, char **ptype_p, vrna_param_t **P_p)</argsstring>
        <name>export_circfold_arrays_par</name>
        <param>
          <type>int *</type>
          <declname>Fc_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcH_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcI_p</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>FcM_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM2_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>f5_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>c_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fML_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>fM1_p</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>indx_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga8a69ca7d787e4fd6079914f5343a1f35" kindref="member">vrna_param_t</ref> **</type>
          <declname>P_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000074"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="219" column="7" declfile="ViennaRNA/fold.h" declline="219" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga2163034a25c6115d894b199e97e03f6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int LoopEnergy</definition>
        <argsstring>(int n1, int n2, int type, int type_2, int si1, int sj1, int sp1, int sq1)</argsstring>
        <name>LoopEnergy</name>
        <param>
          <type>int</type>
          <declname>n1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type_2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sj1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sp1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sq1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000075"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{This function is deprecated and will be removed soon. Use E_IntLoop() instead!} </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="241" column="6" declfile="ViennaRNA/fold.h" declline="241" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gab327ce11972f5ac069d52c8dedfdb700" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int HairpinE</definition>
        <argsstring>(int size, int type, int si1, int sj1, const char *string)</argsstring>
        <name>HairpinE</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>si1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sj1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000076"><xreftitle>Deprecated</xreftitle><xrefdescription><para>{This function is deprecated and will be removed soon. Use E_Hairpin() instead!} </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="252" column="6" declfile="ViennaRNA/fold.h" declline="252" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1gac3f0a28d9cb609d388b155445073fd20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialize_fold</definition>
        <argsstring>(int length)</argsstring>
        <name>initialize_fold</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate arrays for folding<linebreak/>
 <xrefsect id="deprecated_1_deprecated000077"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe()</ref> and <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> for the usage of the new API!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="260" column="7" declfile="ViennaRNA/fold.h" declline="260" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__mfe__global__deprecated_1ga33c35bfd60df9d7a97aec72b887e6858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* backtrack_fold_from_pair</definition>
        <argsstring>(char *sequence, int i, int j)</argsstring>
        <name>backtrack_fold_from_pair</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/fold.h" line="268" column="7" declfile="ViennaRNA/fold.h" declline="268" declcolumn="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
