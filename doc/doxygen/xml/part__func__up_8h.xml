<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="part__func__up_8h" kind="file" language="C++">
    <compoundname>part_func_up.h</compoundname>
    <includes refid="datastructures_2basic_8h" local="no">ViennaRNA/datastructures/basic.h</includes>
    <incdepgraph>
      <node id="5">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ViennaRNA/part_func_up.h</label>
        <link refid="part__func__up_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>limits.h</label>
      </node>
      <node id="8">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="15">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="10">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stdio.h</label>
      </node>
      <node id="9">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="part__func__up_8h_1a8b383725f0e93e50f7e7a99bb2b1ef95" prot="public" static="no">
        <name>RNA_UP_MODE_1</name>
        <initializer>1U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="8" column="11" bodyfile="ViennaRNA/part_func_up.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="part__func__up_8h_1a90f0bbbea731d219b38368aa5f352a21" prot="public" static="no">
        <name>RNA_UP_MODE_2</name>
        <initializer>2U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="9" column="11" bodyfile="ViennaRNA/part_func_up.h" bodystart="9" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="part__func__up_8h_1a90579142befc7aab9db8790ee6753fa9" prot="public" static="no">
        <name>RNA_UP_MODE_3</name>
        <initializer>4U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="10" column="11" bodyfile="ViennaRNA/part_func_up.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
        <definition>pu_contrib* pf_unstru</definition>
        <argsstring>(char *sequence, int max_w)</argsstring>
        <name>pf_unstru</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_w</declname>
        </param>
        <briefdescription>
<para>Calculate the partition function over all unpaired regions of a maximal length. </para>
        </briefdescription>
        <detaileddescription>
<para>You have to call function <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> providing the same sequence before calling <ref refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" kindref="member">pf_unstru()</ref>. If you want to calculate unpaired regions for a constrained structure, set variable &apos;structure&apos; in function &apos;<ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>&apos; to the constrain string. It returns a <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> struct containing four arrays of dimension [i = 1 to length(sequence)][j = 0 to u-1] containing all possible contributions to the probabilities of unpaired regions of maximum length u. Each array in <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> contains one of the contributions to the total probability of being unpaired: The probability of being unpaired within an exterior loop is in array <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref>-&gt;E, the probability of being unpaired within a hairpin loop is in array <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref>-&gt;H, the probability of being unpaired within an interior loop is in array <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref>-&gt;I and probability of being unpaired within a multi-loop is in array <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref>-&gt;M. The total probability of being unpaired is the sum of the four arrays of <ref refid="structpu__contrib" kindref="compound">pu_contrib</ref>.</para>
<para>This function frees everything allocated automatically. To free the output structure call free_pu_contrib().</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_w</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="49" column="12" declfile="ViennaRNA/part_func_up.h" declline="49" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1ga1aa0aa02bc3a724f87360c03097afd00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structinteract" kindref="compound">interact</ref> *</type>
        <definition>interact* pf_interact</definition>
        <argsstring>(const char *s1, const char *s2, pu_contrib *p_c, pu_contrib *p_c2, int max_w, char *cstruc, int incr3, int incr5)</argsstring>
        <name>pf_interact</name>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>p_c</declname>
        </param>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>p_c2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_w</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>cstruc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incr3</declname>
        </param>
        <param>
          <type>int</type>
          <declname>incr5</declname>
        </param>
        <briefdescription>
<para>Calculates the probability of a local interaction between two sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>The function considers the probability that the region of interaction is unpaired within &apos;s1&apos; and &apos;s2&apos;. The longer sequence has to be given as &apos;s1&apos;. The shorter sequence has to be given as &apos;s2&apos;. Function <ref refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" kindref="member">pf_unstru()</ref> has to be called for &apos;s1&apos; and &apos;s2&apos;, where the probabilities of being unpaired have to be given in &apos;p_c&apos; and &apos;p_c2&apos;, respectively. If you do not want to include the probabilities of being unpaired for &apos;s2&apos; set &apos;p_c2&apos; to NULL. If variable &apos;cstruc&apos; is not NULL, constrained folding is done: The available constrains for intermolecular interaction are: &apos;.&apos; (no constrain), &apos;x&apos; (the base has no intermolecular interaction) and &apos;|&apos; (the corresponding base has to be paired intermolecularily).<linebreak/>
The parameter &apos;w&apos; determines the maximal length of the interaction. The parameters &apos;incr5&apos; and &apos;incr3&apos; allows inclusion of unpaired residues left (&apos;incr5&apos;) and right (&apos;incr3&apos;) of the region of interaction in &apos;s1&apos;. If the &apos;incr&apos; options are used, function <ref refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" kindref="member">pf_unstru()</ref> has to be called with w=w+incr5+incr3 for the longer sequence &apos;s1&apos;.</para>
<para>It returns a structure of type <ref refid="structinteract" kindref="compound">interact</ref> which contains the probability of the best local interaction including residue i in Pi and the minimum free energy in Gi, where i is the position in sequence &apos;s1&apos;. The member Gikjl of structure <ref refid="structinteract" kindref="compound">interact</ref> is the best interaction between region [k,i] k&lt;i in longer sequence &apos;s1&apos; and region [j,l] j&lt;l in &apos;s2&apos;. Gikjl_wo is Gikjl without the probability of beeing unpaired.<linebreak/>
Use <ref refid="group__up__cofold_1gadde308fd5f696dc271b1532aa96fd12f" kindref="member">free_interact()</ref> to free the returned structure, all other stuff is freed inside <ref refid="group__up__cofold_1ga1aa0aa02bc3a724f87360c03097afd00" kindref="member">pf_interact()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_c</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_c2</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_w</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cstruc</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>incr3</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>incr5</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="94" column="10" declfile="ViennaRNA/part_func_up.h" declline="94" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1gadde308fd5f696dc271b1532aa96fd12f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_interact</definition>
        <argsstring>(interact *pin)</argsstring>
        <name>free_interact</name>
        <param>
          <type><ref refid="structinteract" kindref="compound">interact</ref> *</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>Frees the output of function <ref refid="group__up__cofold_1ga1aa0aa02bc3a724f87360c03097afd00" kindref="member">pf_interact()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="106" column="6" declfile="ViennaRNA/part_func_up.h" declline="106" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1ga73efd2918cbbb2cdf44422653f996852" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int Up_plot</definition>
        <argsstring>(pu_contrib *p_c, pu_contrib *p_c_sh, interact *pint, char *ofile, int **unpaired_values, char *select_contrib, char *head, unsigned int mode)</argsstring>
        <name>Up_plot</name>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>p_c</declname>
        </param>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>p_c_sh</declname>
        </param>
        <param>
          <type><ref refid="structinteract" kindref="compound">interact</ref> *</type>
          <declname>pint</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ofile</declname>
        </param>
        <param>
          <type>int **</type>
          <declname>unpaired_values</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>select_contrib</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="111" column="5" declfile="ViennaRNA/part_func_up.h" declline="111" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1gadb5cde7e5ef562664db38638171c7a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
        <definition>pu_contrib* get_pu_contrib_struct</definition>
        <argsstring>(unsigned int n, unsigned int w)</argsstring>
        <name>get_pu_contrib_struct</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="123" column="13" declfile="ViennaRNA/part_func_up.h" declline="123" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1gac20bd61824981d45ce0dc9934aa56df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_pu_contrib_struct</definition>
        <argsstring>(pu_contrib *pu)</argsstring>
        <name>free_pu_contrib_struct</name>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>pu</declname>
        </param>
        <briefdescription>
<para>Frees the output of function <ref refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" kindref="member">pf_unstru()</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="129" column="13" declfile="ViennaRNA/part_func_up.h" declline="129" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__up__cofold_1gae1b3579727cf7a27eea93594d0e6d831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_pu_contrib</definition>
        <argsstring>(pu_contrib *pu)</argsstring>
        <name>free_pu_contrib</name>
        <param>
          <type><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref> *</type>
          <declname>pu</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func_up.h" line="132" column="1" declfile="ViennaRNA/part_func_up.h" declline="132" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementations for accessibility and RNA-RNA interaction as a stepwise process. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_PART_FUNC_UP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_PART_FUNC_UP_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datastructures_2basic_8h" kindref="compound">ViennaRNA/datastructures/basic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>RNA_UP_MODE_1<sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>RNA_UP_MODE_2<sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>RNA_UP_MODE_3<sp/><sp/><sp/>4U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" refkind="member"><highlight class="normal"><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*<ref refid="group__up__cofold_1ga5b4ee40e190d2f633cd01cf0d2fe93cf" kindref="member">pf_unstru</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_w);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group__up__cofold_1ga1aa0aa02bc3a724f87360c03097afd00" refkind="member"><highlight class="normal"><ref refid="structinteract" kindref="compound">interact</ref><sp/>*<ref refid="group__up__cofold_1ga1aa0aa02bc3a724f87360c03097afd00" kindref="member">pf_interact</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s1,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*s2,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*p_c,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*p_c2,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_w,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*cstruc,</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incr3,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>incr5);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group__up__cofold_1gadde308fd5f696dc271b1532aa96fd12f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__up__cofold_1gadde308fd5f696dc271b1532aa96fd12f" kindref="member">free_interact</ref>(<ref refid="structinteract" kindref="compound">interact</ref><sp/>*pin);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Up_plot(<ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*p_c,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*p_c_sh,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structinteract" kindref="compound">interact</ref><sp/>*pint,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ofile,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>**unpaired_values,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*select_contrib,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*head,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mode);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/><sp/>*get_pu_contrib_struct(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>w);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group__up__cofold_1gac20bd61824981d45ce0dc9934aa56df8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__up__cofold_1gac20bd61824981d45ce0dc9934aa56df8" kindref="member">free_pu_contrib_struct</ref>(<ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*pu);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">free_pu_contrib(<ref refid="structpu__contrib" kindref="compound">pu_contrib</ref><sp/>*pu);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/part_func_up.h"/>
  </compounddef>
</doxygen>
