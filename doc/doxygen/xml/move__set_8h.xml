<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="move__set_8h" kind="file" language="C++">
    <compoundname>move_set.h</compoundname>
    <innerclass refid="struct__struct__en" prot="public">_struct_en</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="move__set_8h_1ae69287964278ca9a447864d392ee2892" prot="public" static="no" strong="no">
        <type></type>
        <name>MOVE_TYPE</name>
        <enumvalue id="move__set_8h_1ae69287964278ca9a447864d392ee2892af12f85c0222e6f70a307308793fe473c" prot="public">
          <name>GRADIENT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="move__set_8h_1ae69287964278ca9a447864d392ee2892a6a7856cca1833641e731676636b193f1" prot="public">
          <name>FIRST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="move__set_8h_1ae69287964278ca9a447864d392ee2892ab9a38902726719ccfb53666a37b3357e" prot="public">
          <name>ADAPTIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="22" column="1" bodyfile="ViennaRNA/move_set.h" bodystart="22" bodyend="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="move__set_8h_1ae451fd3a8fd6ab09e471e95edd116810" prot="public" static="no">
        <type>struct <ref refid="struct__struct__en" kindref="compound">_struct_en</ref></type>
        <definition>typedef struct _struct_en struct_en</definition>
        <argsstring></argsstring>
        <name>struct_en</name>
        <briefdescription>
<para>Data structure for <ref refid="group__eval__deprecated_1ga539ecaed89730f7644c202f304d7529b" kindref="member">energy_of_move()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="12" column="11"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="move__set_8h_1a3cbc2cdf1aa269793475499f2346ea87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_stren</definition>
        <argsstring>(FILE *out, struct_en *str)</argsstring>
        <name>print_stren</name>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="struct__struct__en" kindref="compound">struct_en</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="15" column="6" declfile="ViennaRNA/move_set.h" declline="15" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1a27ac38d0d57819e47a0d09f72b2bcfa5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void print_str</definition>
        <argsstring>(FILE *out, short *str)</argsstring>
        <name>print_str</name>
        <param>
          <type>FILE *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="16" column="6" declfile="ViennaRNA/move_set.h" declline="16" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1a06ff301d5d4b62ab6b6842f37e952235" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void copy_arr</definition>
        <argsstring>(short *dest, short *src)</argsstring>
        <name>copy_arr</name>
        <param>
          <type>short *</type>
          <declname>dest</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="19" column="6" declfile="ViennaRNA/move_set.h" declline="19" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1ac0f616c021976f6c8bff5dad8a7cf5d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* allocopy</definition>
        <argsstring>(short *src)</argsstring>
        <name>allocopy</name>
        <param>
          <type>short *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="20" column="7" declfile="ViennaRNA/move_set.h" declline="20" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1a6fbecd725c2d050f7ad9a9693d4bc1c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int move_gradient</definition>
        <argsstring>(char *seq, short *ptable, short *s, short *s1, int verbosity_level, int shifts, int noLP)</argsstring>
        <name>move_gradient</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shifts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noLP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="33" column="5" declfile="ViennaRNA/move_set.h" declline="33" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1abe38e8543fb1f324689598561a1f4a99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int move_first</definition>
        <argsstring>(char *seq, short *ptable, short *s, short *s1, int verbosity_level, int shifts, int noLP)</argsstring>
        <name>move_first</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shifts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noLP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="40" column="5" declfile="ViennaRNA/move_set.h" declline="40" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1aa6ad9ee21f1c236dc57fcda2c7bbb0b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int move_adaptive</definition>
        <argsstring>(char *seq, short *ptable, short *s, short *s1, int verbosity_level)</argsstring>
        <name>move_adaptive</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="47" column="5" declfile="ViennaRNA/move_set.h" declline="47" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1a56459af0f922fa9788050c7f43733d14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int move_standard</definition>
        <argsstring>(char *seq, char *struc, enum MOVE_TYPE type, int verbosity_level, int shifts, int noLP)</argsstring>
        <name>move_standard</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>struc</declname>
        </param>
        <param>
          <type>enum MOVE_TYPE</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shifts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noLP</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="60" column="5" declfile="ViennaRNA/move_set.h" declline="60" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1adc1a5de7aada212c4a53b573d83a9fef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int browse_neighs_pt</definition>
        <argsstring>(char *seq, short *ptable, short *s, short *s1, int verbosity_level, int shifts, int noLP, int(*funct)(struct_en *, struct_en *))</argsstring>
        <name>browse_neighs_pt</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shifts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noLP</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="struct__struct__en" kindref="compound">struct_en</ref> *, <ref refid="struct__struct__en" kindref="compound">struct_en</ref> *)</type>
          <declname>funct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="74" column="5" declfile="ViennaRNA/move_set.h" declline="74" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="move__set_8h_1adb5e5d038631d03e55b3d199196d90dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int browse_neighs</definition>
        <argsstring>(char *seq, char *struc, int verbosity_level, int shifts, int noLP, int(*funct)(struct_en *, struct_en *))</argsstring>
        <name>browse_neighs</name>
        <param>
          <type>char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>struc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>verbosity_level</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shifts</declname>
        </param>
        <param>
          <type>int</type>
          <declname>noLP</declname>
        </param>
        <param>
          <type>int(*)(<ref refid="struct__struct__en" kindref="compound">struct_en</ref> *, <ref refid="struct__struct__en" kindref="compound">struct_en</ref> *)</type>
          <declname>funct</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/move_set.h" line="83" column="5" declfile="ViennaRNA/move_set.h" declline="83" declcolumn="5"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__MOVE_SET_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__MOVE_SET_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="struct__struct__en" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__struct__en" kindref="compound">_struct_en</ref>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>energy;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>energy<sp/>in<sp/>10kcal/mol*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*structure;<sp/><sp/></highlight><highlight class="comment">/*<sp/>structure<sp/>in<sp/>energy_of_move<sp/>format*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">}<sp/><ref refid="struct__struct__en" kindref="compound">struct_en</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>prints<sp/>structure*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_stren(FILE<sp/>*out,<sp/><ref refid="struct__struct__en" kindref="compound">struct_en</ref><sp/>*str);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>print_str(FILE<sp/>*out,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*str);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>copying<sp/>functions*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>copy_arr(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*dest,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*src);<sp/></highlight><highlight class="comment">/*just<sp/>copy*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*allocopy(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*src);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*copy<sp/>and<sp/>make<sp/>space*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>MOVE_TYPE<sp/>{GRADIENT,<sp/>FIRST,<sp/>ADAPTIVE};</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>walking<sp/>methods<sp/>(verbose_lvl<sp/>0-2,<sp/>shifts<sp/>=<sp/>use<sp/>shift<sp/>moves?<sp/>noLP<sp/>=<sp/>no<sp/>lone<sp/>pairs?<sp/>(not<sp/>compatible<sp/>with<sp/>shifts))</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/><sp/>input:<sp/><sp/><sp/><sp/>seq<sp/>-<sp/>sequence</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptable<sp/>-<sp/>structure<sp/>encoded<sp/>with<sp/>make_pair_table()<sp/>from<sp/>pair_mat.h</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>s1<sp/>-<sp/>sequence<sp/>encoded<sp/>with<sp/>encode_sequence<sp/>from<sp/>pair_mat.h</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/><sp/>methods:<sp/><sp/>deepest<sp/>-<sp/>lowest<sp/>energy<sp/>structure<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>-<sp/>first<sp/>found<sp/>lower<sp/>energy<sp/>structure<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rand<sp/>-<sp/>random<sp/>lower<sp/>energy<sp/>structure<sp/>is<sp/>used</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/><sp/>returns<sp/>local<sp/>minima<sp/>structure<sp/>in<sp/>ptable<sp/>and<sp/>its<sp/>energy<sp/>in<sp/>10kcal/mol<sp/>as<sp/>output<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_gradient(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptable,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s1,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifts,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noLP);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_first(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptable,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s1,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifts,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noLP);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_adaptive(<sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptable,</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s1,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>standardized<sp/>method<sp/>that<sp/>encapsulates<sp/>above<sp/>&quot;_pt&quot;<sp/>methods</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>input:<sp/><sp/>seq<sp/>-<sp/>sequence</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>struc<sp/>-<sp/>structure<sp/>in<sp/>dot-bracket<sp/>notation</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type<sp/>-<sp/>type<sp/>of<sp/>move<sp/>selection<sp/>according<sp/>to<sp/>MOVE_TYPE<sp/>enum</highlight></codeline>
<codeline lineno="57"><highlight class="comment"><sp/><sp/>return:<sp/>energy<sp/>of<sp/>LM</highlight></codeline>
<codeline lineno="58"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>of<sp/>LM<sp/>in<sp/>struc<sp/>in<sp/>bracket-dot<sp/>notation</highlight></codeline>
<codeline lineno="59"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>move_standard(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*struc,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/>MOVE_TYPE<sp/>type,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifts,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noLP);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>browse_neighbours<sp/>and<sp/>perform<sp/>funct<sp/>function<sp/>on<sp/>each<sp/>of<sp/>them<sp/>(used<sp/>mainly<sp/>for<sp/>user<sp/>specified<sp/>flooding)</highlight></codeline>
<codeline lineno="69"><highlight class="comment"><sp/><sp/><sp/><sp/>input:<sp/><sp/><sp/><sp/>seq<sp/>-<sp/>sequence</highlight></codeline>
<codeline lineno="70"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ptable<sp/>-<sp/>structure<sp/>encoded<sp/>with<sp/>make_pair_table()<sp/>from<sp/>pair_mat.h</highlight></codeline>
<codeline lineno="71"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s,<sp/>s1<sp/>-<sp/>sequence<sp/>encoded<sp/>with<sp/>encode_sequence<sp/>from<sp/>pair_mat.h</highlight></codeline>
<codeline lineno="72"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>funct<sp/>-<sp/>function<sp/>(structure<sp/>from<sp/>neighbourhood,<sp/>structure<sp/>from<sp/>input)<sp/>toperform<sp/>on<sp/>every<sp/>structure<sp/>in<sp/>neigbourhood<sp/>(if<sp/>the<sp/>function<sp/>returns<sp/>non-zero,<sp/>the<sp/>iteration<sp/>through<sp/>neighbourhood<sp/>stops.)</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/><sp/><sp/><sp/>returns<sp/>energy<sp/>of<sp/>the<sp/>structure<sp/>funct<sp/>sets<sp/>as<sp/>second<sp/>argument*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>browse_neighs_pt(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*ptable,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*s1,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifts,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noLP,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*funct)<sp/>(<ref refid="struct__struct__en" kindref="compound">struct_en</ref>*,<sp/><ref refid="struct__struct__en" kindref="compound">struct_en</ref>*));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>browse_neighs(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*struc,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>verbosity_level,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>shifts,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>noLP,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(*funct)<sp/>(<ref refid="struct__struct__en" kindref="compound">struct_en</ref>*,<sp/><ref refid="struct__struct__en" kindref="compound">struct_en</ref>*));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/move_set.h"/>
  </compounddef>
</doxygen>
