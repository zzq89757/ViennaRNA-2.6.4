<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="paths_8h" kind="file" language="C++">
    <compoundname>paths.h</compoundname>
    <includes refid="fold__compound_8h" local="no">ViennaRNA/fold_compound.h</includes>
    <includes refid="move_8h" local="no">ViennaRNA/landscape/move.h</includes>
    <includedby refid="landscape_2findpath_8h" local="no">ViennaRNA/landscape/findpath.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="12">
        <label>stdlib.h</label>
      </node>
      <node id="16">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="18">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ViennaRNA/landscape/move.h</label>
        <link refid="move_8h"/>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="14">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="9">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="1">
        <label>ViennaRNA/landscape/paths.h</label>
        <link refid="paths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ViennaRNA/findpath.h</label>
        <link refid="findpath_8h"/>
      </node>
      <node id="2">
        <label>ViennaRNA/landscape/findpath.h</label>
        <link refid="landscape_2findpath_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ViennaRNA/landscape/paths.h</label>
        <link refid="paths_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structvrna__path__s" prot="public">vrna_path_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="paths_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="13" column="11" bodyfile="ViennaRNA/landscape/paths.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" prot="public" static="no">
        <name>VRNA_PATH_TYPE_DOT_BRACKET</name>
        <initializer>1U</initializer>
        <briefdescription>
<para>Flag to indicate producing a (re-)folding path as list of dot-bracket structures. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref>, <ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath()</ref>, <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="60" column="11" bodyfile="ViennaRNA/landscape/paths.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__paths_1gaa73703da105dc6c98957fb8247c93f1f" prot="public" static="no">
        <name>VRNA_PATH_TYPE_MOVES</name>
        <initializer>2U</initializer>
        <briefdescription>
<para>Flag to indicate producing a (re-)folding path as list of transition moves. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref>, <ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath()</ref>, <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="67" column="11" bodyfile="ViennaRNA/landscape/paths.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" prot="public" static="no">
        <type>struct <ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref></type>
        <definition>typedef struct vrna_path_s vrna_path_t</definition>
        <argsstring></argsstring>
        <name>vrna_path_t</name>
        <briefdescription>
<para>Typename for the refolding path data structure <ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="1" column="0" bodyfile="ViennaRNA/landscape/paths.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" prot="public" static="no">
        <type>struct vrna_path_options_s *</type>
        <definition>typedef struct vrna_path_options_s* vrna_path_options_t</definition>
        <argsstring></argsstring>
        <name>vrna_path_options_t</name>
        <briefdescription>
<para>Options data structure for (re-)folding path implementations. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="37" column="34" bodyfile="ViennaRNA/landscape/paths.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__paths__deprecated_1gab6b8737d5377e70a7815d04aae7fd884" prot="public" static="no">
        <type>struct <ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref></type>
        <definition>typedef struct vrna_path_s path_t</definition>
        <argsstring></argsstring>
        <name>path_t</name>
        <briefdescription>
<para>Old typename of <ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000172"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="37" column="34" bodyfile="ViennaRNA/landscape/paths.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_path_free</definition>
        <argsstring>(vrna_path_t *path)</argsstring>
        <name>vrna_path_free</name>
        <param>
          <type><ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Release (free) memory occupied by a (re-)folding path. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref>, <ref refid="group__paths__direct_1ga2fed8ff126f5becd82cedd81a25c9bf0" kindref="member">vrna_path_findpath()</ref>, <ref refid="group__paths__direct_1gad00765c2f269fddfa319310af22d4f67" kindref="member">vrna_path_findpath_ub()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The refolding path to be free&apos;d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="123" column="1" declfile="ViennaRNA/landscape/paths.h" declline="123" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paths_1gaa64a86b13cb165346a0d0c788781512a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_path_options_free</definition>
        <argsstring>(vrna_path_options_t options)</argsstring>
        <name>vrna_path_options_free</name>
        <param>
          <type><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Release (free) memory occupied by an options data structure for (re-)folding path implementations. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath()</ref>, <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>The options data structure to be free&apos;d </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="134" column="1" declfile="ViennaRNA/landscape/paths.h" declline="134" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref></type>
        <definition>vrna_path_options_t vrna_path_options_findpath</definition>
        <argsstring>(int width, unsigned int type)</argsstring>
        <name>vrna_path_options_findpath</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Create options data structure for findpath direct (re-)folding path heuristic. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns an options data structure that switches the <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref> and <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref> API functions to use the <emphasis>findpath</emphasis> <verbatim>embed:rst:inline :cite:p:`flamm:2001` </verbatim> heuristic. The parameter <computeroutput>width</computeroutput> specifies the width of the breadth-first search while the second parameter <computeroutput>type</computeroutput> allows one to set the type of the returned (re-)folding path.</para>
<para>Currently, the following return types are available:<itemizedlist>
<listitem><para>A list of dot-bracket structures and corresponding free energy (flag: <ref refid="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" kindref="member">VRNA_PATH_TYPE_DOT_BRACKET</ref>)</para>
</listitem><listitem><para>A list of transition moves and corresponding free energy changes (flag: <ref refid="group__paths_1gaa73703da105dc6c98957fb8247c93f1f" kindref="member">VRNA_PATH_TYPE_MOVES</ref>)</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para><ref refid="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" kindref="member">VRNA_PATH_TYPE_DOT_BRACKET</ref>, <ref refid="group__paths_1gaa73703da105dc6c98957fb8247c93f1f" kindref="member">VRNA_PATH_TYPE_MOVES</ref>, <ref refid="group__paths_1gaa64a86b13cb165346a0d0c788781512a" kindref="member">vrna_path_options_free()</ref>, <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>Width of the breath-first search strategy </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>Setting that specifies how the return (re-)folding path should be encoded </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An options data structure with settings for the findpath direct path heuristic</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000162"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>path_options_findpath()</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 10 if omitted, while the optional parameter <computeroutput>type</computeroutput> defaults to <ref refid="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" kindref="member">VRNA_PATH_TYPE_DOT_BRACKET</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.path_options_findpath()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="166" column="1" declfile="ViennaRNA/landscape/paths.h" declline="166" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref> *</type>
        <definition>vrna_path_t * vrna_path_direct</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *s1, const char *s2, vrna_path_options_t options)</argsstring>
        <name>vrna_path_direct</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Determine an optimal direct (re-)folding path between two secondary structures. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the generic wrapper function to retrieve (an optimal) (re-)folding path between two secondary structures <computeroutput>s1</computeroutput> and <computeroutput>s2</computeroutput>. The actual algorithm that is used to generate the (re-)folding path is determined by the settings specified in the <computeroutput>options</computeroutput> data structure. This data structure also determines the return type, which might be either:<itemizedlist>
<listitem><para>a list of dot-bracket structures with corresponding free energy, or</para>
</listitem><listitem><para>a list of transition moves with corresponding free energy change</para>
</listitem></itemizedlist>
</para>
<para>If the <computeroutput>options</computeroutput> parameter is passed a <emphasis>NULL</emphasis> pointer, this function defaults to the <emphasis>findpath heuristic</emphasis> <verbatim>embed:rst:inline :cite:p:`flamm:2001` </verbatim> with a breadth-first search width of <formula id="127">$ 10 $</formula>, and the returned path consists of dot-bracket structures with corresponding free energies.</para>
<para><simplesect kind="see"><para><ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref>, <ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath()</ref>, <ref refid="group__paths_1gaa64a86b13cb165346a0d0c788781512a" kindref="member">vrna_path_options_free()</ref>, <ref refid="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" kindref="member">vrna_path_free()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> with precomputed sequence encoding and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The start structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The target structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>An options data structure that specifies the path heuristic and corresponding settings (maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An optimal (re-)folding path between the two input structures</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000160"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as an overloaded method <computeroutput>path_direct()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <computeroutput>NULL</computeroutput> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_direct()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="196" column="1" declfile="ViennaRNA/landscape/paths.h" declline="196" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" kindref="member">vrna_path_t</ref> *</type>
        <definition>vrna_path_t * vrna_path_direct_ub</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *s1, const char *s2, int maxE, vrna_path_options_t options)</argsstring>
        <name>vrna_path_direct_ub</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>s2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxE</declname>
        </param>
        <param>
          <type><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Determine an optimal direct (re-)folding path between two secondary structures. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is similar to <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct()</ref>, but allows to specify an <emphasis>upper-bound</emphasis> for the saddle point energy. The underlying algorithms will stop determining an (optimal) (re-)folding path, if none can be found that has a saddle point below the specified upper-bound threshold <computeroutput>maxE</computeroutput>.</para>
<para><simplesect kind="warning"><para>The argument <computeroutput>maxE</computeroutput> enables one to specify an upper bound, or maximum free energy for the saddle point between the two input structures. If no path with <formula id="126">$E_{saddle} &lt; E_{max}$</formula> is found, the function simply returns <emphasis>NULL</emphasis> </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub()</ref>, <ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath()</ref>, <ref refid="group__paths_1gaa64a86b13cb165346a0d0c788781512a" kindref="member">vrna_path_options_free()</ref>, <ref refid="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" kindref="member">vrna_path_free()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> with precomputed sequence encoding and model details </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>The start structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>The target structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxE</parametername>
</parameternamelist>
<parameterdescription>
<para>Upper bound for the saddle point along the (re-)folding path </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>An options data structure that specifies the path heuristic and corresponding settings (maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An optimal (re-)folding path between the two input structures</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000161"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as an overloaded method <computeroutput>path_direct()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>maxE</computeroutput> defaults to #INT_MAX - 1 if it is omitted, while the optional parameter <computeroutput>options</computeroutput> defaults to <computeroutput>NULL</computeroutput>. In case the function did not find a path with <formula id="126">$E_{saddle} &lt; E_{max}$</formula> it returns an empty list. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_direct()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/landscape/paths.h" line="225" column="1" declfile="ViennaRNA/landscape/paths.h" declline="225" declcolumn="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>API for computing (optimal) (re-)folding paths between secondary structures. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="group__paths_1ga818d4f3d1cf8723d6905990b08d909fe" refkind="member"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_PATHS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_PATHS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref><sp/><ref refid="structvrna__path__s" kindref="compound">vrna_path_t</ref>;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">vrna_path_options_s<sp/>*<ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal">DEPRECATED(</highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref><sp/><ref refid="structvrna__path__s" kindref="compound">path_t</ref>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_path_t<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fold__compound_8h" kindref="compound">ViennaRNA/fold_compound.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="move_8h" kindref="compound">ViennaRNA/landscape/move.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_PATH_TYPE_DOT_BRACKET<sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group__paths_1gaa73703da105dc6c98957fb8247c93f1f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_PATH_TYPE_MOVES<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structvrna__path__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__path__s" kindref="compound">vrna_path_s</ref><sp/>{</highlight></codeline>
<codeline lineno="99" refid="structvrna__path__s_1a5fc9e0a7dc0e0f8ad67f24c18f2dc852" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structvrna__path__s_1a5fc9e0a7dc0e0f8ad67f24c18f2dc852" kindref="member">type</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="109" refid="structvrna__path__s_1ac25160bf31d28097358278f367e41227" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__path__s_1ac25160bf31d28097358278f367e41227" kindref="member">en</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110" refid="structvrna__path__s_1a141b70a59cb81d10bc65bbb7a0f6db77" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="structvrna__path__s_1a141b70a59cb81d10bc65bbb7a0f6db77" kindref="member">s</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="111" refid="structvrna__path__s_1a13da6bb5167362199947765b06a84005" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structvrna__move__s" kindref="compound">vrna_move_t</ref><sp/><ref refid="structvrna__path__s_1a13da6bb5167362199947765b06a84005" kindref="member">move</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal">};</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" refkind="member"><highlight class="normal"><ref refid="group__paths_1ga3763dc16760d09277a1b1c3f3061d0c7" kindref="member">vrna_path_free</ref>(<ref refid="structvrna__path__s" kindref="compound">vrna_path_t</ref><sp/>*path);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="group__paths_1gaa64a86b13cb165346a0d0c788781512a" refkind="member"><highlight class="normal"><ref refid="group__paths_1gaa64a86b13cb165346a0d0c788781512a" kindref="member">vrna_path_options_free</ref>(<ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref><sp/>options);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref></highlight></codeline>
<codeline lineno="166" refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" refkind="member"><highlight class="normal"><ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>width,</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="structvrna__path__s" kindref="compound">vrna_path_t</ref><sp/>*</highlight></codeline>
<codeline lineno="196" refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" refkind="member"><highlight class="normal"><ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s2,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref><sp/><sp/>options);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><ref refid="structvrna__path__s" kindref="compound">vrna_path_t</ref><sp/>*</highlight></codeline>
<codeline lineno="225" refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" refkind="member"><highlight class="normal"><ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s1,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s2,</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxE,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__paths_1gaa99d8ec48f64de53eda0d51b1ed0d3d1" kindref="member">vrna_path_options_t</ref><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/landscape/paths.h"/>
  </compounddef>
</doxygen>
