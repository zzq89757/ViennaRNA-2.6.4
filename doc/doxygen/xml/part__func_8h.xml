<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="part__func_8h" kind="file" language="C++">
    <compoundname>part_func.h</compoundname>
    <includes refid="datastructures_2basic_8h" local="no">ViennaRNA/datastructures/basic.h</includes>
    <includes refid="fold__compound_8h" local="no">ViennaRNA/fold_compound.h</includes>
    <includes refid="utils_2structures_8h" local="no">ViennaRNA/utils/structures.h</includes>
    <includes refid="params_2basic_8h" local="no">ViennaRNA/params/basic.h</includes>
    <includes refid="centroid_8h" local="no">ViennaRNA/centroid.h</includes>
    <includes refid="equilibrium__probs_8h" local="no">ViennaRNA/equilibrium_probs.h</includes>
    <includes refid="boltzmann__sampling_8h" local="no">ViennaRNA/boltzmann_sampling.h</includes>
    <includedby refid="alifold_8h" local="no">ViennaRNA/alifold.h</includedby>
    <includedby refid="part__func__co_8h" local="no">ViennaRNA/part_func_co.h</includedby>
    <incdepgraph>
      <node id="5">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ViennaRNA/equilibrium_probs.h</label>
        <link refid="equilibrium__probs_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="13">
        <label>stdlib.h</label>
      </node>
      <node id="17">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>limits.h</label>
      </node>
      <node id="8">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ViennaRNA/centroid.h</label>
        <link refid="centroid_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="1">
        <label>ViennaRNA/part_func.h</label>
        <link refid="part__func_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="10">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>stdio.h</label>
      </node>
      <node id="22">
        <label>ViennaRNA/boltzmann_sampling.h</label>
        <link refid="boltzmann__sampling_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>ViennaRNA/part_func_co.h</label>
        <link refid="part__func__co_8h"/>
      </node>
      <node id="1">
        <label>ViennaRNA/part_func.h</label>
        <link refid="part__func_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ViennaRNA/alifold.h</label>
        <link refid="alifold_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvrna__dimer__pf__s" prot="public">vrna_dimer_pf_s</innerclass>
    <innerclass refid="structvrna__multimer__pf__s" prot="public">vrna_multimer_pf_s</innerclass>
      <sectiondef kind="user-defined">
      <header>Basic global partition function interface</header>
      <memberdef kind="function" id="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></type>
        <definition>float vrna_pf</definition>
        <argsstring>(vrna_fold_compound_t *fc, char *structure)</argsstring>
        <name>vrna_pf</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the partition function <formula id="61">$Q$</formula> for a given RNA sequence, or sequence alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>structure</emphasis> is not a NULL pointer on input, it contains on return a string consisting of the letters &quot; . , | { } ( ) &quot; denoting bases that are essentially unpaired, weakly paired, strongly paired without preference, weakly upstream (downstream) paired, or strongly up- (down-)stream paired bases, respectively. If the model&apos;s compute_bpp is set to 0 base pairing probabilities will not be computed (saving CPU time), otherwise after calculations took place <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> will contain the probability that bases <emphasis>i</emphasis> and <emphasis>j</emphasis> pair.</para>
<para><simplesect kind="note"><para>This function is polymorphic. It accepts <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> of type <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447da7e264dd3cf2dc9b6448caabcb7763cd6" kindref="member">VRNA_FC_TYPE_SINGLE</ref>, and <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447dab821ce46ea3cf665be97df22a76f5023" kindref="member">VRNA_FC_TYPE_COMPARATIVE</ref>. Also, this function may return <ref refid="constants_8h_1a12c2040f25d8e3a7b9e1c2024c618cb6" kindref="member">INF</ref> / 100. in case of contradicting constraints or numerical over-/underflow. In the latter case, a corresponding warning will be issued to <computeroutput>stdout</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, <ref refid="group__part__func__global_1gac4a2a74a79e49818bc35412a2b392c7e" kindref="member">vrna_pf_fold()</ref>, <ref refid="group__part__func__global_1ga87e5a77b6e50dd54e9d032a9b92973be" kindref="member">vrna_pf_circfold()</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__part__func__global_1ga374e31a0f326b2c5da5b84e143a63f38" kindref="member">vrna_pf_alifold()</ref>, <ref refid="group__part__func__global_1gab70fe6c9a78b79cc5669881720926e1d" kindref="member">vrna_pf_circalifold()</ref>, <ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs()</ref>, <ref refid="group__energy__parameters_1gab1f3016f96aa96bff020cdd904605afa" kindref="member">vrna_exp_params()</ref>, <ref refid="group__aln__utils_1ga9545e9d5f82d141da39e3ba772516380" kindref="member">vrna_aln_pinfo()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold compound data structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000146"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>pf()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pf()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="115" column="1" declfile="ViennaRNA/part_func.h" declline="115" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__pf__cofold_1ga444df1587c9a2ca15b8eb25188f629c3" kindref="member">vrna_dimer_pf_t</ref></type>
        <definition>vrna_dimer_pf_t vrna_pf_dimer</definition>
        <argsstring>(vrna_fold_compound_t *fc, char *structure)</argsstring>
        <name>vrna_pf_dimer</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Calculate partition function and base pair probabilities of nucleic acid/nucleic acid dimers. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the cofold partition function folding.</para>
<para><simplesect kind="note"><para>This function may return <ref refid="constants_8h_1a12c2040f25d8e3a7b9e1c2024c618cb6" kindref="member">INF</ref> / 100. for the <computeroutput>FA</computeroutput>, <computeroutput>FB</computeroutput>, <computeroutput>FAB</computeroutput>, <computeroutput>F0AB</computeroutput> members of the output data structure in case of contradicting constraints or numerical over-/underflow. In the latter case, a corresponding warning will be issued to <computeroutput>stdout</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref> for how to retrieve the necessary data structure</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>the fold compound data structure </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Will hold the structure or constraints </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrna_dimer_pf_t structure containing a set of energies needed for concentration computations.</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000147"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>pf_dimer()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pf_dimer()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="138" column="1" declfile="ViennaRNA/part_func.h" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1ga28e790d1d858e34ecf6499196e8d3b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
        <definition>FLT_OR_DBL* vrna_pf_substrands</definition>
        <argsstring>(vrna_fold_compound_t *fc, size_t complex_size)</argsstring>
        <name>vrna_pf_substrands</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>complex_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="143" column="1" declfile="ViennaRNA/part_func.h" declline="143" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1ga712a2644d65adac165ccaf2a537fc541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></type>
        <definition>FLT_OR_DBL vrna_pf_add</definition>
        <argsstring>(FLT_OR_DBL dG1, FLT_OR_DBL dG2, double kT)</argsstring>
        <name>vrna_pf_add</name>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></type>
          <declname>dG1</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></type>
          <declname>dG2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>kT</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="147" column="1" declfile="ViennaRNA/part_func.h" declline="147" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified global partition function computation using sequence(s) or multiple sequence alignment(s)</header>
      <memberdef kind="function" id="group__part__func__global_1gac4a2a74a79e49818bc35412a2b392c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_pf_fold</definition>
        <argsstring>(const char *sequence, char *structure, vrna_ep_t **pl)</argsstring>
        <name>vrna_pf_fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>Compute Partition function <formula id="61">$Q$</formula> (and base pair probabilities) for an RNA sequence using a comparative method. </para>
        </briefdescription>
        <detaileddescription>
<para>This simplified interface to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> computes the partition function and, if required, base pair probabilities for an RNA sequence using default options. Memory required for dynamic programming (DP) matrices will be allocated and free&apos;d on-the-fly. Hence, after return of this function, the recursively filled matrices are not available any more for any post-processing.</para>
<para><simplesect kind="note"><para>In case you want to use the filled DP matrices for any subsequent post-processing step, or you require other conditions than specified by the default model details, use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, and the data structure <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> instead.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1ga87e5a77b6e50dd54e9d032a9b92973be" kindref="member">vrna_pf_circfold()</ref>, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a list of <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> to store pairing probabilities (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="181" column="1" declfile="ViennaRNA/part_func.h" declline="181" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1ga87e5a77b6e50dd54e9d032a9b92973be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_pf_circfold</definition>
        <argsstring>(const char *sequence, char *structure, vrna_ep_t **pl)</argsstring>
        <name>vrna_pf_circfold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>Compute Partition function <formula id="61">$Q$</formula> (and base pair probabilities) for a circular RNA sequences using a comparative method. </para>
        </briefdescription>
        <detaileddescription>
<para>This simplified interface to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> computes the partition function and, if required, base pair probabilities for a circular RNA sequence using default options. Memory required for dynamic programming (DP) matrices will be allocated and free&apos;d on-the-fly. Hence, after return of this function, the recursively filled matrices are not available any more for any post-processing.</para>
<para><simplesect kind="note"><para>In case you want to use the filled DP matrices for any subsequent post-processing step, or you require other conditions than specified by the default model details, use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, and the data structure <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> instead.</para>
</simplesect>
Folding of circular RNA sequences is handled as a post-processing step of the forward recursions. See <verbatim>embed:rst:inline :cite:t:`hofacker:2006` </verbatim> for further details.</para>
<para><simplesect kind="see"><para><ref refid="group__part__func__global_1gac4a2a74a79e49818bc35412a2b392c7e" kindref="member">vrna_pf_fold()</ref>, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>, <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>A circular RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a list of <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> to store pairing probabilities (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="211" column="1" declfile="ViennaRNA/part_func.h" declline="211" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1ga374e31a0f326b2c5da5b84e143a63f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_pf_alifold</definition>
        <argsstring>(const char **sequences, char *structure, vrna_ep_t **pl)</argsstring>
        <name>vrna_pf_alifold</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>Compute Partition function <formula id="61">$Q$</formula> (and base pair probabilities) for an RNA sequence alignment using a comparative method. </para>
        </briefdescription>
        <detaileddescription>
<para>This simplified interface to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> computes the partition function and, if required, base pair probabilities for an RNA sequence alignment using default options. Memory required for dynamic programming (DP) matrices will be allocated and free&apos;d on-the-fly. Hence, after return of this function, the recursively filled matrices are not available any more for any post-processing.</para>
<para><simplesect kind="note"><para>In case you want to use the filled DP matrices for any subsequent post-processing step, or you require other conditions than specified by the default model details, use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, and the data structure <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> instead.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gab70fe6c9a78b79cc5669881720926e1d" kindref="member">vrna_pf_circalifold()</ref>, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para>RNA sequence alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a list of <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> to store pairing probabilities (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="238" column="1" declfile="ViennaRNA/part_func.h" declline="238" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1gab70fe6c9a78b79cc5669881720926e1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float vrna_pf_circalifold</definition>
        <argsstring>(const char **sequences, char *structure, vrna_ep_t **pl)</argsstring>
        <name>vrna_pf_circalifold</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>Compute Partition function <formula id="61">$Q$</formula> (and base pair probabilities) for an alignment of circular RNA sequences using a comparative method. </para>
        </briefdescription>
        <detaileddescription>
<para>This simplified interface to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> computes the partition function and, if required, base pair probabilities for an RNA sequence alignment using default options. Memory required for dynamic programming (DP) matrices will be allocated and free&apos;d on-the-fly. Hence, after return of this function, the recursively filled matrices are not available any more for any post-processing.</para>
<para><simplesect kind="note"><para>In case you want to use the filled DP matrices for any subsequent post-processing step, or you require other conditions than specified by the default model details, use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, and the data structure <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> instead.</para>
</simplesect>
Folding of circular RNA sequences is handled as a post-processing step of the forward recursions. See <verbatim>embed:rst:inline :cite:t:`hofacker:2006` </verbatim> for further details.</para>
<para><simplesect kind="see"><para><ref refid="group__part__func__global_1ga374e31a0f326b2c5da5b84e143a63f38" kindref="member">vrna_pf_alifold()</ref>, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__fold__compound_1gad6bacc816af274922b13d947f708aa0c" kindref="member">vrna_fold_compound_comparative()</ref>, <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para>Sequence alignment of circular RNAs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a list of <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> to store pairing probabilities (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="268" column="1" declfile="ViennaRNA/part_func.h" declline="268" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1gaf2b846f7ac382686f35ff7b9202fdd5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__pf__cofold_1ga444df1587c9a2ca15b8eb25188f629c3" kindref="member">vrna_dimer_pf_t</ref></type>
        <definition>vrna_dimer_pf_t vrna_pf_co_fold</definition>
        <argsstring>(const char *seq, char *structure, vrna_ep_t **pl)</argsstring>
        <name>vrna_pf_co_fold</name>
        <param>
          <type>const char *</type>
          <declname>seq</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <briefdescription>
<para>Calculate partition function and base pair probabilities of nucleic acid/nucleic acid dimers. </para>
        </briefdescription>
        <detaileddescription>
<para>This simplified interface to <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> computes the partition function and, if required, base pair probabilities for an RNA-RNA interaction using default options. Memory required for dynamic programming (DP) matrices will be allocated and free&apos;d on-the-fly. Hence, after return of this function, the recursively filled matrices are not available any more for any post-processing.</para>
<para><simplesect kind="note"><para>In case you want to use the filled DP matrices for any subsequent post-processing step, or you require other conditions than specified by the default model details, use <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref>, and the data structure <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> instead.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seq</parametername>
</parameternamelist>
<parameterdescription>
<para>Two concatenated RNA sequences with a delimiting &apos;&amp;&apos; in between </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the character array where position-wise pairing propensity will be stored. (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a list of <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> to store pairing probabilities (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>vrna_dimer_pf_t structure containing a set of energies needed for concentration computations. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="300" column="1" declfile="ViennaRNA/part_func.h" declline="300" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="part__func_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="40" column="11" bodyfile="ViennaRNA/part_func.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__pf__cofold_1ga444df1587c9a2ca15b8eb25188f629c3" prot="public" static="no">
        <type>struct <ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref></type>
        <definition>typedef struct vrna_dimer_pf_s vrna_dimer_pf_t</definition>
        <argsstring></argsstring>
        <name>vrna_dimer_pf_t</name>
        <briefdescription>
<para>Typename for the data structure that stores the dimer partition functions, <ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref>, as returned by <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer()</ref> </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="1" column="0" bodyfile="ViennaRNA/part_func.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="part__func_8h_1af503ccda64a1f347dc8bef6624b1d94c" prot="public" static="no">
        <type>struct <ref refid="structvrna__multimer__pf__s" kindref="compound">vrna_multimer_pf_s</ref></type>
        <definition>typedef struct vrna_multimer_pf_s vrna_multimer_pf_t</definition>
        <argsstring></argsstring>
        <name>vrna_multimer_pf_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="1" column="0" bodyfile="ViennaRNA/part_func.h" bodystart="10" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__pf__cofold_1ga5445d8d96a40e9e79b1fa5a7f1a6b7ea" prot="public" static="no">
        <type>struct <ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref></type>
        <definition>typedef struct vrna_dimer_pf_s cofoldF</definition>
        <argsstring></argsstring>
        <name>cofoldF</name>
        <briefdescription>
<para>Backward compatibility typedef for <ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="1" column="0" bodyfile="ViennaRNA/part_func.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__subopt__stochbt__deprecated_1gacd79b1a570e6ad9be24cb11fe8cae30a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int st_back</definition>
        <argsstring></argsstring>
        <name>st_back</name>
        <briefdescription>
<para>Flag indicating that auxilary arrays are needed throughout the computations. This is essential for stochastic backtracking. </para>
        </briefdescription>
        <detaileddescription>
<para>Set this variable to 1 prior to a call of <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> to ensure that all matrices needed for stochastic backtracking are filled in the forward recursions</para>
<para><xrefsect id="deprecated_1_deprecated000098"><xreftitle>Deprecated</xreftitle><xrefdescription><para>set the <emphasis>uniq_ML</emphasis> flag in <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> before passing it to <ref refid="group__fold__compound_1ga283cf113a37614a75c1388c4ec6d7b2f" kindref="member">vrna_fold_compound()</ref>.</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref>, <ref refid="group__subopt__stochbt__deprecated_1ga00474051204ac9ad576b3e45174d03ff" kindref="member">pbacktrack_circ</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="350" column="12" declfile="ViennaRNA/part_func.h" declline="350" declcolumn="12"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pf__fold_1gad2b3594f0b50b68029e0f54fdce59313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_pf_float_precision</definition>
        <argsstring>(void)</argsstring>
        <name>vrna_pf_float_precision</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Find out whether partition function computations are using single precision floating points. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></para>
</simplesect>
<simplesect kind="return"><para>1 if single precision is used, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="327" column="1" declfile="ViennaRNA/part_func.h" declline="327" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_fold_par</definition>
        <argsstring>(const char *sequence, char *structure, vrna_exp_param_t *parameters, int calculate_bppm, int is_constrained, int is_circular)</argsstring>
        <name>pf_fold_par</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <param>
          <type>int</type>
          <declname>calculate_bppm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_constrained</declname>
        </param>
        <param>
          <type>int</type>
          <declname>is_circular</declname>
        </param>
        <briefdescription>
<para>Compute the partition function <formula id="61">$Q$</formula> for a given RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>structure</emphasis> is not a NULL pointer on input, it contains on return a string consisting of the letters &quot; . , | { } ( ) &quot; denoting bases that are essentially unpaired, weakly paired, strongly paired without preference, weakly upstream (downstream) paired, or strongly up- (down-)stream paired bases, respectively. If <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref> is not 0, the <emphasis>structure</emphasis> string is interpreted on input as a list of constraints for the folding. The character &quot;x&quot; marks bases that must be unpaired, matching brackets &quot; ( ) &quot; denote base pairs, all other characters are ignored. Any pairs conflicting with the constraint will be forbidden. This is usually sufficient to ensure the constraints are honored. If the parameter calculate_bppm is set to 0 base pairing probabilities will not be computed (saving CPU time), otherwise after calculations took place <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> will contain the probability that bases <emphasis>i</emphasis> and <emphasis>j</emphasis> pair.</para>
<para><xrefsect id="deprecated_1_deprecated000099"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref></para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, <ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure()</ref>, <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>, <ref refid="group__energy__parameters_1gab1f3016f96aa96bff020cdd904605afa" kindref="member">vrna_exp_params()</ref>, <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>Data structure containing the precalculated Boltzmann factors </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">calculate_bppm</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to Base pair probability calculations on/off (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_constrained</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to indicate that a structure contraint is passed via the structure argument (0==off) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_circular</parametername>
</parameternamelist>
<parameterdescription>
<para>Switch to (de-)activate postprocessing steps in case RNA sequence is circular (0==off) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="402" column="19" declfile="ViennaRNA/part_func.h" declline="402" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_fold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>pf_fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the partition function <formula id="61">$Q$</formula> of an RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para>If <emphasis>structure</emphasis> is not a NULL pointer on input, it contains on return a string consisting of the letters &quot; . , | { } ( ) &quot; denoting bases that are essentially unpaired, weakly paired, strongly paired without preference, weakly upstream (downstream) paired, or strongly up- (down-)stream paired bases, respectively. If <ref refid="fold__vars_8h_1a0afc287c2464866d94858c39175154af" kindref="member">fold_constrained</ref> is not 0, the <emphasis>structure</emphasis> string is interpreted on input as a list of constraints for the folding. The character &quot;x&quot; marks bases that must be unpaired, matching brackets &quot; ( ) &quot; denote base pairs, all other characters are ignored. Any pairs conflicting with the constraint will be forbidden. This is usually sufficient to ensure the constraints are honored. If <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> has been set to 0 base pairing probabilities will not be computed (saving CPU time), otherwise <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> will contain the probability that bases <emphasis>i</emphasis> and <emphasis>j</emphasis> pair.</para>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>.<linebreak/>
 <bold>OpenMP:</bold> This function is not entirely threadsafe. While the recursions are working on their own copies of data the model details for the recursions are determined from the global settings just before entering the recursions. Consider using <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> for a really threadsafe implementation.</para>
</simplesect>
<simplesect kind="pre"><para>This function takes its model details from the global variables provided in <emphasis>RNAlib</emphasis> </para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref>, <ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure()</ref>, <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="450" column="19" declfile="ViennaRNA/part_func.h" declline="450" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float pf_circ_fold</definition>
        <argsstring>(const char *sequence, char *structure)</argsstring>
        <name>pf_circ_fold</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the partition function of a circular RNA sequence. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The global array <ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref> is deprecated and the user who wants the calculated base pair probabilities for further computations is advised to use the function <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref>.<linebreak/>
 <bold>OpenMP:</bold> This function is not entirely threadsafe. While the recursions are working on their own copies of data the model details for the recursions are determined from the global settings just before entering the recursions. Consider using <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> for a really threadsafe implementation.</para>
</simplesect>
<simplesect kind="pre"><para>This function takes its model details from the global variables provided in <emphasis>RNAlib</emphasis> </para>
</simplesect>
<simplesect kind="post"><para>After successful run the hidden folding matrices are filled with the appropriate Boltzmann factors. Depending on whether the global variable <ref refid="group__model__details_1gad512b5dd4dbec60faccfe137bb474489" kindref="member">do_backtrack</ref> was set the base pair probabilities are already computed and may be accessed for further usage via the <ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm()</ref> function. A call of <ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays()</ref> will free all memory allocated by this function. Successive calls will first free previously allocated memory before starting the computation.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref></para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000100"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a char array where a base pair probability information can be stored in a pseudo-dot-bracket notation (may be NULL, too) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble free energy <formula id="62">$G = -RT \cdot \log(Q) $</formula> in kcal/mol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="486" column="19" declfile="ViennaRNA/part_func.h" declline="486" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pbacktrack</definition>
        <argsstring>(char *sequence)</argsstring>
        <name>pbacktrack</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <briefdescription>
<para>Sample a secondary structure from the Boltzmann ensemble according its probability. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para><ref refid="group__subopt__stochbt__deprecated_1gacd79b1a570e6ad9be24cb11fe8cae30a" kindref="member">st_back</ref> has to be set to 1 before calling <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref><linebreak/>
 <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> or <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> have to be called first to fill the partition function matrices</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sampled secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="499" column="7" declfile="ViennaRNA/part_func.h" declline="499" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pbacktrack5</definition>
        <argsstring>(char *sequence, int length)</argsstring>
        <name>pbacktrack5</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Sample a sub-structure from the Boltzmann ensemble according its probability. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="507" column="7" declfile="ViennaRNA/part_func.h" declline="507" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__subopt__stochbt__deprecated_1ga00474051204ac9ad576b3e45174d03ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pbacktrack_circ</definition>
        <argsstring>(char *sequence)</argsstring>
        <name>pbacktrack_circ</name>
        <param>
          <type>char *</type>
          <declname>sequence</declname>
        </param>
        <briefdescription>
<para>Sample a secondary structure of a circular RNA from the Boltzmann ensemble according its probability. </para>
        </briefdescription>
        <detaileddescription>
<para>This function does the same as <ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref> but assumes the RNA molecule to be circular</para>
<para><simplesect kind="pre"><para><ref refid="group__subopt__stochbt__deprecated_1gacd79b1a570e6ad9be24cb11fe8cae30a" kindref="member">st_back</ref> has to be set to 1 before calling <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref><linebreak/>
 <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> or <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> have to be called first to fill the partition function matrices</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000101"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__subopt__stochbt_1ga594844ac73c4e66e00d6791b31540634" kindref="member">vrna_pbacktrack()</ref> instead.</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A sampled secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="524" column="7" declfile="ViennaRNA/part_func.h" declline="524" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_pf_arrays</definition>
        <argsstring>(void)</argsstring>
        <name>free_pf_arrays</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Free arrays for the partition function recursions. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this function if you want to free all allocated memory associated with the partition function forward recursion. <simplesect kind="note"><para>Successive calls of <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> already check if they should free any memory from a previous run.<linebreak/>
 <bold>OpenMP notice:</bold><linebreak/>
 This function should be called before leaving a thread in order to avoid leaking memory</para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000102"><xreftitle>Deprecated</xreftitle><xrefdescription><para>See vrna_fold_compound_t and its related functions for how to free memory occupied by the dynamic programming matrices</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="post"><para>All memory allocated by <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> will be free&apos;d</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="546" column="18" declfile="ViennaRNA/part_func.h" declline="546" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga384e927890f9c034ff09fa66da102d28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_pf_params</definition>
        <argsstring>(int length)</argsstring>
        <name>update_pf_params</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para>Call this function to recalculate the pair matrix and energy parameters after a change in folding parameters like <ref refid="group__model__details_1gab4b11c8d9c758430960896bc3fe82ead" kindref="member">temperature</ref></para>
<para><xrefsect id="deprecated_1_deprecated000103"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="560" column="18" declfile="ViennaRNA/part_func.h" declline="560" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gaafe2d1b21f5418b123b088aa395e827d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void update_pf_params_par</definition>
        <argsstring>(int length, vrna_exp_param_t *parameters)</argsstring>
        <name>update_pf_params_par</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>parameters</declname>
        </param>
        <briefdescription>
<para>Recalculate energy parameters. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000104"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="573" column="18" declfile="ViennaRNA/part_func.h" declline="573" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
        <definition>FLT_OR_DBL* export_bppm</definition>
        <argsstring>(void)</argsstring>
        <name>export_bppm</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a pointer to the base pair probability array. </para>
        </briefdescription>
        <detaileddescription>
<para>Accessing the base pair probabilities for a pair (i,j) is achieved by <programlisting><codeline><highlight class="normal">FLT_OR_DBL<sp/>*pr<sp/><sp/>=<sp/>export_bppm();</highlight></codeline>
<codeline><highlight class="normal">pr_ij<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pr[iindx[i]-j];</highlight></codeline>
</programlisting></para>
<para><simplesect kind="pre"><para>Call <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> or <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref> first to fill the base pair probability array</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref>, <ref refid="group__utils_1ga70b180e9ea764218a82647a1cd347445" kindref="member">vrna_idx_row_wise()</ref></para>
</simplesect>
<simplesect kind="return"><para>A pointer to the base pair probability array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="593" column="14" declfile="ViennaRNA/part_func.h" declline="593" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga42faebdfce6f070c5f89adfc8427525c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_pf_arrays</definition>
        <argsstring>(short **S_p, short **S1_p, char **ptype_p, FLT_OR_DBL **qb_p, FLT_OR_DBL **qm_p, FLT_OR_DBL **q1k_p, FLT_OR_DBL **qln_p)</argsstring>
        <name>get_pf_arrays</name>
        <param>
          <type>short **</type>
          <declname>S_p</declname>
        </param>
        <param>
          <type>short **</type>
          <declname>S1_p</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>ptype_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qb_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qm_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>q1k_p</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> **</type>
          <declname>qln_p</declname>
        </param>
        <briefdescription>
<para>Get the pointers to (almost) all relavant computation arrays used in partition function computation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>In order to assign meaningful pointers, you have to call <ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref> or <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> first!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par()</ref>, <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref>, <ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">S_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S&apos; array (integer representation of nucleotides) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">S1_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the &apos;S1&apos; array (2nd integer representation of nucleotides) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">ptype_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the pair type matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qb_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>B</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qm_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the Q<superscript>M</superscript> matrix </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">q1k_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 5&apos; slice of the Q matrix ( <formula id="0">$q1k(k) = Q(1, k)$</formula>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">qln_p</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the 3&apos; slice of the Q matrix ( <formula id="1">$qln(l) = Q(l, n)$</formula>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Non Zero if everything went fine, 0 otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="622" column="17" declfile="ViennaRNA/part_func.h" declline="622" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga189e2a1ec6cc32c53ea72f7543b0441e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double get_subseq_F</definition>
        <argsstring>(int i, int j)</argsstring>
        <name>get_subseq_F</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Get the free energy of a subsequence from the q[] array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="632" column="20" declfile="ViennaRNA/part_func.h" declline="632" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mean_bp_distance</definition>
        <argsstring>(int length)</argsstring>
        <name>mean_bp_distance</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance of the last partition function computation. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000105"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref>, <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>mean base pair distance in thermodynamic ensemble </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="649" column="20" declfile="ViennaRNA/part_func.h" declline="649" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gad5ba36cef8d01cf4244cc09b9bf1ce1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mean_bp_distance_pr</definition>
        <argsstring>(int length, FLT_OR_DBL *pr)</argsstring>
        <name>mean_bp_distance_pr</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance in the thermodynamic ensemble. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a threadsafe implementation of <ref refid="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" kindref="member">mean_bp_dist()</ref> !</para>
<para><formula id="63">$&lt;d&gt; = \sum_{a,b} p_a p_b d(S_a,S_b)$</formula><linebreak/>
this can be computed from the pair probs <formula id="64">$p_ij$</formula> as<linebreak/>
 <formula id="65">$&lt;d&gt; = \sum_{ij} p_{ij}(1-p_{ij})$</formula></para>
<para><xrefsect id="deprecated_1_deprecated000106"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance()</ref> or <ref refid="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" kindref="member">vrna_mean_bp_distance_pr()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix containing the base pair probabilities </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pair distance of the structure ensemble </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="671" column="20" declfile="ViennaRNA/part_func.h" declline="671" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga8f18624bcd0b47d1a266d9e5527e5362" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
        <definition>vrna_ep_t* stackProb</definition>
        <argsstring>(double cutoff)</argsstring>
        <name>stackProb</name>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
<para>Get the probability of stacks. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000107"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__thermodynamics_1gaa687ae9f56f5cedba1e863cd6d54af43" kindref="member">vrna_stack_prob()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="680" column="13" declfile="ViennaRNA/part_func.h" declline="680" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga15176e23eceeff8c7d14eabcfec8a2af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_pf_fold</definition>
        <argsstring>(int length)</argsstring>
        <name>init_pf_fold</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Allocate space for <ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000108"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is obsolete and will be removed soon!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="691" column="18" declfile="ViennaRNA/part_func.h" declline="691" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1ae89a63bd83e75a80b2ba36d20b31ce81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* centroid</definition>
        <argsstring>(int length, double *dist)</argsstring>
        <name>centroid</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000109"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used anymore as it is not threadsafe!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="centroid_8h_1a7dcc64bcefcf682396dd3bbea02416fe" kindref="member">get_centroid_struct_pl()</ref>, <ref refid="centroid_8h_1ac92486ce514677256f4a832dc518759c" kindref="member">get_centroid_struct_pr()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="700" column="7" declfile="ViennaRNA/part_func.h" declline="700" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1a4e99e951dfdc006fe56c3a59374378ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_centroid_struct_gquad_pr</definition>
        <argsstring>(int length, double *dist)</argsstring>
        <name>get_centroid_struct_gquad_pr</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>dist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000110"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is deprecated and should not be used anymore as it is not threadsafe!</para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__centroid__fold_1gaa49ce4fe924f80afbcd2474bf9a86408" kindref="member">vrna_centroid()</ref>, <ref refid="group__centroid__fold_1ga98193ede06778a9ea966cc8fc43d0804" kindref="member">vrna_centroid_from_probs()</ref>, <ref refid="group__centroid__fold_1ga13881673a0b214d42a59140ef5764dbb" kindref="member">vrna_centroid_from_plist()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="709" column="7" declfile="ViennaRNA/part_func.h" declline="709" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double mean_bp_dist</definition>
        <argsstring>(int length)</argsstring>
        <name>mean_bp_dist</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get the mean pair distance of ensemble</para>
<para><xrefsect id="deprecated_1_deprecated000111"><xreftitle>Deprecated</xreftitle><xrefdescription><para>This function is not threadsafe and should not be used anymore. Use <ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance()</ref> instead! </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="718" column="20" declfile="ViennaRNA/part_func.h" declline="718" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1a68ba6f3a48e08ca131ab54621ce3a2d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double expLoopEnergy</definition>
        <argsstring>(int u1, int u2, int type, int type2, short si1, short sj1, short sp1, short sq1)</argsstring>
        <name>expLoopEnergy</name>
        <param>
          <type>int</type>
          <declname>u1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>u2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type2</declname>
        </param>
        <param>
          <type>short</type>
          <declname>si1</declname>
        </param>
        <param>
          <type>short</type>
          <declname>sj1</declname>
        </param>
        <param>
          <type>short</type>
          <declname>sp1</declname>
        </param>
        <param>
          <type>short</type>
          <declname>sq1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000112"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use exp_E_IntLoop() from <ref refid="loop__energies_8h" kindref="compound">loop_energies.h</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="732" column="20" declfile="ViennaRNA/part_func.h" declline="732" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1a7b6ab474cc80accc48010ccfcc59f96b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double expHairpinEnergy</definition>
        <argsstring>(int u, int type, short si1, short sj1, const char *string)</argsstring>
        <name>expHairpinEnergy</name>
        <param>
          <type>int</type>
          <declname>u</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <param>
          <type>short</type>
          <declname>si1</declname>
        </param>
        <param>
          <type>short</type>
          <declname>sj1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000113"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use exp_E_Hairpin() from <ref refid="loop__energies_8h" kindref="compound">loop_energies.h</ref> instead </para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="743" column="20" declfile="ViennaRNA/part_func.h" declline="743" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="part__func_8h_1adfdc1276accdffec098fb372cca28486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_plist_gquad_from_pr</definition>
        <argsstring>(vrna_ep_t **pl, int length, double cut_off)</argsstring>
        <name>assign_plist_gquad_from_pr</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cut_off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/part_func.h" line="750" column="18" declfile="ViennaRNA/part_func.h" declline="750" declcolumn="18"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Partition function implementations. </para>
    </briefdescription>
    <detaileddescription>
<para>,</para>
<para>This file includes (almost) all function declarations within the <bold>RNAlib</bold> that are related to Partion function computations </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="group__pf__cofold_1ga5445d8d96a40e9e79b1fa5a7f1a6b7ea" refkind="member"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_PART_FUNC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_PART_FUNC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref><sp/><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_t</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__multimer__pf__s" kindref="compound">vrna_multimer_pf_s</ref><sp/><ref refid="structvrna__multimer__pf__s" kindref="compound">vrna_multimer_pf_t</ref>;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref><sp/><ref refid="structvrna__dimer__pf__s" kindref="compound">cofoldF</ref>;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datastructures_2basic_8h" kindref="compound">ViennaRNA/datastructures/basic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fold__compound_8h" kindref="compound">ViennaRNA/fold_compound.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="utils_2structures_8h" kindref="compound">ViennaRNA/utils/structures.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="params_2basic_8h" kindref="compound">ViennaRNA/params/basic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="centroid_8h" kindref="compound">ViennaRNA/centroid.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="equilibrium__probs_8h" kindref="compound">ViennaRNA/equilibrium_probs.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="boltzmann__sampling_8h" kindref="compound">ViennaRNA/boltzmann_sampling.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/>#<sp/>PARTITION<sp/>FUNCTION<sp/>COMPUTATION<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structvrna__dimer__pf__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_s</ref><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>energies<sp/>for:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structvrna__dimer__pf__s_1a82e31d1fb6e95923fab6036f52c370af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__dimer__pf__s_1a82e31d1fb6e95923fab6036f52c370af" kindref="member">F0AB</ref>;<sp/></highlight></codeline>
<codeline lineno="69" refid="structvrna__dimer__pf__s_1a01a87f59db2b7fbf883b056e6f6c673a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__dimer__pf__s_1a01a87f59db2b7fbf883b056e6f6c673a" kindref="member">FAB</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="structvrna__dimer__pf__s_1a7b01cea5721f61badebc29cf0a9c4266" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__dimer__pf__s_1a7b01cea5721f61badebc29cf0a9c4266" kindref="member">FcAB</ref>;<sp/></highlight></codeline>
<codeline lineno="71" refid="structvrna__dimer__pf__s_1a1aca57247f2c023d08028b1919005b0a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__dimer__pf__s_1a1aca57247f2c023d08028b1919005b0a" kindref="member">FA</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="structvrna__dimer__pf__s_1ab4d307be5400604d3c1d84d58a9981df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__dimer__pf__s_1ab4d307be5400604d3c1d84d58a9981df" kindref="member">FB</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structvrna__multimer__pf__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__multimer__pf__s" kindref="compound">vrna_multimer_pf_s</ref><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>free<sp/>energies<sp/>for:<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structvrna__multimer__pf__s_1ac9c2a58bc07ae9c0e97d0bfb4b973db3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__multimer__pf__s_1ac9c2a58bc07ae9c0e97d0bfb4b973db3" kindref="member">F_connected</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="structvrna__multimer__pf__s_1a33856f7edf687ad26bafd0c62536c2bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>*<ref refid="structvrna__multimer__pf__s_1a33856f7edf687ad26bafd0c62536c2bc" kindref="member">F_monomers</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="structvrna__multimer__pf__s_1a1ccd8466abb58ff6cecdc1a1deda0d36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__multimer__pf__s_1a1ccd8466abb58ff6cecdc1a1deda0d36" kindref="member">num_monomers</ref>;<sp/></highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></highlight></codeline>
<codeline lineno="115" refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_t</ref></highlight></codeline>
<codeline lineno="138" refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>*</highlight></codeline>
<codeline lineno="143"><highlight class="normal">vrna_pf_substrands(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>complex_size);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref></highlight></codeline>
<codeline lineno="147"><highlight class="normal">vrna_pf_add(<ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/><sp/>dG1,</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/><sp/>dG2,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>kT);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>basic<sp/>global<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group__part__func__global_1gac4a2a74a79e49818bc35412a2b392c7e" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1gac4a2a74a79e49818bc35412a2b392c7e" kindref="member">vrna_pf_fold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence,</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/>**pl);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="group__part__func__global_1ga87e5a77b6e50dd54e9d032a9b92973be" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1ga87e5a77b6e50dd54e9d032a9b92973be" kindref="member">vrna_pf_circfold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/>**pl);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group__part__func__global_1ga374e31a0f326b2c5da5b84e143a63f38" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1ga374e31a0f326b2c5da5b84e143a63f38" kindref="member">vrna_pf_alifold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**sequences,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/><sp/>**pl);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="group__part__func__global_1gab70fe6c9a78b79cc5669881720926e1d" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1gab70fe6c9a78b79cc5669881720926e1d" kindref="member">vrna_pf_circalifold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**sequences,</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/><sp/>**pl);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="structvrna__dimer__pf__s" kindref="compound">vrna_dimer_pf_t</ref></highlight></codeline>
<codeline lineno="300" refid="group__part__func__global_1gaf2b846f7ac382686f35ff7b9202fdd5c" refkind="member"><highlight class="normal"><ref refid="group__part__func__global_1gaf2b846f7ac382686f35ff7b9202fdd5c" kindref="member">vrna_pf_co_fold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*seq,</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/><sp/>**pl);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>simplified<sp/>global<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="311"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="312"><highlight class="comment"><sp/>#<sp/>OTHER<sp/>PARTITION<sp/>FUNCTION<sp/>RELATED<sp/>DECLARATIONS<sp/>#</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="group__pf__fold_1gad2b3594f0b50b68029e0f54fdce59313" refkind="member"><highlight class="normal"><ref refid="group__pf__fold_1gad2b3594f0b50b68029e0f54fdce59313" kindref="member">vrna_pf_float_precision</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>#<sp/>DEPRECATED<sp/>FUNCTIONS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>#################################################</highlight></codeline>
<codeline lineno="336"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__subopt__stochbt__deprecated_1gacd79b1a570e6ad9be24cb11fe8cae30a" kindref="member">st_back</ref>;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" kindref="member">pf_fold_par</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*sequence,</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__exp__param__s" kindref="compound">vrna_exp_param_t</ref><sp/>*parameters,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calculate_bppm,</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_constrained,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is_circular),</highlight></codeline>
<codeline lineno="402" refid="group__part__func__global__deprecated_1gac4f95bee734b2563a3d6e9932117ebdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>new<sp/>API<sp/>and<sp/>vrna_pf()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" kindref="member">pf_fold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence,</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure),</highlight></codeline>
<codeline lineno="450" refid="group__part__func__global__deprecated_1gadc3db3d98742427e7001a7fd36ef28c2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pf_fold()<sp/>or<sp/>vrna_pf()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" kindref="member">pf_circ_fold</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*sequence,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure),</highlight></codeline>
<codeline lineno="486" refid="group__part__func__global__deprecated_1ga819ce5fca8984004ac81c4a3b04cb735" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pf_circfold()<sp/>or<sp/>vrna_pf()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" refkind="member"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence),<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pbacktrack()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence,</highlight></codeline>
<codeline lineno="507" refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pbacktrack5()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="524" refid="group__subopt__stochbt__deprecated_1ga00474051204ac9ad576b3e45174d03ff" refkind="member"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__subopt__stochbt__deprecated_1ga00474051204ac9ad576b3e45174d03ff" kindref="member">pbacktrack_circ</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*sequence),<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pbacktrack()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1gae73db3f49a94f0f72e067ecd12681dbd" kindref="member">free_pf_arrays</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560" refid="group__part__func__global__deprecated_1ga384e927890f9c034ff09fa66da102d28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga384e927890f9c034ff09fa66da102d28" kindref="member">update_pf_params</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1gaafe2d1b21f5418b123b088aa395e827d" kindref="member">update_pf_params_par</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__exp__param__s" kindref="compound">vrna_exp_param_t</ref><sp/><sp/>*parameters),</highlight></codeline>
<codeline lineno="573" refid="group__part__func__global__deprecated_1gaafe2d1b21f5418b123b088aa395e827d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>new<sp/>API<sp/>with<sp/>vrna_fold_compound_t<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">DEPRECATED(<ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>*<sp/><ref refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" kindref="member">export_bppm</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="593" refid="group__part__func__global__deprecated_1gac5ac7ee281aae1c5cc5898a841178073" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>new<sp/>API<sp/>with<sp/>vrna_fold_compound_t<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga42faebdfce6f070c5f89adfc8427525c" kindref="member">get_pf_arrays</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>**S_p,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>**S1_p,</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**ptype_p,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>**qb_p,</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>**qm_p,</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>**q1k_p,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>**qln_p),</highlight></codeline>
<codeline lineno="622" refid="group__part__func__global__deprecated_1ga42faebdfce6f070c5f89adfc8427525c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>new<sp/>API<sp/>with<sp/>vrna_fold_compound_t<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga189e2a1ec6cc32c53ea72f7543b0441e" kindref="member">get_subseq_F</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j),</highlight></codeline>
<codeline lineno="632" refid="group__part__func__global__deprecated_1ga189e2a1ec6cc32c53ea72f7543b0441e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>the<sp/>new<sp/>API<sp/>with<sp/>vrna_fold_compound_t<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),</highlight></codeline>
<codeline lineno="649" refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_mean_bp_distance()<sp/>or<sp/>vrna_mean_bp_distance_pr()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1gad5ba36cef8d01cf4244cc09b9bf1ce1d" kindref="member">mean_bp_distance_pr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>*<ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>),</highlight></codeline>
<codeline lineno="671" refid="group__part__func__global__deprecated_1gad5ba36cef8d01cf4244cc09b9bf1ce1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_mean_bp_distance()<sp/>or<sp/>vrna_mean_bp_distance_pr()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="680" refid="group__part__func__global__deprecated_1ga8f18624bcd0b47d1a266d9e5527e5362" refkind="member"><highlight class="normal">DEPRECATED(<ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/>*<sp/><ref refid="group__part__func__global__deprecated_1ga8f18624bcd0b47d1a266d9e5527e5362" kindref="member">stackProb</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cutoff),<sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_stack_prob()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691" refid="group__part__func__global__deprecated_1ga15176e23eceeff8c7d14eabcfec8a2af" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga15176e23eceeff8c7d14eabcfec8a2af" kindref="member">init_pf_fold</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="part__func_8h_1ae89a63bd83e75a80b2ba36d20b31ce81" kindref="member">centroid</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dist),</highlight></codeline>
<codeline lineno="700" refid="part__func_8h_1ae89a63bd83e75a80b2ba36d20b31ce81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_centroid()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="part__func_8h_1a4e99e951dfdc006fe56c3a59374378ed" kindref="member">get_centroid_struct_gquad_pr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*dist),</highlight></codeline>
<codeline lineno="709" refid="part__func_8h_1a4e99e951dfdc006fe56c3a59374378ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_centroid()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" kindref="member">mean_bp_dist</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),</highlight></codeline>
<codeline lineno="718" refid="part__func_8h_1ae9556ba7ded44fe2321b6f67c3fc02a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_mean_bp_distance()<sp/>or<sp/>vrna_mean_bp_distance_pr()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="part__func_8h_1a68ba6f3a48e08ca131ab54621ce3a2d7" kindref="member">expLoopEnergy</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>u1,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>u2,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>type,</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>type2,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>si1,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>sj1,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>sp1,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>sq1),</highlight></codeline>
<codeline lineno="732" refid="part__func_8h_1a68ba6f3a48e08ca131ab54621ce3a2d7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="part__func_8h_1a7b6ab474cc80accc48010ccfcc59f96b" kindref="member">expHairpinEnergy</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u,</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type,</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>si1,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sj1,</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="743" refid="part__func_8h_1a7b6ab474cc80accc48010ccfcc59f96b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>this<sp/>doesn&apos;t<sp/>work<sp/>if<sp/>free_pf_arrays()<sp/>is<sp/>called<sp/>before<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assign_plist_gquad_from_pr(<ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/>**pl,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>cut_off),</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_plist_from_probs()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/part_func.h"/>
  </compounddef>
</doxygen>
