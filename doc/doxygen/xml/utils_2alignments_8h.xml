<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="utils_2alignments_8h" kind="file" language="C++">
    <compoundname>alignments.h</compoundname>
    <includes refid="fold__compound_8h" local="no">ViennaRNA/fold_compound.h</includes>
    <includes refid="model_8h" local="no">ViennaRNA/model.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="alifold_8h" local="no">ViennaRNA/alifold.h</includedby>
    <includedby refid="aln__util_8h" local="no">ViennaRNA/aln_util.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="12">
        <label>stdlib.h</label>
      </node>
      <node id="16">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>limits.h</label>
      </node>
      <node id="18">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ViennaRNA/utils/alignments.h</label>
        <link refid="utils_2alignments_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="14">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="9">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>stdio.h</label>
      </node>
      <node id="8">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>ViennaRNA/utils/alignments.h</label>
        <link refid="utils_2alignments_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/aln_util.h</label>
        <link refid="aln__util_8h"/>
      </node>
      <node id="2">
        <label>ViennaRNA/alifold.h</label>
        <link refid="alifold_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvrna__pinfo__s" prot="public">vrna_pinfo_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="utils_2alignments_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="13" column="11" bodyfile="ViennaRNA/utils/alignments.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga7437bcbc3142b266f1f3b086eb669092" prot="public" static="no">
        <name>VRNA_ALN_DEFAULT</name>
        <initializer>0U</initializer>
        <briefdescription>
<para>Use default alignment settings. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="34" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga1a2aa60bcc51dc8e48c07bf146bd28c1" prot="public" static="no">
        <name>VRNA_ALN_RNA</name>
        <initializer>1U</initializer>
        <briefdescription>
<para>Convert to RNA alphabet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="40" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga36affc310a5adedf1bdbf9669dd4bf85" prot="public" static="no">
        <name>VRNA_ALN_DNA</name>
        <initializer>2U</initializer>
        <briefdescription>
<para>Convert to DNA alphabet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="46" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga0de72fc917d72acafe862750a3a5e0bc" prot="public" static="no">
        <name>VRNA_ALN_UPPERCASE</name>
        <initializer>4U</initializer>
        <briefdescription>
<para>Convert to uppercase nucleotide letters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="52" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga27eb303be3c8368c9e8be76a4d6ca35e" prot="public" static="no">
        <name>VRNA_ALN_LOWERCASE</name>
        <initializer>8U</initializer>
        <briefdescription>
<para>Convert to lowercase nucleotide letters. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="58" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" prot="public" static="no">
        <name>VRNA_MEASURE_SHANNON_ENTROPY</name>
        <initializer>1U</initializer>
        <briefdescription>
<para>Flag indicating Shannon Entropy measure. </para>
        </briefdescription>
        <detaileddescription>
<para>Shannon Entropy is defined as <formula id="135">$ H = - \sum_c p_c \cdot \log_2 p_c $</formula> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="65" column="9" bodyfile="ViennaRNA/utils/alignments.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" prot="public" static="no">
        <type>struct <ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref></type>
        <definition>typedef struct vrna_pinfo_s vrna_pinfo_t</definition>
        <argsstring></argsstring>
        <name>vrna_pinfo_t</name>
        <briefdescription>
<para>Typename for the base pair info repesenting data structure <ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="1" column="0" bodyfile="ViennaRNA/utils/alignments.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__aln__utils__deprecated_1ga7b61662a793ad0aa1ea38efc3a5baacc" prot="public" static="no">
        <type>struct <ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref></type>
        <definition>typedef struct vrna_pinfo_s pair_info</definition>
        <argsstring></argsstring>
        <name>pair_info</name>
        <briefdescription>
<para>Old typename of <ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000181"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="1" column="0" bodyfile="ViennaRNA/utils/alignments.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_aln_mpi</definition>
        <argsstring>(const char **alignment)</argsstring>
        <name>vrna_aln_mpi</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Get the mean pairwise identity in steps from ?to?(ident) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Aligned sequences </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pairwise identity</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000005"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as function <computeroutput>aln_mpi()</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_mpi()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="110" column="1" declfile="ViennaRNA/utils/alignments.h" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga9545e9d5f82d141da39e3ba772516380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> *</type>
        <definition>vrna_pinfo_t* vrna_aln_pinfo</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure, double threshold)</argsstring>
        <name>vrna_aln_pinfo</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Retrieve an array of <ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> structures from precomputed pair probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>This array of structures contains information about positionwise pair probabilies, base pair entropy and more</para>
<para><simplesect kind="see"><para><ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref>, and <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> of type <ref refid="group__fold__compound_1gga01a4ff86fa71deaaa5d1abbd95a1447dab821ce46ea3cf665be97df22a76f5023" kindref="member">VRNA_FC_TYPE_COMPARATIVE</ref> with precomputed partition function matrices </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>An optional structure in dot-bracket notation (Maybe NULL) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>Do not include results with pair probabilities below threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="group__aln__utils_1ga6660dfca23debee7306e0cd53341263f" kindref="member">vrna_pinfo_t</ref> array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="127" column="1" declfile="ViennaRNA/utils/alignments.h" declline="127" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga697bf6f44356918cceeff4ed8ee885e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int * vrna_aln_pscore</definition>
        <argsstring>(const char **alignment, vrna_md_t *md)</argsstring>
        <name>vrna_aln_pscore</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type><ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="wrappers_1_wrappers000006"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>aln_pscore()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_pscore()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="133" column="1" declfile="ViennaRNA/utils/alignments.h" declline="133" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gadd5e56bd49b93fa7859a9f802a11540f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_pscore</definition>
        <argsstring>(vrna_fold_compound_t *fc, unsigned int i, unsigned int j)</argsstring>
        <name>vrna_pscore</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="138" column="1" declfile="ViennaRNA/utils/alignments.h" declline="138" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga9071db7f59818374bc097b6be5fd3376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_pscore_freq</definition>
        <argsstring>(vrna_fold_compound_t *fc, const unsigned int *frequencies, unsigned int pairs)</argsstring>
        <name>vrna_pscore_freq</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const unsigned int *</type>
          <declname>frequencies</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>pairs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="144" column="1" declfile="ViennaRNA/utils/alignments.h" declline="144" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gac801b0a72eac4ab9d5b2ef7533db9193" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** vrna_aln_slice</definition>
        <argsstring>(const char **alignment, unsigned int i, unsigned int j)</argsstring>
        <name>vrna_aln_slice</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Slice out a subalignment from a larger alignment. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The user is responsible to free the memory occupied by the returned subalignment</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__aln__utils_1gac00dc80b8a324f151f92f11ab6850ecf" kindref="member">vrna_aln_free()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>The first column of the subalignment (1-based) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>The last column of the subalignment (1-based) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The subalignment between column <formula id="30">$i$</formula> and <formula id="77">$j$</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="162" column="1" declfile="ViennaRNA/utils/alignments.h" declline="162" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gac00dc80b8a324f151f92f11ab6850ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_aln_free</definition>
        <argsstring>(char **alignment)</argsstring>
        <name>vrna_aln_free</name>
        <param>
          <type>char **</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Free memory occupied by a set of aligned sequences. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input alignment </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="173" column="1" declfile="ViennaRNA/utils/alignments.h" declline="173" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga3a0476a71c4bae3d302790de58055704" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** vrna_aln_uppercase</definition>
        <argsstring>(const char **alignment)</argsstring>
        <name>vrna_aln_uppercase</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Create a copy of an alignment with only uppercase letters in the sequences. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__aln__utils_1ga08cdca592461436860daf9738279ce17" kindref="member">vrna_aln_copy</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the input alignment where lowercase sequence letters are replaced by uppercase letters </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="185" column="1" declfile="ViennaRNA/utils/alignments.h" declline="185" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga7886fc678553c06472a712a335cde9cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** vrna_aln_toRNA</definition>
        <argsstring>(const char **alignment)</argsstring>
        <name>vrna_aln_toRNA</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Create a copy of an alignment where DNA alphabet is replaced by RNA alphabet. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__aln__utils_1ga08cdca592461436860daf9738279ce17" kindref="member">vrna_aln_copy</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A copy of the input alignment where DNA alphabet is replaced by RNA alphabet (T -&gt; U) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="197" column="1" declfile="ViennaRNA/utils/alignments.h" declline="197" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1ga08cdca592461436860daf9738279ce17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char **</type>
        <definition>char** vrna_aln_copy</definition>
        <argsstring>(const char **alignment, unsigned int options)</argsstring>
        <name>vrna_aln_copy</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Make a copy of a multiple sequence alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows one to create a copy of a multiple sequence alignment. The <computeroutput>options</computeroutput> parameter additionally allows for sequence manipulation, such as converting DNA to RNA alphabet, and conversion to uppercase letters.</para>
<para><simplesect kind="see"><para><ref refid="group__aln__utils_1ga08cdca592461436860daf9738279ce17" kindref="member">vrna_aln_copy()</ref>, <ref refid="group__aln__utils_1ga1a2aa60bcc51dc8e48c07bf146bd28c1" kindref="member">VRNA_ALN_RNA</ref>, <ref refid="group__aln__utils_1ga0de72fc917d72acafe862750a3a5e0bc" kindref="member">VRNA_ALN_UPPERCASE</ref>, <ref refid="group__aln__utils_1ga7437bcbc3142b266f1f3b086eb669092" kindref="member">VRNA_ALN_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>Option flags indicating whether the aligned sequences should be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A (manipulated) copy of the input alignment </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="214" column="1" declfile="ViennaRNA/utils/alignments.h" declline="214" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gab6f16a2ea93f3bfd4d089cc8d448bb16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * vrna_aln_conservation_struct</definition>
        <argsstring>(const char **alignment, const char *structure, const vrna_md_t *md)</argsstring>
        <name>vrna_aln_conservation_struct</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>const <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md</declname>
        </param>
        <briefdescription>
<para>Compute base pair conservation of a consensus structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the base pair conservation (fraction of canonical base pairs) of a consensus structure given a multiple sequence alignment. The base pair types that are considered canonical may be specified using the <ref refid="structvrna__md__s_1ab4da594c638707e212f64aadb54a7454" kindref="member">vrna_md_t.pair</ref> array. Passing <emphasis>NULL</emphasis> as parameter <computeroutput>md</computeroutput> results in default pairing rules, i.e. canonical Watson-Crick and GU Wobble pairs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The consensus structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>Model details that specify compatible base pairs (Maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 1-based vector of base pair conservations</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000001"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>aln_conservation_struct()</computeroutput> where the last parameter <computeroutput>md</computeroutput> may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_conservation_struct()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="233" column="1" declfile="ViennaRNA/utils/alignments.h" declline="233" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gaa12b481a7e7b965ef2eb1bcc4399e759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float *</type>
        <definition>float * vrna_aln_conservation_col</definition>
        <argsstring>(const char **alignment, const vrna_md_t *md_p, unsigned int options)</argsstring>
        <name>vrna_aln_conservation_col</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md_p</declname>
          <defname>md</defname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Compute nucleotide conservation in an alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the conservation of nucleotides in alignment columns. The simples measure is Shannon Entropy and can be selected by passing the <ref refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" kindref="member">VRNA_MEASURE_SHANNON_ENTROPY</ref> flag in the <computeroutput>options</computeroutput> parameter.</para>
<para><simplesect kind="note"><para>Currently, only <ref refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" kindref="member">VRNA_MEASURE_SHANNON_ENTROPY</ref> is supported as conservation measure.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" kindref="member">VRNA_MEASURE_SHANNON_ENTROPY</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md</parametername>
</parameternamelist>
<parameterdescription>
<para>Model details that specify known nucleotides (Maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A flag indicating which measure of conservation should be applied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 1-based vector of column conservations</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000002"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>aln_conservation_col()</computeroutput> where the last two parameters may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>, and <computeroutput>options</computeroutput> = <ref refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" kindref="member">VRNA_MEASURE_SHANNON_ENTROPY</ref>, respectively. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.aln_conservation_col()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="256" column="1" declfile="ViennaRNA/utils/alignments.h" declline="256" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gac6a33fa856d66dcb6f5d40ce0b61d7c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_aln_consensus_sequence</definition>
        <argsstring>(const char **alignment, const vrna_md_t *md_p)</argsstring>
        <name>vrna_aln_consensus_sequence</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md_p</declname>
        </param>
        <briefdescription>
<para>Compute the consensus sequence for a given multiple sequence alignment. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Model details that specify known nucleotides (Maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The consensus sequence of the alignment, i.e. the most frequent nucleotide for each alignment column</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000003"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>aln_consensus_sequence()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_consensus_sequence()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="269" column="1" declfile="ViennaRNA/utils/alignments.h" declline="269" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils_1gacd02c66d9e6f8dd5318f4fca0dc76cba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_aln_consensus_mis</definition>
        <argsstring>(const char **alignment, const vrna_md_t *md_p)</argsstring>
        <name>vrna_aln_consensus_mis</name>
        <param>
          <type>const char **</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>const <ref refid="group__model__details_1ga1f8a10e12a0a1915f2a4eff0b28ea17c" kindref="member">vrna_md_t</ref> *</type>
          <declname>md_p</declname>
        </param>
        <briefdescription>
<para>Compute the Most Informative Sequence (MIS) for a given multiple sequence alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>The most informative sequence (MIS) <verbatim>embed:rst:inline :cite:p:`freyhult:2005` </verbatim> displays for each alignment column the nucleotides with frequency greater than the background frequency, projected into IUPAC notation. Columns where gaps are over-represented are in lower case.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The input sequence alignment (last entry must be <emphasis>NULL</emphasis> terminated) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>md_p</parametername>
</parameternamelist>
<parameterdescription>
<para>Model details that specify known nucleotides (Maybe <emphasis>NULL</emphasis>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The most informative sequence for the alignment</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000004"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>aln_consensus_mis()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_consensus_mis()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="284" column="1" declfile="ViennaRNA/utils/alignments.h" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1ga1cc88b4df842ca73b4ac0cb5e71c696a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int read_clustal</definition>
        <argsstring>(FILE *clust, char *AlignedSeqs[], char *names[])</argsstring>
        <name>read_clustal</name>
        <param>
          <type>FILE *</type>
          <declname>clust</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>AlignedSeqs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>char *</type>
          <declname>names</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="297" column="6" declfile="ViennaRNA/utils/alignments.h" declline="297" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1ga8e8b805faaf6dee2feb4cbc38ba48e71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* consensus</definition>
        <argsstring>(const char *AS[])</argsstring>
        <name>consensus</name>
        <param>
          <type>const char *</type>
          <declname>AS</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="304" column="7" declfile="ViennaRNA/utils/alignments.h" declline="304" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1gab8c6d748a1b44e516759233879dadcc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* consens_mis</definition>
        <argsstring>(const char *AS[])</argsstring>
        <name>consens_mis</name>
        <param>
          <type>const char *</type>
          <declname>AS</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="311" column="7" declfile="ViennaRNA/utils/alignments.h" declline="311" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1ga4a17a26c6cfc1ad5bf4c3d035292a275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* get_ungapped_sequence</definition>
        <argsstring>(const char *seq)</argsstring>
        <name>get_ungapped_sequence</name>
        <param>
          <type>const char *</type>
          <declname>seq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="318" column="7" declfile="ViennaRNA/utils/alignments.h" declline="318" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1gaa2d600be90844094ec145ea14a314d2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int get_mpi</definition>
        <argsstring>(char *Alseq[], int n_seq, int length, int *mini)</argsstring>
        <name>get_mpi</name>
        <param>
          <type>char *</type>
          <declname>Alseq</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>n_seq</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mini</declname>
        </param>
        <briefdescription>
<para>Get the mean pairwise identity in steps from ?to?(ident) </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000182"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" kindref="member">vrna_aln_mpi()</ref> as a replacement</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Alseq</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_seq</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of sequences in the alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mini</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pairwise identity </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="336" column="6" declfile="ViennaRNA/utils/alignments.h" declline="336" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1gaa3e40277c837d6f7603afe319884c786" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void encode_ali_sequence</definition>
        <argsstring>(const char *sequence, short *S, short *s5, short *s3, char *ss, unsigned short *as, int circ)</argsstring>
        <name>encode_ali_sequence</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>S</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s5</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>s3</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>ss</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>as</declname>
        </param>
        <param>
          <type>int</type>
          <declname>circ</declname>
        </param>
        <briefdescription>
<para>Get arrays with encoded sequence of the alignment. </para>
        </briefdescription>
        <detaileddescription>
<para>this function assumes that in S, S5, s3, ss and as enough space is already allocated (size must be at least sequence length+2)</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The gapped sequence from the alignment </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an array that holds encoded sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s5</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an array that holds the next base 5&apos; of alignment position i </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s3</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an array that holds the next base 3&apos; of alignment position i </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ss</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>as</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circ</parametername>
</parameternamelist>
<parameterdescription>
<para>assume the molecules to be circular instead of linear (circ=0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="366" column="7" declfile="ViennaRNA/utils/alignments.h" declline="366" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1ga8a560930f7f2582cc3967723a86cfdfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void alloc_sequence_arrays</definition>
        <argsstring>(const char **sequences, short ***S, short ***S5, short ***S3, unsigned short ***a2s, char ***Ss, int circ)</argsstring>
        <name>alloc_sequence_arrays</name>
        <param>
          <type>const char **</type>
          <declname>sequences</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S5</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S3</declname>
        </param>
        <param>
          <type>unsigned short ***</type>
          <declname>a2s</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>Ss</declname>
        </param>
        <param>
          <type>int</type>
          <declname>circ</declname>
        </param>
        <briefdescription>
<para>Allocate memory for sequence array used to deal with aligned sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>Note that these arrays will also be initialized according to the sequence alignment given</para>
<para><simplesect kind="see"><para><ref refid="group__aln__utils__deprecated_1ga298a420a8c879202e2617b3f724fde38" kindref="member">free_sequence_arrays()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequences</parametername>
</parameternamelist>
<parameterdescription>
<para>The aligned sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array of encoded sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S5</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the next 5&apos; nucleotide of a sequence position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S3</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the next 3&apos; nucleotide of a sequence position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2s</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the alignment to sequence position mapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ss</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the ungapped sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>circ</parametername>
</parameternamelist>
<parameterdescription>
<para>assume the molecules to be circular instead of linear (circ=0) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="392" column="8" declfile="ViennaRNA/utils/alignments.h" declline="392" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__aln__utils__deprecated_1ga298a420a8c879202e2617b3f724fde38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void free_sequence_arrays</definition>
        <argsstring>(unsigned int n_seq, short ***S, short ***S5, short ***S3, unsigned short ***a2s, char ***Ss)</argsstring>
        <name>free_sequence_arrays</name>
        <param>
          <type>unsigned int</type>
          <declname>n_seq</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S5</declname>
        </param>
        <param>
          <type>short ***</type>
          <declname>S3</declname>
        </param>
        <param>
          <type>unsigned short ***</type>
          <declname>a2s</declname>
        </param>
        <param>
          <type>char ***</type>
          <declname>Ss</declname>
        </param>
        <briefdescription>
<para>Free the memory of the sequence arrays used to deal with aligned sequences. </para>
        </briefdescription>
        <detaileddescription>
<para>This function frees the memory previously allocated with <ref refid="group__aln__utils__deprecated_1ga8a560930f7f2582cc3967723a86cfdfa" kindref="member">alloc_sequence_arrays()</ref></para>
<para><simplesect kind="see"><para><ref refid="group__aln__utils__deprecated_1ga8a560930f7f2582cc3967723a86cfdfa" kindref="member">alloc_sequence_arrays()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n_seq</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of aligned sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array of encoded sequences </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S5</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the next 5&apos; nucleotide of a sequence position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S3</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the next 3&apos; nucleotide of a sequence position </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2s</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the alignment to sequence position mapping </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ss</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the array that contains the ungapped sequence </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/alignments.h" line="416" column="8" declfile="ViennaRNA/utils/alignments.h" declline="416" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Various utility- and helper-functions for sequence alignments and comparative structure prediction. </para>
    </briefdescription>
    <detaileddescription>
<para>, </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="group__aln__utils__deprecated_1ga7b61662a793ad0aa1ea38efc3a5baacc" refkind="member"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_ALN_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_ALN_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref><sp/><ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_t</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="group__aln__utils_1ga7437bcbc3142b266f1f3b086eb669092" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_ALN_DEFAULT<sp/><sp/><sp/><sp/><sp/><sp/>0U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="group__aln__utils_1ga1a2aa60bcc51dc8e48c07bf146bd28c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_ALN_RNA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="group__aln__utils_1ga36affc310a5adedf1bdbf9669dd4bf85" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_ALN_DNA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__aln__utils_1ga0de72fc917d72acafe862750a3a5e0bc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_ALN_UPPERCASE<sp/><sp/><sp/><sp/>4U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group__aln__utils_1ga27eb303be3c8368c9e8be76a4d6ca35e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_ALN_LOWERCASE<sp/><sp/><sp/><sp/>8U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_MEASURE_SHANNON_ENTROPY<sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>the<sp/>following<sp/>typedefs<sp/>are<sp/>for<sp/>backward<sp/>compatibility<sp/>only<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref><sp/><ref refid="structvrna__pinfo__s" kindref="compound">pair_info</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fold__compound_8h" kindref="compound">ViennaRNA/fold_compound.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="model_8h" kindref="compound">ViennaRNA/model.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="structvrna__pinfo__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_s</ref><sp/>{</highlight></codeline>
<codeline lineno="94" refid="structvrna__pinfo__s_1ab91db0a87ef8402dc151795ba5a64c6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__pinfo__s_1ab91db0a87ef8402dc151795ba5a64c6f" kindref="member">i</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="95" refid="structvrna__pinfo__s_1a4142e38d6ba127acccdf680300a88e1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><sp/><ref refid="structvrna__pinfo__s_1a4142e38d6ba127acccdf680300a88e1f" kindref="member">j</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96" refid="structvrna__pinfo__s_1a71990eae41fa100db8b557e4512ec281" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__pinfo__s_1a71990eae41fa100db8b557e4512ec281" kindref="member">p</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97" refid="structvrna__pinfo__s_1a5ab2a63f3da8e12c6d54d8e9dd9e3e73" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__pinfo__s_1a5ab2a63f3da8e12c6d54d8e9dd9e3e73" kindref="member">ent</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="98" refid="structvrna__pinfo__s_1aa5feac5559b36dcd7cb38111c45d444d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__pinfo__s_1aa5feac5559b36dcd7cb38111c45d444d" kindref="member">bp</ref>[8];<sp/><sp/></highlight></codeline>
<codeline lineno="99" refid="structvrna__pinfo__s_1a0720ae74ce53802a759ee9f98e9c8c43" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__pinfo__s_1a0720ae74ce53802a759ee9f98e9c8c43" kindref="member">comp</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" kindref="member">vrna_aln_mpi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="structvrna__pinfo__s" kindref="compound">vrna_pinfo_t</ref><sp/>*</highlight></codeline>
<codeline lineno="127" refid="group__aln__utils_1ga9545e9d5f82d141da39e3ba772516380" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1ga9545e9d5f82d141da39e3ba772516380" kindref="member">vrna_aln_pinfo</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threshold);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="133" refid="group__aln__utils_1ga697bf6f44356918cceeff4ed8ee885e1" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1ga697bf6f44356918cceeff4ed8ee885e1" kindref="member">vrna_aln_pscore</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/><sp/><sp/>*md);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal">vrna_pscore(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/><sp/>*fc,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i,</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal">vrna_pscore_freq(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/>*frequencies,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__struct__utils__deprecated_1ga6341cbb704924824e0236c1dce791032" kindref="member">pairs</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**</highlight></codeline>
<codeline lineno="162" refid="group__aln__utils_1gac801b0a72eac4ab9d5b2ef7533db9193" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gac801b0a72eac4ab9d5b2ef7533db9193" kindref="member">vrna_aln_slice</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="group__aln__utils_1gac00dc80b8a324f151f92f11ab6850ecf" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gac00dc80b8a324f151f92f11ab6850ecf" kindref="member">vrna_aln_free</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**</highlight></codeline>
<codeline lineno="185" refid="group__aln__utils_1ga3a0476a71c4bae3d302790de58055704" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1ga3a0476a71c4bae3d302790de58055704" kindref="member">vrna_aln_uppercase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**</highlight></codeline>
<codeline lineno="197" refid="group__aln__utils_1ga7886fc678553c06472a712a335cde9cf" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1ga7886fc678553c06472a712a335cde9cf" kindref="member">vrna_aln_toRNA</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**alignment);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**</highlight></codeline>
<codeline lineno="214" refid="group__aln__utils_1ga08cdca592461436860daf9738279ce17" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1ga08cdca592461436860daf9738279ce17" kindref="member">vrna_aln_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>options);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="233" refid="group__aln__utils_1gab6f16a2ea93f3bfd4d089cc8d448bb16" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gab6f16a2ea93f3bfd4d089cc8d448bb16" kindref="member">vrna_aln_conservation_struct</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/><sp/>*md);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="256" refid="group__aln__utils_1gaa12b481a7e7b965ef2eb1bcc4399e759" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gaa12b481a7e7b965ef2eb1bcc4399e759" kindref="member">vrna_aln_conservation_col</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/>*md_p,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>options);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="269" refid="group__aln__utils_1gac6a33fa856d66dcb6f5d40ce0b61d7c7" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gac6a33fa856d66dcb6f5d40ce0b61d7c7" kindref="member">vrna_aln_consensus_sequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/>*md_p);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="284" refid="group__aln__utils_1gacd02c66d9e6f8dd5318f4fca0dc76cba" refkind="member"><highlight class="normal"><ref refid="group__aln__utils_1gacd02c66d9e6f8dd5318f4fca0dc76cba" kindref="member">vrna_aln_consensus_mis</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>**alignment,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__md__s" kindref="compound">vrna_md_t</ref><sp/><sp/>*md_p);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>read_clustal(FILE<sp/><sp/>*clust,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*AlignedSeqs[],</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*names[]),</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_file_msa_read()<sp/>and<sp/>vrna_file_msa_read_record()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consensus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*AS[]),</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_aln_consensus_sequence()<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*consens_mis(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*AS[]),</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_aln_consensus_mis()<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*get_ungapped_sequence(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*seq),</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_seq_ungapped()<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__aln__utils__deprecated_1gaa2d600be90844094ec145ea14a314d2f" kindref="member">get_mpi</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*Alseq[],</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>n_seq,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>length,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>*mini),</highlight></codeline>
<codeline lineno="336" refid="group__aln__utils__deprecated_1gaa2d600be90844094ec145ea14a314d2f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_aln_mpi()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/>#############################################################</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/>#<sp/>some<sp/>helper<sp/>functions<sp/>that<sp/>might<sp/>be<sp/>useful<sp/>in<sp/>the<sp/>library<sp/>#</highlight></codeline>
<codeline lineno="341"><highlight class="comment"><sp/>#############################################################</highlight></codeline>
<codeline lineno="342"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__aln__utils__deprecated_1gaa3e40277c837d6f7603afe319884c786" kindref="member">encode_ali_sequence</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*sequence,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*S,</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s5,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*s3,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*ss,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*as,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__model__details_1gaf9202a1a09f5828dc731e2d9a10fa111" kindref="member">circ</ref>),</highlight></codeline>
<codeline lineno="366" refid="group__aln__utils__deprecated_1gaa3e40277c837d6f7603afe319884c786" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__aln__utils__deprecated_1ga8a560930f7f2582cc3967723a86cfdfa" kindref="member">alloc_sequence_arrays</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>**sequences,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S5,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S3,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>***a2s,</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***Ss,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__model__details_1gaf9202a1a09f5828dc731e2d9a10fa111" kindref="member">circ</ref>),</highlight></codeline>
<codeline lineno="392" refid="group__aln__utils__deprecated_1ga8a560930f7f2582cc3967723a86cfdfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>function<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__aln__utils__deprecated_1ga298a420a8c879202e2617b3f724fde38" kindref="member">free_sequence_arrays</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>n_seq,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S5,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***S3,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>***a2s,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>***Ss),</highlight></codeline>
<codeline lineno="416" refid="group__aln__utils__deprecated_1ga298a420a8c879202e2617b3f724fde38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;This<sp/>fucntion<sp/>is<sp/>obsolete&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/utils/alignments.h"/>
  </compounddef>
</doxygen>
