<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="utils_2structures_8h" kind="file" language="C++">
    <compoundname>structures.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes refid="datastructures_2basic_8h" local="no">ViennaRNA/datastructures/basic.h</includes>
    <includedby refid="alifold_8h" local="no">ViennaRNA/alifold.h</includedby>
    <includedby refid="centroid_8h" local="no">ViennaRNA/centroid.h</includedby>
    <includedby refid="equilibrium__probs_8h" local="no">ViennaRNA/equilibrium_probs.h</includedby>
    <includedby refid="part__func_8h" local="no">ViennaRNA/part_func.h</includedby>
    <includedby refid="part__func__co_8h" local="no">ViennaRNA/part_func_co.h</includedby>
    <includedby refid="part__func__window_8h" local="no">ViennaRNA/part_func_window.h</includedby>
    <includedby refid="structure__utils_8h" local="no">ViennaRNA/structure_utils.h</includedby>
    <includedby refid="unstructured__domains_8h" local="no">ViennaRNA/unstructured_domains.h</includedby>
    <includedby refid="utils_8h" local="no">ViennaRNA/utils.h</includedby>
    <includedby refid="probabilities_8h" local="no">ViennaRNA/plotting/probabilities.h</includedby>
    <includedby refid="plotting_2utils_8h" local="no">ViennaRNA/plotting/utils.h</includedby>
    <includedby refid="datastructures_2basic_8h" local="yes">ViennaRNA/datastructures/basic.h</includedby>
    <incdepgraph>
      <node id="6">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>ViennaRNA/params/constants.h</label>
        <link refid="constants_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>ViennaRNA/model.h</label>
        <link refid="model_8h"/>
      </node>
      <node id="14">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>limits.h</label>
      </node>
      <node id="9">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ViennaRNA/zscore.h</label>
        <link refid="zscore_8h_source"/>
      </node>
      <node id="16">
        <label>ViennaRNA/structured_domains.h</label>
        <link refid="structured__domains_8h"/>
      </node>
      <node id="11">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
      <node id="10">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26">
        <label>ViennaRNA/fold.h</label>
        <link refid="fold_8h"/>
      </node>
      <node id="15">
        <label>ViennaRNA/utils.h</label>
        <link refid="utils_8h"/>
      </node>
      <node id="71">
        <label>ViennaRNA/utils/strings.h</label>
        <link refid="strings_8h"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>ViennaRNA/plot_structure.h</label>
        <link refid="plot__structure_8h"/>
      </node>
      <node id="11">
        <label>ViennaRNA/fold_compound.h</label>
        <link refid="fold__compound_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>ViennaRNA/alphabet.h</label>
        <link refid="alphabet_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="73">
        <label>ViennaRNA/grammar.h</label>
        <link refid="grammar_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>ViennaRNA/equilibrium_probs.h</label>
        <link refid="equilibrium__probs_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>ViennaRNA/perturbation_fold.h</label>
        <link refid="perturbation__fold_8h"/>
      </node>
      <node id="33">
        <label>ViennaRNA/part_func_up.h</label>
        <link refid="part__func__up_8h"/>
      </node>
      <node id="63">
        <label>ViennaRNA/PS_dot.h</label>
        <link refid="PS__dot_8h"/>
      </node>
      <node id="35">
        <label>ViennaRNA/plex.h</label>
        <link refid="plex_8h_source"/>
      </node>
      <node id="87">
        <label>ViennaRNA/findpath.h</label>
        <link refid="findpath_8h"/>
      </node>
      <node id="78">
        <label>ViennaRNA/pf_multifold.h</label>
        <link refid="pf__multifold_8h_source"/>
      </node>
      <node id="7">
        <label>ViennaRNA/part_func_window.h</label>
        <link refid="part__func__window_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>ViennaRNA/structure_utils.h</label>
        <link refid="structure__utils_8h"/>
      </node>
      <node id="17">
        <label>ViennaRNA/combinatorics.h</label>
        <link refid="combinatorics_8h"/>
      </node>
      <node id="61">
        <label>ViennaRNA/plotting/layouts.h</label>
        <link refid="layouts_8h"/>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
      </node>
      <node id="53">
        <label>ViennaRNA/multibranch_loops.h</label>
        <link refid="multibranch__loops_8h"/>
      </node>
      <node id="54">
        <label>ViennaRNA/constraints/ligand.h</label>
        <link refid="ligand_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>ViennaRNA/mfe_window.h</label>
        <link refid="mfe__window_8h"/>
        <childnode refid="75" relation="include">
        </childnode>
      </node>
      <node id="46">
        <label>ViennaRNA/loops/all.h</label>
        <link refid="all_8h"/>
        <childnode refid="47" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>ViennaRNA/utils/structures.h</label>
        <link refid="utils_2structures_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="59">
        <label>ViennaRNA/io/file_formats.h</label>
        <link refid="io_2file__formats_8h"/>
        <childnode refid="60" relation="include">
        </childnode>
      </node>
      <node id="85">
        <label>ViennaRNA/constraints_SHAPE.h</label>
        <link refid="constraints__SHAPE_8h"/>
      </node>
      <node id="5">
        <label>ViennaRNA/part_func_co.h</label>
        <link refid="part__func__co_8h"/>
      </node>
      <node id="49">
        <label>ViennaRNA/hairpin_loops.h</label>
        <link refid="hairpin__loops_8h"/>
      </node>
      <node id="44">
        <label>ViennaRNA/loops/external.h</label>
        <link refid="external_8h"/>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="89">
        <label>ViennaRNA/neighbor.h</label>
        <link refid="neighbor_8h"/>
      </node>
      <node id="43">
        <label>ViennaRNA/params.h</label>
        <link refid="params_8h"/>
      </node>
      <node id="38">
        <label>ViennaRNA/snoop.h</label>
        <link refid="snoop_8h_source"/>
      </node>
      <node id="23">
        <label>ViennaRNA/data_structures.h</label>
        <link refid="data__structures_8h"/>
      </node>
      <node id="79">
        <label>ViennaRNA/pk_plex.h</label>
        <link refid="pk__plex_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>ViennaRNA/concentrations.h</label>
        <link refid="concentrations_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>ViennaRNA/commands.h</label>
        <link refid="commands_8h"/>
      </node>
      <node id="30">
        <label>ViennaRNA/heat_capacity.h</label>
        <link refid="heat__capacity_8h"/>
      </node>
      <node id="67">
        <label>ViennaRNA/plotting/utils.h</label>
        <link refid="plotting_2utils_8h"/>
        <childnode refid="68" relation="include">
        </childnode>
      </node>
      <node id="48">
        <label>ViennaRNA/loops/hairpin.h</label>
        <link refid="hairpin_8h"/>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>ViennaRNA/landscape/neighbor.h</label>
        <link refid="landscape_2neighbor_8h"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="41">
        <label>ViennaRNA/params/basic.h</label>
        <link refid="params_2basic_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="72">
        <label>ViennaRNA/string_utils.h</label>
        <link refid="string__utils_8h"/>
      </node>
      <node id="50">
        <label>ViennaRNA/loops/internal.h</label>
        <link refid="internal_8h"/>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="76">
        <label>ViennaRNA/mm.h</label>
        <link refid="mm_8h"/>
      </node>
      <node id="80">
        <label>ViennaRNA/sequence.h</label>
        <link refid="sequence_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="69">
        <label>ViennaRNA/utils/basic.h</label>
        <link refid="utils_2basic_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>ViennaRNA/loops/multibranch.h</label>
        <link refid="multibranch_8h"/>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>ViennaRNA/gquad.h</label>
        <link refid="gquad_8h"/>
      </node>
      <node id="10">
        <label>ViennaRNA/unstructured_domains.h</label>
        <link refid="unstructured__domains_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>ViennaRNA/subopt.h</label>
        <link refid="subopt_8h"/>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>ViennaRNA/profiledist.h</label>
        <link refid="profiledist_8h"/>
      </node>
      <node id="40">
        <label>ViennaRNA/subopt_zuker.h</label>
        <link refid="subopt__zuker_8h_source"/>
      </node>
      <node id="20">
        <label>ViennaRNA/datastructures/basic.h</label>
        <link refid="datastructures_2basic_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="57">
        <label>ViennaRNA/constraints/soft.h</label>
        <link refid="soft_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>ViennaRNA/landscape/walk.h</label>
        <link refid="landscape_2walk_8h"/>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="86">
        <label>ViennaRNA/landscape/findpath.h</label>
        <link refid="landscape_2findpath_8h"/>
        <childnode refid="87" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>ViennaRNA/utils/alignments.h</label>
        <link refid="utils_2alignments_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="51">
        <label>ViennaRNA/interior_loops.h</label>
        <link refid="interior__loops_8h"/>
      </node>
      <node id="3">
        <label>ViennaRNA/centroid.h</label>
        <link refid="centroid_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="60">
        <label>ViennaRNA/file_formats.h</label>
        <link refid="file__formats_8h"/>
      </node>
      <node id="27">
        <label>ViennaRNA/fold_vars.h</label>
        <link refid="fold__vars_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="66">
        <label>ViennaRNA/plotting/probabilities.h</label>
        <link refid="probabilities_8h"/>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>ViennaRNA/2Dpfold.h</label>
        <link refid="2Dpfold_8h"/>
      </node>
      <node id="64">
        <label>ViennaRNA/plotting/structures.h</label>
        <link refid="plotting_2structures_8h"/>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>ViennaRNA/pair_mat.h</label>
        <link refid="pair__mat_8h_source"/>
      </node>
      <node id="34">
        <label>ViennaRNA/PKplex.h</label>
        <link refid="PKplex_8h_source"/>
      </node>
      <node id="58">
        <label>ViennaRNA/constraints_soft.h</label>
        <link refid="constraints__soft_8h"/>
      </node>
      <node id="47">
        <label>ViennaRNA/loop_energies.h</label>
        <link refid="loop__energies_8h"/>
      </node>
      <node id="12">
        <label>ViennaRNA/2Dfold.h</label>
        <link refid="2Dfold_8h"/>
      </node>
      <node id="4">
        <label>ViennaRNA/part_func.h</label>
        <link refid="part__func_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="62">
        <label>ViennaRNA/plot_layouts.h</label>
        <link refid="plot__layouts_8h"/>
      </node>
      <node id="70">
        <label>ViennaRNA/params/salt.h</label>
        <link refid="salt_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
      </node>
      <node id="82">
        <label>ViennaRNA/constraints/hard.h</label>
        <link refid="hard_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="56">
        <label>ViennaRNA/constraints_ligand.h</label>
        <link refid="constraints__ligand_8h"/>
      </node>
      <node id="90">
        <label>ViennaRNA/walk.h</label>
        <link refid="walk_8h"/>
      </node>
      <node id="22">
        <label>ViennaRNA/cofold.h</label>
        <link refid="cofold_8h"/>
      </node>
      <node id="68">
        <label>ViennaRNA/plot_utils.h</label>
        <link refid="plot__utils_8h"/>
      </node>
      <node id="24">
        <label>ViennaRNA/duplex.h</label>
        <link refid="duplex_8h"/>
      </node>
      <node id="75">
        <label>ViennaRNA/Lfold.h</label>
        <link refid="Lfold_8h"/>
      </node>
      <node id="31">
        <label>ViennaRNA/MEA.h</label>
        <link refid="MEA_8h"/>
      </node>
      <node id="81">
        <label>ViennaRNA/constraints/basic.h</label>
        <link refid="constraints_2basic_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ViennaRNA/ali_plex.h</label>
        <link refid="ali__plex_8h_source"/>
      </node>
      <node id="8">
        <label>ViennaRNA/LPfold.h</label>
        <link refid="LPfold_8h"/>
      </node>
      <node id="84">
        <label>ViennaRNA/constraints/SHAPE.h</label>
        <link refid="SHAPE_8h"/>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>ViennaRNA/mfe.h</label>
        <link refid="mfe_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="55">
        <label>ViennaRNA/constraints.h</label>
        <link refid="constraints_8h"/>
      </node>
      <node id="94">
        <label>ViennaRNA/aln_util.h</label>
        <link refid="aln__util_8h"/>
      </node>
      <node id="25">
        <label>ViennaRNA/eval.h</label>
        <link refid="eval_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>ViennaRNA/landscape/paths.h</label>
        <link refid="paths_8h"/>
        <childnode refid="86" relation="include">
        </childnode>
      </node>
      <node id="45">
        <label>ViennaRNA/exterior_loops.h</label>
        <link refid="exterior__loops_8h"/>
      </node>
      <node id="16">
        <label>ViennaRNA/boltzmann_sampling.h</label>
        <link refid="boltzmann__sampling_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="83">
        <label>ViennaRNA/constraints_hard.h</label>
        <link refid="constraints__hard_8h"/>
      </node>
      <node id="19">
        <label>ViennaRNA/dp_matrices.h</label>
        <link refid="dp__matrices_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>ViennaRNA/alifold.h</label>
        <link refid="alifold_8h"/>
      </node>
      <node id="37">
        <label>ViennaRNA/snofold.h</label>
        <link refid="snofold_8h_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structvrna__elem__prob__s" prot="public">vrna_elem_prob_s</innerclass>
    <innerclass refid="structvrna__hx__s" prot="public">vrna_hx_s</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="utils_2structures_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="13" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" prot="public" static="no">
        <name>VRNA_BRACKETS_ALPHA</name>
        <initializer>4U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using uppercase/lowercase letters from the latin alphabet. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="52" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" prot="public" static="no">
        <name>VRNA_BRACKETS_RND</name>
        <initializer>8U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using round brackets (parenthesis), <computeroutput>()</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="60" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" prot="public" static="no">
        <name>VRNA_BRACKETS_CLY</name>
        <initializer>16U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using curly brackets, <computeroutput>{}</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="68" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" prot="public" static="no">
        <name>VRNA_BRACKETS_ANG</name>
        <initializer>32U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using angular brackets, <computeroutput>&lt;&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="76" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" prot="public" static="no">
        <name>VRNA_BRACKETS_SQR</name>
        <initializer>64U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using square brackets, <computeroutput>[]</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="84" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" prot="public" static="no">
        <name>VRNA_BRACKETS_DEFAULT</name>
        <initializer>  (<ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>)</initializer>
        <briefdescription>
<para>Default bitmask to indicate secondary structure notation using any pair of brackets. </para>
        </briefdescription>
        <detaileddescription>
<para>This set of matching brackets/parenthesis is always nested, i.e. pseudo-knot free, in WUSS format. However, in general different kinds of brackets are mostly used for annotating pseudo-knots. Thus special care has to be taken to remove pseudo-knots if this bitmask is used in functions that return secondary structures without pseudo-knots!</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove()</ref> <ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="98" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" prot="public" static="no">
        <name>VRNA_BRACKETS_ANY</name>
        <initializer>  (<ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" kindref="member">VRNA_BRACKETS_ALPHA</ref>)</initializer>
        <briefdescription>
<para>Bitmask to indicate secondary structure notation using any pair of brackets or uppercase/lowercase alphabet letters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="111" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga7c7484a8a1e6704b1aefaf589f3b27c1" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_BASEPAIR</name>
        <initializer>0</initializer>
        <briefdescription>
<para>A Base Pair element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="411" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1gac91ab79e9feede5347103949ecf04f8a" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_GQUAD</name>
        <initializer>1</initializer>
        <briefdescription>
<para>A G-Quadruplex element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="417" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga4d142e0187b8410b61ec2b168ed4513e" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_H_MOTIF</name>
        <initializer>2</initializer>
        <briefdescription>
<para>A Hairpin loop motif element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="423" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1gadf5905518079b5495bce3394cd7afb9a" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_I_MOTIF</name>
        <initializer>3</initializer>
        <briefdescription>
<para>An Internal loop motif element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="429" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga01d749cdb675dcdbac1dc5103378c699" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_UD_MOTIF</name>
        <initializer>4</initializer>
        <briefdescription>
<para>An Unstructured Domain motif element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="435" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga36df728a95452170ca8684fc224299ea" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_STACK</name>
        <initializer>5</initializer>
        <briefdescription>
<para>A Base Pair stack element. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="441" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="441" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga7961043acc4f183a7bc7cf2505a8c8b9" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_UNPAIRED</name>
        <initializer>6</initializer>
        <briefdescription>
<para>An unpaired base. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="447" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__plist_1ga1bdc6494057e1b947a0832aa011af8c3" prot="public" static="no">
        <name>VRNA_PLIST_TYPE_TRIPLE</name>
        <initializer>7</initializer>
        <briefdescription>
<para>One pair of a base triplet. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="453" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_HIT</name>
        <initializer>1U</initializer>
        <briefdescription>
<para>Homeomorphically Irreducible <ref refid="structTree" kindref="compound">Tree</ref> (HIT) representation of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="749" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="749" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1ga549e259a963d77e2d5b7e14083fc016e" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_SHAPIRO_SHORT</name>
        <initializer>2U</initializer>
        <briefdescription>
<para>(short) Coarse Grained representation of a secondary structure </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="756" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1ga4acd9991a0250ccd4cd44c4725b31927" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_SHAPIRO</name>
        <initializer>3U</initializer>
        <briefdescription>
<para>(full) Coarse Grained representation of a secondary structure </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="763" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1ga8666a10982a4f7a26892066ff07b4b48" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_SHAPIRO_EXT</name>
        <initializer>4U</initializer>
        <briefdescription>
<para>(extended) Coarse Grained representation of a secondary structure </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="770" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1ga91f2e3a3a502d5445fd7fe5983a5fe92" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT</name>
        <initializer>5U</initializer>
        <briefdescription>
<para>(weighted) Coarse Grained representation of a secondary structure </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="777" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__tree_1gab3b65489d1322da65d3a3e53242307ef" prot="public" static="no">
        <name>VRNA_STRUCTURE_TREE_EXPANDED</name>
        <initializer>6U</initializer>
        <briefdescription>
<para>Expanded <ref refid="structTree" kindref="compound">Tree</ref> representation of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="783" column="11" bodyfile="ViennaRNA/utils/structures.h" bodystart="783" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__struct__utils__helix__list_1ga877363f3a1703b53ecd025c6fcf897a0" prot="public" static="no">
        <type>struct <ref refid="structvrna__hx__s" kindref="compound">vrna_hx_s</ref></type>
        <definition>typedef struct vrna_hx_s vrna_hx_t</definition>
        <argsstring></argsstring>
        <name>vrna_hx_t</name>
        <briefdescription>
<para>Convenience typedef for data structure <ref refid="structvrna__hx__s" kindref="compound">vrna_hx_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1" column="0" bodyfile="ViennaRNA/utils/structures.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" prot="public" static="no">
        <type>struct <ref refid="structvrna__elem__prob__s" kindref="compound">vrna_elem_prob_s</ref></type>
        <definition>typedef struct vrna_elem_prob_s vrna_ep_t</definition>
        <argsstring></argsstring>
        <name>vrna_ep_t</name>
        <briefdescription>
<para>Convenience typedef for data structure <ref refid="structvrna__elem__prob__s" kindref="compound">vrna_elem_prob_s</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1" column="0" bodyfile="ViennaRNA/utils/structures.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_pack</definition>
        <argsstring>(const char *struc)</argsstring>
        <name>vrna_db_pack</name>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <briefdescription>
<para>Pack secondary secondary structure, 5:1 compression using base 3 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a binary string encoding of the secondary structure using a 5:1 compression scheme. The string is NULL terminated and can therefore be used with standard string functions such as strcmp(). Useful for programs that need to keep many structures in memory.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" kindref="member">vrna_db_unpack()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The binary encoded structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="137" column="1" declfile="ViennaRNA/utils/structures.h" declline="137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_unpack</definition>
        <argsstring>(const char *packed)</argsstring>
        <name>vrna_db_unpack</name>
        <param>
          <type>const char *</type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>Unpack secondary structure previously packed with <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Translate a compressed binary string produced by <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> back into the familiar dot-bracket notation.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary encoded packed secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unpacked secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="152" column="1" declfile="ViennaRNA/utils/structures.h" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_db_flatten</definition>
        <argsstring>(char *structure, unsigned int options)</argsstring>
        <name>vrna_db_flatten</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Substitute pairs of brackets in a string with parenthesis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to replace brackets of unusual types, such as angular brackets <computeroutput>&lt;&gt;</computeroutput> , to dot-bracket format. The <computeroutput>options</computeroutput> parameter is used tpo specify which types of brackets will be replaced by round parenthesis <computeroutput></computeroutput>() .</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure string where brackets are flattened in-place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be flattened out</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="wrappers_1_wrappers000167"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function flattens an input structure string in-place! The second parameter is optional and defaults to <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>.</para>
<para>An overloaded version of this function exists, where an additional second parameter can be passed to specify the target brackets, i.e. the type of matching pair characters all brackets will be flattened to. Therefore, in the scripting language interface this function is a replacement for <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="171" column="1" declfile="ViennaRNA/utils/structures.h" declline="171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_db_flatten_to</definition>
        <argsstring>(char *string, const char target[3], unsigned int options)</argsstring>
        <name>vrna_db_flatten_to</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>target</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Substitute pairs of brackets in a string with another type of pair characters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to replace brackets in a structure annotation string, such as square brackets <computeroutput></computeroutput>[] , to another type of pair characters, e.g. angular brackets <computeroutput>&lt;&gt;</computeroutput> .</para>
<para>The <computeroutput>target</computeroutput> array must contain a character for the &apos;pair open&apos; annotation at position 0, and one for &apos;pair close&apos; at position 1. T<computeroutput>options</computeroutput> parameter is used to specify which types of brackets will be replaced by the new pairs.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure string where brackets are flattened in-place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The new pair characters the string will be flattened to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be flattened out</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="wrappers_1_wrappers000168"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded version of <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="195" column="1" declfile="ViennaRNA/utils/structures.h" declline="195" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_ptable</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>vrna_db_from_ptable</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Convert a pair table into dot-parenthesis notation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function also converts pair table formatted structures that contain pseudoknots. Non-nested base pairs result in additional pairs of parenthesis and brackets within the resulting dot-parenthesis string. The following pairs are awailable: (), []. {}. &lt;&gt;, as well as pairs of matching upper-/lower-case characters from the alphabet A-Z.</para>
<para><simplesect kind="note"><para>In cases where the level of non-nested base pairs exceeds the maximum number of 30 different base pair indicators (4 parenthesis/brackets, 26 matching characters), a warning is printed and the remaining base pairs are left out from the conversion.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A char pointer to the dot-bracket string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="218" column="1" declfile="ViennaRNA/utils/structures.h" declline="218" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga6a51a36b9245d0bac868c5cd172b9611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_plist</definition>
        <argsstring>(vrna_ep_t *pairs, unsigned int n)</argsstring>
        <name>vrna_db_from_plist</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert a list of base pairs into dot-bracket notation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> containing the pairs to be included in the dot-bracket string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the structure (number of nucleotides) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot-bracket string containing the provided base pairs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="232" column="1" declfile="ViennaRNA/utils/structures.h" declline="232" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga45360c09fb6d04d96e42dcccbb66015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_to_element_string</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_db_to_element_string</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Convert a secondary structure in dot-bracket notation to a nucleotide annotation of loop contexts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string annotating each nucleotide according to it&apos;s structural context </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="243" column="1" declfile="ViennaRNA/utils/structures.h" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_db_pk_remove</definition>
        <argsstring>(const char *structure, unsigned int options)</argsstring>
        <name>vrna_db_pk_remove</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Remove pseudo-knots from an input structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes pseudo-knots from an input structure by determining the minimum number of base pairs that need to be removed to make the structure pseudo-knot free.</para>
<para>To accomplish that, we use a dynamic programming algorithm similar to the Nussinov maxmimum matching approach.</para>
<para>The input structure must be in a dot-bracket string like form where crossing base pairs are denoted by the use of additional types of matching brackets, e.g. <computeroutput>&lt;&gt;</computeroutput>, <computeroutput>{}</computeroutput>, <computeroutput></computeroutput>[], <computeroutput>{}</computeroutput>. Furthermore, crossing pairs may be annotated by matching uppercase/lowercase letters from the alphabet <computeroutput>A-Z</computeroutput>. For the latter, the uppercase letter must be the 5&apos; and the lowercase letter the 3&apos; nucleotide of the base pair. The actual type of brackets to be recognized by this function must be specifed through the <computeroutput>options</computeroutput> parameter.</para>
<para><simplesect kind="note"><para>Brackets in the input structure string that are not covered by the <computeroutput>options</computeroutput> bitmask will be silently ignored!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" kindref="member">VRNA_BRACKETS_ALPHA</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>, <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Input structure in dot-bracket format that may include pseudo-knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be processed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The input structure devoid of pseudo-knots in dot-bracket notation</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000169"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>db_pk_remove()</computeroutput> where the optional second parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_pk_remove()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="278" column="1" declfile="ViennaRNA/utils/structures.h" declline="278" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * vrna_ptable</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_ptable</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table from a dot-bracket notation of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a newly allocated table, such that table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" kindref="member">vrna_db_from_ptable()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created pair_table</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000170"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This functions is wrapped as overloaded function <computeroutput>ptable()</computeroutput> that takes an optional argument <computeroutput>options</computeroutput> to specify which type of matching brackets should be considered during conversion. The default set is round brackets, i.e. <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.ptable()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="301" column="1" declfile="ViennaRNA/utils/structures.h" declline="301" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short * vrna_ptable_from_string</definition>
        <argsstring>(const char *structure, unsigned int options)</argsstring>
        <name>vrna_ptable_from_string</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Create a pair table for a secondary structure string. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an input string of a secondary structure annotation in dot-bracket-notation or dot-bracket-ext-notation, and converts it into a pair table representation.</para>
<para><simplesect kind="note"><para>This function also extracts crossing base pairs, i.e. pseudo-knots if more than a single matching bracket type is allowed through the bitmask <computeroutput>options</computeroutput>.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" kindref="member">vrna_db_from_ptable()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>, <ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove()</ref> <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" kindref="member">VRNA_BRACKETS_ALPHA</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>, <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Secondary structure in dot-bracket-ext-notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which brackets are recognized during conversion to pair table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to a new pair table of the provided secondary structure</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000171"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This functions is wrapped as overloaded function <computeroutput>ptable()</computeroutput> that takes an optional argument <computeroutput>options</computeroutput> to specify which type of matching brackets should be considered during conversion. The default set is round brackets, i.e. <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.ptable()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="324" column="1" declfile="ViennaRNA/utils/structures.h" declline="324" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1gacca520048b24ec5a8978f4dafb4e4bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* vrna_pt_pk_get</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_pt_pk_get</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table of a secondary structure (pseudo-knot version) </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a newly allocated table, such that table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure.</para>
<para>In contrast to <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref> this function also recognizes the base pairs denoted by &apos;[&apos; and &apos;]&apos; brackets. Thus, this function behaves like <programlisting filename=".c"><codeline><highlight class="normal"><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string</ref>(structure,<sp/><ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref><sp/>|<sp/><ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>)</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in (extended) dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created pair_table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="346" column="1" declfile="ViennaRNA/utils/structures.h" declline="346" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1ga2daefbbd6d9f8803731651882f54332d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* vrna_ptable_copy</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>vrna_ptable_copy</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Get an exact copy of a pair table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copy of &apos;pt&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="356" column="1" declfile="ViennaRNA/utils/structures.h" declline="356" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1ga1ee4cdcda1f57d32dcb38032116d335d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* vrna_pt_ali_get</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_pt_ali_get</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table of a secondary structure (snoop align version) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="364" column="1" declfile="ViennaRNA/utils/structures.h" declline="364" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1gaef0f7e1a6c00c81a349973de53039dda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* vrna_pt_snoop_get</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_pt_snoop_get</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table of a secondary structure (snoop version) </para>
        </briefdescription>
        <detaileddescription>
<para>returns a newly allocated table, such that: table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure. The special pseudoknotted H/ACA-mRNA structure is taken into account. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="375" column="1" declfile="ViennaRNA/utils/structures.h" declline="375" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* vrna_pt_pk_remove</definition>
        <argsstring>(const short *ptable, unsigned int options)</argsstring>
        <name>vrna_pt_pk_remove</name>
        <param>
          <type>const short *</type>
          <declname>ptable</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Remove pseudo-knots from a pair table. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes pseudo-knots from an input structure by determining the minimum number of base pairs that need to be removed to make the structure pseudo-knot free.</para>
<para>To accomplish that, we use a dynamic programming algorithm similar to the Nussinov maxmimum matching approach.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptable</parametername>
</parameternamelist>
<parameterdescription>
<para>Input structure that may include pseudo-knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The input structure devoid of pseudo-knots </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="395" column="1" declfile="ViennaRNA/utils/structures.h" declline="395" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
        <definition>vrna_ep_t* vrna_plist</definition>
        <argsstring>(const char *struc, float pr)</argsstring>
        <name>vrna_plist</name>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> from a dot-bracket string. </para>
        </briefdescription>
        <detaileddescription>
<para>The dot-bracket string is parsed and for each base pair an entry in the plist is created. The probability of each pair in the list is set by a function parameter.</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability for each base pair used in the plist </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The plist array </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="487" column="11" declfile="ViennaRNA/utils/structures.h" declline="487" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
        <definition>vrna_ep_t* vrna_plist_from_probs</definition>
        <argsstring>(vrna_fold_compound_t *fc, double cut_off)</argsstring>
        <name>vrna_plist_from_probs</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cut_off</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> from base pair probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The probability matrix provided via the <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> is parsed and all pair probabilities above the given threshold are used to create an entry in the plist</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold compound </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cut_off</parametername>
</parameternamelist>
<parameterdescription>
<para>The cutoff value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the plist that is to be created </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="507" column="11" declfile="ViennaRNA/utils/structures.h" declline="507" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__wuss_1ga02ca70cffb2d864f7b2d95d92218bae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_WUSS</definition>
        <argsstring>(const char *wuss)</argsstring>
        <name>vrna_db_from_WUSS</name>
        <param>
          <type>const char *</type>
          <declname>wuss</declname>
        </param>
        <briefdescription>
<para>Convert a WUSS annotation string to dot-bracket format. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function flattens all brackets, and treats pseudo-knots annotated by matching pairs of upper/lowercase letters as unpaired nucleotides</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wuss</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string in WUSS notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dot-bracket notation of the input secondary structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="530" column="1" declfile="ViennaRNA/utils/structures.h" declline="530" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__abstract__shapes_1gafca0add98ede22bf2c22608878c61b22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_abstract_shapes</definition>
        <argsstring>(const char *structure, unsigned int level)</argsstring>
        <name>vrna_abstract_shapes</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Convert a secondary structure in dot-bracket notation to its abstract shapes representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a secondary structure into its abstract shapes representation as presented by <verbatim>embed:rst:inline :cite:t:`giegerich:2004` </verbatim>.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__abstract__shapes_1ga2fd59087e1c4e3d460e5823ba6d693b4" kindref="member">vrna_abstract_shapes_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The abstraction level (integer in the range of 0 to 5) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The secondary structure in abstract shapes notation</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000172"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>abstract_shapes()</computeroutput> where the optional second parameter <computeroutput>level</computeroutput> defaults to 5. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.abstract_shapes()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="555" column="1" declfile="ViennaRNA/utils/structures.h" declline="555" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__abstract__shapes_1ga2fd59087e1c4e3d460e5823ba6d693b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_abstract_shapes_pt</definition>
        <argsstring>(const short *pt, unsigned int level)</argsstring>
        <name>vrna_abstract_shapes_pt</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>level</declname>
        </param>
        <briefdescription>
<para>Convert a secondary structure to its abstract shapes representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function converts a secondary structure into its abstract shapes representation as presented by <verbatim>embed:rst:inline :cite:t:`giegerich:2004` </verbatim>. This function is equivalent to vrna_db_to_shapes(), but requires a pair table input instead of a dot-bracket structure.</para>
<para><simplesect kind="note"><para>The length of the structure must be present at <computeroutput>pt</computeroutput>[0]!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__struct__utils__abstract__shapes_1gafca0add98ede22bf2c22608878c61b22" kindref="member">vrna_abstract_shapes()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>A secondary structure in pair table format </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>level</parametername>
</parameternamelist>
<parameterdescription>
<para>The abstraction level (integer in the range of 0 to 5) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The secondary structure in abstract shapes notation</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000173"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>abstract_shapes()</computeroutput> where the optional second parameter <computeroutput>level</computeroutput> defaults to 5. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.abstract_shapes()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="575" column="1" declfile="ViennaRNA/utils/structures.h" declline="575" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__helix__list_1ga7ca60670fbbf23ae2ac9f63e5dbf8aef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__helix__list_1ga877363f3a1703b53ecd025c6fcf897a0" kindref="member">vrna_hx_t</ref> *</type>
        <definition>vrna_hx_t* vrna_hx_from_ptable</definition>
        <argsstring>(short *pt)</argsstring>
        <name>vrna_hx_from_ptable</name>
        <param>
          <type>short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Convert a pair table representation of a secondary structure into a helix list. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in pair table representation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The secondary structure represented as a helix list </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="607" column="1" declfile="ViennaRNA/utils/structures.h" declline="607" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__helix__list_1ga2fdaac8bb6c239c119ad5c20b145b7f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__helix__list_1ga877363f3a1703b53ecd025c6fcf897a0" kindref="member">vrna_hx_t</ref> *</type>
        <definition>vrna_hx_t* vrna_hx_merge</definition>
        <argsstring>(const vrna_hx_t *list, int maxdist)</argsstring>
        <name>vrna_hx_merge</name>
        <param>
          <type>const <ref refid="group__struct__utils__helix__list_1ga877363f3a1703b53ecd025c6fcf897a0" kindref="member">vrna_hx_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxdist</declname>
        </param>
        <briefdescription>
<para>Create a merged helix list from another helix list. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="614" column="1" declfile="ViennaRNA/utils/structures.h" declline="614" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga03e15af299be0866ff21da880c74b92e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* vrna_loopidx_from_ptable</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>vrna_loopidx_from_ptable</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Get a loop index representation of a structure. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="626" column="1" declfile="ViennaRNA/utils/structures.h" declline="626" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_bp_distance_pt</definition>
        <argsstring>(const short *pt1, const short *pt2)</argsstring>
        <name>vrna_bp_distance_pt</name>
        <param>
          <type>const short *</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt2</declname>
        </param>
        <briefdescription>
<para>Compute the &quot;base pair&quot; distance between two pair tables pt1 and pt2 of secondary structures. </para>
        </briefdescription>
        <detaileddescription>
<para>The pair tables should have the same length. dist = number of base pairs in one structure but not in the other same as edit distance with open-pair close-pair as move-set</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__metrics_1ga65bdfbac6a16bf30286e8a3f7d15f60a" kindref="member">vrna_bp_distance()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt1</parametername>
</parameternamelist>
<parameterdescription>
<para>First structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base pair distance between pt1 and pt2</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000174"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded method <bold><ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance()</ref></bold>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.bp_distance()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="648" column="1" declfile="ViennaRNA/utils/structures.h" declline="648" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__metrics_1ga65bdfbac6a16bf30286e8a3f7d15f60a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_bp_distance</definition>
        <argsstring>(const char *str1, const char *str2)</argsstring>
        <name>vrna_bp_distance</name>
        <param>
          <type>const char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compute the &quot;base pair&quot; distance between two secondary structures s1 and s2. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wrapper around <bold><ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt()</ref></bold>. The sequences should have the same length. dist = number of base pairs in one structure but not in the other same as edit distance with open-pair close-pair as move-set</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base pair distance between str1 and str2</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000175"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded method <bold><ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance()</ref></bold>. Note that the SWIG wrapper takes two structure in dot-bracket notation and converts them into pair tables using <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>. The resulting pair tables are then internally passed to <ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt()</ref>. To control which kind of matching brackets will be used during conversion, the optional argument <computeroutput>options</computeroutput> can be used. See also the description of <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> for available options. (default: <bold>VRNA_BRACKETS_RND</bold>). See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.bp_distance()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="666" column="1" declfile="ViennaRNA/utils/structures.h" declline="666" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__metrics_1ga58224cf9335172baa1e725266cc5d90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_dist_mountain</definition>
        <argsstring>(const char *str1, const char *str2, unsigned int p)</argsstring>
        <name>vrna_dist_mountain</name>
        <param>
          <type>const char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="671" column="1" declfile="ViennaRNA/utils/structures.h" declline="671" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1gab4c2a00c99ce1d612ffa5bde114eb96d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int* vrna_refBPcnt_matrix</definition>
        <argsstring>(const short *reference_pt, unsigned int turn)</argsstring>
        <name>vrna_refBPcnt_matrix</name>
        <param>
          <type>const short *</type>
          <declname>reference_pt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair count matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the number of basepairs of a reference structure for each interval [i,j] with i&lt;j. Access it via iindx!!! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="686" column="1" declfile="ViennaRNA/utils/structures.h" declline="686" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga5a27bd058183170afd4716f5b8ff511a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int* vrna_refBPdist_matrix</definition>
        <argsstring>(const short *pt1, const short *pt2, unsigned int turn)</argsstring>
        <name>vrna_refBPdist_matrix</name>
        <param>
          <type>const short *</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair distance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the base pair distance of two reference structures for each interval [i,j] with i&lt;j. Access it via iindx!!! </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="698" column="1" declfile="ViennaRNA/utils/structures.h" declline="698" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_db_from_probs</definition>
        <argsstring>(const FLT_OR_DBL *pr, unsigned int length)</argsstring>
        <name>vrna_db_from_probs</name>
        <param>
          <type>const <ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-bracket like structure string from base pair probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="wrappers_1_wrappers000176"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as parameter-less method <bold>db_from_probs()</bold> bound to objects of type <emphasis>fold_compound</emphasis>. Parameters <computeroutput>pr</computeroutput> and <computeroutput>length</computeroutput> are implicitely taken from the <emphasis>fold_compound</emphasis> object the method is bound to. Upon missing base pair probabilities, this method returns an empty string. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_from_probs()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="707" column="1" declfile="ViennaRNA/utils/structures.h" declline="707" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char vrna_bpp_symbol</definition>
        <argsstring>(const float *x)</argsstring>
        <name>vrna_bpp_symbol</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get a pseudo dot bracket notation for a given probability information. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="715" column="1" declfile="ViennaRNA/utils/structures.h" declline="715" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga27bea2c241564af53a065982183389df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_bp_stack</definition>
        <argsstring>(vrna_bp_stack_t *bp, unsigned int length)</argsstring>
        <name>vrna_db_from_bp_stack</name>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-backet/parenthesis structure from backtracking stack. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is capable to create dot-bracket structures from suboptimal structure prediction sensu M. Zuker</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bp</parametername>
</parameternamelist>
<parameterdescription>
<para>Base pair stack containing the traced base pairs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The secondary structure in dot-bracket notation as provided in the input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="730" column="1" declfile="ViennaRNA/utils/structures.h" declline="730" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga6708519ddf10f1420016ad47b5a3baea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_letter_structure</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, unsigned int length)</argsstring>
        <name>vrna_letter_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="735" column="1" declfile="ViennaRNA/utils/structures.h" declline="735" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_to_tree_string</definition>
        <argsstring>(const char *structure, unsigned int type)</argsstring>
        <name>vrna_db_to_tree_string</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Convert a Dot-Bracket structure string into tree string representation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function allows one to convert a secondary structure in dot-bracket notation into one of the various tree representations for secondary structures. The resulting tree is then represented as a string of parenthesis and node symbols, similar to to the Newick format.</para>
<para>Currently we support conversion into the following formats, denoted by the value of parameter <computeroutput>type:</computeroutput> <itemizedlist>
<listitem><para><ref refid="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" kindref="member">VRNA_STRUCTURE_TREE_HIT</ref> - Homeomorphically Irreducible <ref refid="structTree" kindref="compound">Tree</ref> (HIT) representation of a secondary structure. (See also <verbatim>embed:rst:inline :cite:t:`fontana:1993b` </verbatim>)</para>
</listitem><listitem><para><ref refid="group__struct__utils__tree_1ga549e259a963d77e2d5b7e14083fc016e" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_SHORT</ref> - (short) Coarse Grained representation of a secondary structure (same as <verbatim>embed:rst:inline :cite:t:`shapiro:1988` </verbatim>, but with root node <computeroutput>R</computeroutput> and without <computeroutput>S</computeroutput> nodes for the stems)</para>
</listitem><listitem><para><ref refid="group__struct__utils__tree_1ga4acd9991a0250ccd4cd44c4725b31927" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO</ref> - (full) Coarse Grained representation of a secondary structure (See also <verbatim>embed:rst:inline :cite:t:`shapiro:1988` </verbatim>)</para>
</listitem><listitem><para><ref refid="group__struct__utils__tree_1ga8666a10982a4f7a26892066ff07b4b48" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_EXT</ref> - (extended) Coarse Grained representation of a secondary structure (same as <verbatim>embed:rst:inline :cite:t:`shapiro:1988` </verbatim>, but external nodes denoted as <computeroutput>E</computeroutput> )</para>
</listitem><listitem><para><ref refid="group__struct__utils__tree_1ga91f2e3a3a502d5445fd7fe5983a5fe92" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT</ref> - (weighted) Coarse Grained representation of a secondary structure (same as <ref refid="group__struct__utils__tree_1ga8666a10982a4f7a26892066ff07b4b48" kindref="member">VRNA_STRUCTURE_TREE_SHAPIRO_EXT</ref> but with additional weights for number of unpaired nucleotides in loop, and number of pairs in stems)</para>
</listitem><listitem><para><ref refid="group__struct__utils__tree_1gab3b65489d1322da65d3a3e53242307ef" kindref="member">VRNA_STRUCTURE_TREE_EXPANDED</ref> - Expanded <ref refid="structTree" kindref="compound">Tree</ref> representation of a secondary structure.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="see"><para>sec_structure_representations_tree</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The null-terminated dot-bracket structure string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>A switch to determine the type of tree string representation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A tree representation of the input <computeroutput>structure</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="816" column="1" declfile="ViennaRNA/utils/structures.h" declline="816" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__tree_1gaa31da26a3f582ddc35a84ff1b9c0a2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_tree_string_unweight</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_tree_string_unweight</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Remove weights from a linear string tree representation of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function strips the weights of a linear string tree representation such as <computeroutput>HIT</computeroutput>, or Coarse Grained <ref refid="structTree" kindref="compound">Tree</ref> sensu <verbatim>embed:rst:inline :cite:t:`shapiro:1988` </verbatim></para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A linear string tree representation of a secondary structure with weights </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A linear string tree representation of a secondary structure without weights </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="832" column="1" declfile="ViennaRNA/utils/structures.h" declline="832" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__tree_1ga99d280319a7fd3f87e9f0d8c44520774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_tree_string_to_db</definition>
        <argsstring>(const char *tree)</argsstring>
        <name>vrna_tree_string_to_db</name>
        <param>
          <type>const char *</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Convert a linear tree string representation of a secondary structure back to Dot-Bracket notation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="warning"><para>This function only accepts <emphasis>Expanded</emphasis> and <emphasis>HIT</emphasis> tree representations!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string()</ref>, <ref refid="group__struct__utils__tree_1gab3b65489d1322da65d3a3e53242307ef" kindref="member">VRNA_STRUCTURE_TREE_EXPANDED</ref>, <ref refid="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" kindref="member">VRNA_STRUCTURE_TREE_HIT</ref>, sec_structure_representations_tree</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>A linear tree string representation of a secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A dot-bracket notation of the secondary structure provided in <computeroutput>tree</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="847" column="1" declfile="ViennaRNA/utils/structures.h" declline="847" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1gab61df77cf7949cd516181fce0c3d7d78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_plist_from_db</definition>
        <argsstring>(vrna_ep_t **pl, const char *struc, float pr)</argsstring>
        <name>assign_plist_from_db</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> from a dot-bracket string. </para>
        </briefdescription>
        <detaileddescription>
<para>The dot-bracket string is parsed and for each base pair an entry in the plist is created. The probability of each pair in the list is set by a function parameter.</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><xrefsect id="deprecated_1_deprecated000200"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist()</ref> instead</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability for each base pair </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="881" column="7" declfile="ViennaRNA/utils/structures.h" declline="881" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* pack_structure</definition>
        <argsstring>(const char *struc)</argsstring>
        <name>pack_structure</name>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <briefdescription>
<para>Pack secondary secondary structure, 5:1 compression using base 3 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a binary string encoding of the secondary structure using a 5:1 compression scheme. The string is NULL terminated and can therefore be used with standard string functions such as strcmp(). Useful for programs that need to keep many structures in memory.</para>
<para><xrefsect id="deprecated_1_deprecated000201"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> as a replacement</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The binary encoded structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="897" column="7" declfile="ViennaRNA/utils/structures.h" declline="897" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga071c6921efe1eb974f115ee6fefa3c39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* unpack_structure</definition>
        <argsstring>(const char *packed)</argsstring>
        <name>unpack_structure</name>
        <param>
          <type>const char *</type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>Unpack secondary structure previously packed with <ref refid="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" kindref="member">pack_structure()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Translate a compressed binary string produced by <ref refid="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" kindref="member">pack_structure()</ref> back into the familiar dot-bracket notation.</para>
<para><xrefsect id="deprecated_1_deprecated000202"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" kindref="member">vrna_db_unpack()</ref> as a replacement</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary encoded packed secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unpacked secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="911" column="7" declfile="ViennaRNA/utils/structures.h" declline="911" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga89c32307ee50a0026f4a3131fac0845a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* make_pair_table</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>make_pair_table</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Create a pair table of a secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a newly allocated table, such that table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure.</para>
<para><xrefsect id="deprecated_1_deprecated000203"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable()</ref> instead </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the created pair_table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="926" column="8" declfile="ViennaRNA/utils/structures.h" declline="926" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1gade238ede0090a5ca07f9b4dc0eea8a42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* make_pair_table_pk</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>make_pair_table_pk</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="929" column="8" declfile="ViennaRNA/utils/structures.h" declline="929" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gafeaa6d68eef3a99d0a7aa08aa91c6601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* copy_pair_table</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>copy_pair_table</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Get an exact copy of a pair table. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000204"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1ga2daefbbd6d9f8803731651882f54332d" kindref="member">vrna_ptable_copy()</ref> instead </para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the copy of &apos;pt&apos; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="941" column="8" declfile="ViennaRNA/utils/structures.h" declline="941" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga3c81b3967056c3888b8472b65fbb16f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* alimake_pair_table</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>alimake_pair_table</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pair table for snoop align</para>
<para><xrefsect id="deprecated_1_deprecated000205"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1ga1ee4cdcda1f57d32dcb38032116d335d" kindref="member">vrna_pt_ali_get()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="950" column="8" declfile="ViennaRNA/utils/structures.h" declline="950" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga9aa3bf3b4346bb7fb88efc154dd07a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>short *</type>
        <definition>short* make_pair_table_snoop</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>make_pair_table_snoop</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns a newly allocated table, such that: table[i]=j if (i.j) pair or 0 if i is unpaired, table[0] contains the length of the structure. The special pseudoknotted H/ACA-mRNA structure is taken into account. <xrefsect id="deprecated_1_deprecated000206"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils__pair__table_1gaef0f7e1a6c00c81a349973de53039dda" kindref="member">vrna_pt_snoop_get()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="960" column="8" declfile="ViennaRNA/utils/structures.h" declline="960" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga4358e89f64cc87a563b7ef3855f75bed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int *</type>
        <definition>int* make_loop_index_pt</definition>
        <argsstring>(short *pt)</argsstring>
        <name>make_loop_index_pt</name>
        <param>
          <type>short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="963" column="6" declfile="ViennaRNA/utils/structures.h" declline="963" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bp_distance</definition>
        <argsstring>(const char *str1, const char *str2)</argsstring>
        <name>bp_distance</name>
        <param>
          <type>const char *</type>
          <declname>str1</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str2</declname>
        </param>
        <briefdescription>
<para>Compute the &quot;base pair&quot; distance between two secondary structures s1 and s2. </para>
        </briefdescription>
        <detaileddescription>
<para>The sequences should have the same length. dist = number of base pairs in one structure but not in the other same as edit distance with open-pair close-pair as move-set</para>
<para><xrefsect id="deprecated_1_deprecated000207"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use vrna_bp_distance instead</para>
</xrefdescription></xrefsect><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str1</parametername>
</parameternamelist>
<parameterdescription>
<para>First structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str2</parametername>
</parameternamelist>
<parameterdescription>
<para>Second structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The base pair distance between str1 and str2 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="980" column="6" declfile="ViennaRNA/utils/structures.h" declline="980" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga578cd9712dee812fb1c58aa3cc489864" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int* make_referenceBP_array</definition>
        <argsstring>(short *reference_pt, unsigned int turn)</argsstring>
        <name>make_referenceBP_array</name>
        <param>
          <type>short *</type>
          <declname>reference_pt</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair count matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the number of basepairs of a reference structure for each interval [i,j] with i&lt;j. Access it via iindx!!!</para>
<para><xrefsect id="deprecated_1_deprecated000208"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1gab4c2a00c99ce1d612ffa5bde114eb96d" kindref="member">vrna_refBPcnt_matrix()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="993" column="15" declfile="ViennaRNA/utils/structures.h" declline="993" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gadd463184355d0803b6ee6e09f29182f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int *</type>
        <definition>unsigned int* compute_BPdifferences</definition>
        <argsstring>(short *pt1, short *pt2, unsigned int turn)</argsstring>
        <name>compute_BPdifferences</name>
        <param>
          <type>short *</type>
          <declname>pt1</declname>
        </param>
        <param>
          <type>short *</type>
          <declname>pt2</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>turn</declname>
        </param>
        <briefdescription>
<para>Make a reference base pair distance matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>Get an upper triangular matrix containing the base pair distance of two reference structures for each interval [i,j] with i&lt;j. Access it via iindx!!!</para>
<para><xrefsect id="deprecated_1_deprecated000209"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1ga5a27bd058183170afd4716f5b8ff511a" kindref="member">vrna_refBPdist_matrix()</ref> instead</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1007" column="15" declfile="ViennaRNA/utils/structures.h" declline="1007" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assign_plist_from_pr</definition>
        <argsstring>(vrna_ep_t **pl, FLT_OR_DBL *probs, int length, double cutoff)</argsstring>
        <name>assign_plist_from_pr</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> **</type>
          <declname>pl</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
<para>Create a vrna_ep_t from a probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para>The probability matrix given is parsed and all pair probabilities above the given threshold are used to create an entry in the plist</para>
<para>The end of the plist is marked by sequence positions i as well as j equal to 0. This condition should be used to stop looping over its entries</para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
<xrefsect id="deprecated_1_deprecated000210"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" kindref="member">vrna_plist_from_probs()</ref> instead!</para>
</xrefdescription></xrefsect></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">pl</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the vrna_ep_t that is to be created </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The probability matrix used for creating the plist </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the RNA sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>The cutoff value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1033" column="8" declfile="ViennaRNA/utils/structures.h" declline="1033" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gadf0ad2d46c9ca7b850437d1b79627a7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parenthesis_structure</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, int length)</argsstring>
        <name>parenthesis_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-backet/parenthesis structure from backtracking stack. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000211"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use vrna_parenthesis_structure() instead </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1046" column="7" declfile="ViennaRNA/utils/structures.h" declline="1046" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1gab9c5c8311bd5120900585d4fa50c2df0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parenthesis_zuker</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, int length)</argsstring>
        <name>parenthesis_zuker</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-backet/parenthesis structure from backtracking stack obtained by zuker suboptimal calculation in cofold.c. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000212"><xreftitle>Deprecated</xreftitle><xrefdescription><para>use vrna_parenthesis_zuker instead </para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="note"><para>This function is threadsafe </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1060" column="7" declfile="ViennaRNA/utils/structures.h" declline="1060" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils_1ga9298b97ac972401e3bbcf5afa5740060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void letter_structure</definition>
        <argsstring>(char *structure, vrna_bp_stack_t *bp, int length)</argsstring>
        <name>letter_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1gaa651bda42e7692f08cb603cd6834b0ee" kindref="member">vrna_bp_stack_t</ref> *</type>
          <declname>bp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1065" column="7" declfile="ViennaRNA/utils/structures.h" declline="1065" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void bppm_to_structure</definition>
        <argsstring>(char *structure, FLT_OR_DBL *pr, unsigned int length)</argsstring>
        <name>bppm_to_structure</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Create a dot-bracket like structure string from base pair probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000213"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1075" column="8" declfile="ViennaRNA/utils/structures.h" declline="1075" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__deprecated_1ga49962ad6242b8c628de6ca16bb831c1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char</type>
        <definition>char bppm_symbol</definition>
        <argsstring>(const float *x)</argsstring>
        <name>bppm_symbol</name>
        <param>
          <type>const float *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get a pseudo dot bracket notation for a given probability information. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="deprecated_1_deprecated000214"><xreftitle>Deprecated</xreftitle><xrefdescription><para>Use <ref refid="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" kindref="member">vrna_bpp_symbol()</ref> instead!</para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="1083" column="10" declfile="ViennaRNA/utils/structures.h" declline="1083" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Various utility- and helper-functions for secondary structure parsing, converting, etc. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" refkind="member"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_STRUCT_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_STRUCT_UTILS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_s</ref><sp/><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_t</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_elem_prob_s</ref><sp/><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_ALPHA<sp/><sp/><sp/><sp/>4U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_RND<sp/><sp/><sp/><sp/><sp/><sp/>8U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_CLY<sp/><sp/><sp/><sp/><sp/><sp/>16U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_ANG<sp/><sp/><sp/><sp/><sp/><sp/>32U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_SQR<sp/><sp/><sp/><sp/><sp/><sp/>64U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_DEFAULT<sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>(VRNA_BRACKETS_RND<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_CLY<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_ANG<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_SQR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_BRACKETS_ANY<sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>(VRNA_BRACKETS_RND<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_CLY<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_ANG<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_SQR<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/>VRNA_BRACKETS_ALPHA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="datastructures_2basic_8h" kindref="compound">ViennaRNA/datastructures/basic.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="137" refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*struc);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="152" refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" kindref="member">vrna_db_unpack</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*packed);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>options);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>target[3],</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="218" refid="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" kindref="member">vrna_db_from_ptable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="232" refid="group__struct__utils__dot__bracket_1ga6a51a36b9245d0bac868c5cd172b9611" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga6a51a36b9245d0bac868c5cd172b9611" kindref="member">vrna_db_from_plist</ref>(<ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/><sp/><sp/>*<ref refid="group__struct__utils__deprecated_1ga6341cbb704924824e0236c1dce791032" kindref="member">pairs</ref>,</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="243" refid="group__struct__utils__dot__bracket_1ga45360c09fb6d04d96e42dcccbb66015b" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga45360c09fb6d04d96e42dcccbb66015b" kindref="member">vrna_db_to_element_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="278" refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>options);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>dot-bracket<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="301" refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="324" refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>options);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="346" refid="group__struct__utils__pair__table_1gacca520048b24ec5a8978f4dafb4e4bf8" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1gacca520048b24ec5a8978f4dafb4e4bf8" kindref="member">vrna_pt_pk_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="356" refid="group__struct__utils__pair__table_1ga2daefbbd6d9f8803731651882f54332d" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1ga2daefbbd6d9f8803731651882f54332d" kindref="member">vrna_ptable_copy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="364" refid="group__struct__utils__pair__table_1ga1ee4cdcda1f57d32dcb38032116d335d" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1ga1ee4cdcda1f57d32dcb38032116d335d" kindref="member">vrna_pt_ali_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="375" refid="group__struct__utils__pair__table_1gaef0f7e1a6c00c81a349973de53039dda" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1gaef0f7e1a6c00c81a349973de53039dda" kindref="member">vrna_pt_snoop_get</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="395" refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>*ptable,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>options);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>pair<sp/>table<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="group__struct__utils__plist_1ga7c7484a8a1e6704b1aefaf589f3b27c1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_BASEPAIR<sp/><sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="group__struct__utils__plist_1gac91ab79e9feede5347103949ecf04f8a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_GQUAD<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="group__struct__utils__plist_1ga4d142e0187b8410b61ec2b168ed4513e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_H_MOTIF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="group__struct__utils__plist_1gadf5905518079b5495bce3394cd7afb9a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_I_MOTIF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="group__struct__utils__plist_1ga01d749cdb675dcdbac1dc5103378c699" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_UD_MOTIF<sp/><sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="group__struct__utils__plist_1ga36df728a95452170ca8684fc224299ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_STACK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="group__struct__utils__plist_1ga7961043acc4f183a7bc7cf2505a8c8b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_UNPAIRED<sp/><sp/><sp/><sp/><sp/><sp/>6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="453" refid="group__struct__utils__plist_1ga1bdc6494057e1b947a0832aa011af8c3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VRNA_PLIST_TYPE_TRIPLE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="structvrna__elem__prob__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_elem_prob_s</ref><sp/>{</highlight></codeline>
<codeline lineno="466" refid="structvrna__elem__prob__s_1a0f8bb11ded4e605f816d7ad92eb568f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s_1a0f8bb11ded4e605f816d7ad92eb568f6" kindref="member">i</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="467" refid="structvrna__elem__prob__s_1acada5be62ed6843334a918ca543f0c0d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s_1acada5be62ed6843334a918ca543f0c0d" kindref="member">j</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="468" refid="structvrna__elem__prob__s_1a9c09385582d8a7ab00485181f4e868b7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structvrna__elem__prob__s_1a9c09385582d8a7ab00485181f4e868b7" kindref="member">p</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="469" refid="structvrna__elem__prob__s_1a11715ffa51cb6277db7ebd3d9170d691" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structvrna__elem__prob__s_1a11715ffa51cb6277db7ebd3d9170d691" kindref="member">type</ref>;<sp/></highlight></codeline>
<codeline lineno="470"><highlight class="normal">};</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" refkind="member"><highlight class="normal"><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/>*<ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*struc,</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="507" refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" refkind="member"><highlight class="normal"><ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/>*<ref refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" kindref="member">vrna_plist_from_probs</ref>(<ref refid="structvrna__fc__s" kindref="compound">vrna_fold_compound_t</ref><sp/>*fc,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cut_off);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>pair<sp/>list<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="530" refid="group__struct__utils__wuss_1ga02ca70cffb2d864f7b2d95d92218bae0" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__wuss_1ga02ca70cffb2d864f7b2d95d92218bae0" kindref="member">vrna_db_from_WUSS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*wuss);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>WUSS<sp/>notation<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="555" refid="group__struct__utils__abstract__shapes_1gafca0add98ede22bf2c22608878c61b22" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__abstract__shapes_1gafca0add98ede22bf2c22608878c61b22" kindref="member">vrna_abstract_shapes</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>level);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="575" refid="group__struct__utils__abstract__shapes_1ga2fd59087e1c4e3d460e5823ba6d693b4" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__abstract__shapes_1ga2fd59087e1c4e3d460e5823ba6d693b4" kindref="member">vrna_abstract_shapes_pt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*pt,</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>abstract<sp/>shapes<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591" refid="structvrna__hx__s" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_s</ref><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>start;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>end;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>length;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>up5;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>up3;</highlight></codeline>
<codeline lineno="597"><highlight class="normal">};</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_t</ref><sp/>*</highlight></codeline>
<codeline lineno="607" refid="group__struct__utils__helix__list_1ga7ca60670fbbf23ae2ac9f63e5dbf8aef" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__helix__list_1ga7ca60670fbbf23ae2ac9f63e5dbf8aef" kindref="member">vrna_hx_from_ptable</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_t</ref><sp/>*</highlight></codeline>
<codeline lineno="614" refid="group__struct__utils__helix__list_1ga2fdaac8bb6c239c119ad5c20b145b7f2" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__helix__list_1ga2fdaac8bb6c239c119ad5c20b145b7f2" kindref="member">vrna_hx_merge</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structvrna__hx__s" kindref="compound">vrna_hx_t</ref><sp/>*list,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxdist);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>helix<sp/>list<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="626" refid="group__struct__utils_1ga03e15af299be0866ff21da880c74b92e" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1ga03e15af299be0866ff21da880c74b92e" kindref="member">vrna_loopidx_from_ptable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt1,</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt2);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666" refid="group__struct__utils__metrics_1ga65bdfbac6a16bf30286e8a3f7d15f60a" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__metrics_1ga65bdfbac6a16bf30286e8a3f7d15f60a" kindref="member">vrna_bp_distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str2);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">vrna_dist_mountain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*str1,</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*str2,</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>p);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>metrics<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="686" refid="group__struct__utils_1gab4c2a00c99ce1d612ffa5bde114eb96d" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1gab4c2a00c99ce1d612ffa5bde114eb96d" kindref="member">vrna_refBPcnt_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/>*reference_pt,</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>turn);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="698" refid="group__struct__utils_1ga5a27bd058183170afd4716f5b8ff511a" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1ga5a27bd058183170afd4716f5b8ff511a" kindref="member">vrna_refBPdist_matrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>*pt1,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/>*pt2,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>turn);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="707" refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/>*<ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>,</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715" refid="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1ga025bff1b27fa46534c8fae6980f64bb5" kindref="member">vrna_bpp_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="730" refid="group__struct__utils_1ga27bea2c241564af53a065982183389df" refkind="member"><highlight class="normal"><ref refid="group__struct__utils_1ga27bea2c241564af53a065982183389df" kindref="member">vrna_db_from_bp_stack</ref>(<ref refid="structvrna__bp__stack__s" kindref="compound">vrna_bp_stack_t</ref><sp/>*bp,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal">vrna_letter_structure(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__bp__stack__s" kindref="compound">vrna_bp_stack_t</ref><sp/>*bp,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>length);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="749" refid="group__struct__utils__tree_1ga3ad5609bc93ef20034c3ab989365c1f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_HIT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="group__struct__utils__tree_1ga549e259a963d77e2d5b7e14083fc016e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_SHAPIRO_SHORT<sp/><sp/><sp/>2U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="group__struct__utils__tree_1ga4acd9991a0250ccd4cd44c4725b31927" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_SHAPIRO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="770" refid="group__struct__utils__tree_1ga8666a10982a4f7a26892066ff07b4b48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_SHAPIRO_EXT<sp/><sp/><sp/><sp/><sp/>4U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="777" refid="group__struct__utils__tree_1ga91f2e3a3a502d5445fd7fe5983a5fe92" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_SHAPIRO_WEIGHT<sp/><sp/>5U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="783" refid="group__struct__utils__tree_1gab3b65489d1322da65d3a3e53242307ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/><sp/>VRNA_STRUCTURE_TREE_EXPANDED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>6U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="816" refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__tree_1ga56551ab7da64933a7230d29430f40cfe" kindref="member">vrna_db_to_tree_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="832" refid="group__struct__utils__tree_1gaa31da26a3f582ddc35a84ff1b9c0a2b0" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__tree_1gaa31da26a3f582ddc35a84ff1b9c0a2b0" kindref="member">vrna_tree_string_unweight</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure);</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="847" refid="group__struct__utils__tree_1ga99d280319a7fd3f87e9f0d8c44520774" refkind="member"><highlight class="normal"><ref refid="group__struct__utils__tree_1ga99d280319a7fd3f87e9f0d8c44520774" kindref="member">vrna_tree_string_to_db</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*tree);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>tree<sp/>representations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>VRNA_DISABLE_BACKWARD_COMPATIBILITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">/*###########################################*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="comment">/*#<sp/>deprecated<sp/>functions<sp/>below<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight><highlight class="comment">/*###########################################*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__part__func__global__deprecated_1gab61df77cf7949cd516181fce0c3d7d78" kindref="member">assign_plist_from_db</ref>(<ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/>**pl,</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*struc,</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>),</highlight></codeline>
<codeline lineno="881" refid="group__part__func__global__deprecated_1gab61df77cf7949cd516181fce0c3d7d78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_plist()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" kindref="member">pack_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*struc),</highlight></codeline>
<codeline lineno="897" refid="group__struct__utils__deprecated_1gac6dfa5e22928c087c6e09ff0054a7ced" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_db_pack()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1ga071c6921efe1eb974f115ee6fefa3c39" kindref="member">unpack_structure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*packed),</highlight></codeline>
<codeline lineno="911" refid="group__struct__utils__deprecated_1ga071c6921efe1eb974f115ee6fefa3c39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_db_unpack()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1ga89c32307ee50a0026f4a3131fac0845a" kindref="member">make_pair_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure),</highlight></codeline>
<codeline lineno="926" refid="group__struct__utils__deprecated_1ga89c32307ee50a0026f4a3131fac0845a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ptable()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*make_pair_table_pk(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure),</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ptable_from_string()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1gafeaa6d68eef3a99d0a7aa08aa91c6601" kindref="member">copy_pair_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt),</highlight></codeline>
<codeline lineno="941" refid="group__struct__utils__deprecated_1gafeaa6d68eef3a99d0a7aa08aa91c6601" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ptable_copy()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1ga3c81b3967056c3888b8472b65fbb16f5" kindref="member">alimake_pair_table</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure),</highlight></codeline>
<codeline lineno="950" refid="group__struct__utils__deprecated_1ga3c81b3967056c3888b8472b65fbb16f5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pt_ali_get()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1ga9aa3bf3b4346bb7fb88efc154dd07a79" kindref="member">make_pair_table_snoop</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*structure),</highlight></codeline>
<codeline lineno="960" refid="group__struct__utils__deprecated_1ga9aa3bf3b4346bb7fb88efc154dd07a79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_pt_snoop_get()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*make_loop_index_pt(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>*pt),</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_loopidx_from_ptable()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str1,</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str2),</highlight></codeline>
<codeline lineno="980" refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_bp_distance()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1ga578cd9712dee812fb1c58aa3cc489864" kindref="member">make_referenceBP_array</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*reference_pt,</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/>turn),</highlight></codeline>
<codeline lineno="993" refid="group__struct__utils__deprecated_1ga578cd9712dee812fb1c58aa3cc489864" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_refBPcnt_matrix()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*<ref refid="group__struct__utils__deprecated_1gadd463184355d0803b6ee6e09f29182f2" kindref="member">compute_BPdifferences</ref>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt1,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pt2,</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>turn),</highlight></codeline>
<codeline lineno="1007" refid="group__struct__utils__deprecated_1gadd463184355d0803b6ee6e09f29182f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_refBPdist_matrix()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" kindref="member">assign_plist_from_pr</ref>(<ref refid="structvrna__elem__prob__s" kindref="compound">vrna_ep_t</ref><sp/><sp/><sp/>**pl,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/><sp/>*probs,</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cutoff),</highlight></codeline>
<codeline lineno="1033" refid="group__part__func__global__deprecated_1ga1cc05aaa9b0e7df2d3887e98321c2030" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_plist_from_probs()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__struct__utils__deprecated_1gadf0ad2d46c9ca7b850437d1b79627a7e" kindref="member">parenthesis_structure</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__bp__stack__s" kindref="compound">vrna_bp_stack_t</ref><sp/>*bp,</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length),</highlight></codeline>
<codeline lineno="1046" refid="group__struct__utils__deprecated_1gadf0ad2d46c9ca7b850437d1b79627a7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_parenthesis_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__struct__utils__deprecated_1gab9c5c8311bd5120900585d4fa50c2df0" kindref="member">parenthesis_zuker</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__bp__stack__s" kindref="compound">vrna_bp_stack_t</ref><sp/>*bp,</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length),</highlight></codeline>
<codeline lineno="1060" refid="group__struct__utils__deprecated_1gab9c5c8311bd5120900585d4fa50c2df0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_parenthesis_zuker()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>letter_structure(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structvrna__bp__stack__s" kindref="compound">vrna_bp_stack_t</ref><sp/><sp/>*bp,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length),</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_letter_structure()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" kindref="member">bppm_to_structure</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*structure,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref><sp/><sp/><sp/>*<ref refid="fold__vars_8h_1ac98ec419070aee6831b44e5c700f090f" kindref="member">pr</ref>,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length),</highlight></codeline>
<codeline lineno="1075" refid="group__struct__utils__deprecated_1ga129d81c4a1ead793c5b2311333e03dfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_db_from_probs()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">DEPRECATED(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__struct__utils__deprecated_1ga49962ad6242b8c628de6ca16bb831c1d" kindref="member">bppm_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*x),</highlight></codeline>
<codeline lineno="1083" refid="group__struct__utils__deprecated_1ga49962ad6242b8c628de6ca16bb831c1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_bpp_symbol()<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/utils/structures.h"/>
  </compounddef>
</doxygen>
