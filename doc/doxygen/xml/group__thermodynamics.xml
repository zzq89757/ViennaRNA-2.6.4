<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__thermodynamics" kind="group">
    <compoundname>thermodynamics</compoundname>
    <title>Predicting various thermodynamic properties</title>
    <innerfile refid="equilibrium__probs_8h">equilibrium_probs.h</innerfile>
    <innerfile refid="heat__capacity_8h">heat_capacity.h</innerfile>
    <innerclass refid="structvrna__heat__capacity__s" prot="public">vrna_heat_capacity_s</innerclass>
      <sectiondef kind="user-defined">
      <header>Base pair probabilities and derived computations</header>
      <memberdef kind="function" id="group__thermodynamics_1gaf3733c2244379f9954365d021b50ef4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_pairing_probs</definition>
        <argsstring>(vrna_fold_compound_t *fc, char *structure)</argsstring>
        <name>vrna_pairing_probs</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="39" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="39" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1gad3f0c240512e6d43e2e4d4c2076021f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_mean_bp_distance_pr</definition>
        <argsstring>(int length, FLT_OR_DBL *pr)</argsstring>
        <name>vrna_mean_bp_distance_pr</name>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="group__data__structures_1ga31125aeace516926bf7f251f759b6126" kindref="member">FLT_OR_DBL</ref> *</type>
          <declname>pr</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance in the thermodynamic ensemble from a probability matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="21">\[ &lt;d&gt; = \sum_{a,b} p_a p_b d(S_a,S_b) \]</formula></para>
<para>this can be computed from the pair probs <formula id="22">$ p_{ij} $</formula> as</para>
<para><formula id="23">\[ &lt;d&gt; = \sum_{ij} p_{ij}(1-p_{ij}) \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the sequence </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pr</parametername>
</parameternamelist>
<parameterdescription>
<para>The matrix containing the base pair probabilities </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pair distance of the structure ensemble </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="61" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="61" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_mean_bp_distance</definition>
        <argsstring>(vrna_fold_compound_t *fc)</argsstring>
        <name>vrna_mean_bp_distance</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
<para>Get the mean base pair distance in the thermodynamic ensemble. </para>
        </briefdescription>
        <detaileddescription>
<para><formula id="21">\[ &lt;d&gt; = \sum_{a,b} p_a p_b d(S_a,S_b) \]</formula></para>
<para>this can be computed from the pair probs <formula id="24">$p_{ij}$</formula> as</para>
<para><formula id="23">\[ &lt;d&gt; = \sum_{ij} p_{ij}(1-p_{ij}) \]</formula></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold compound data structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mean pair distance of the structure ensemble</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000148"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput><ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mean_bp_distance()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="82" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="82" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_ensemble_defect_pt</definition>
        <argsstring>(vrna_fold_compound_t *fc, const short *pt)</argsstring>
        <name>vrna_ensemble_defect_pt</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Compute the Ensemble Defect for a given target structure provided as a <bold>vrna_ptable</bold>. </para>
        </briefdescription>
        <detaileddescription>
<para>Given a target structure <formula id="25">$s$</formula>, compute the average dissimilarity of a randomly drawn structure from the ensemble, i.e.:</para>
<para><formula id="26">\[ ED(s) = 1 - \frac{1}{n} \sum_{ij, (i,j) \in s} p_{ij} - \frac{1}{n} \sum_{i}(1 - s_i)q_i \]</formula></para>
<para>with sequence length <formula id="27">$n$</formula>, the probability <formula id="24">$p_{ij}$</formula> of a base pair <formula id="28">$(i,j)$</formula>, the probability <formula id="29">$q_i = 1 - \sum_j p_{ij}$</formula> of nucleotide <formula id="30">$i$</formula> being unpaired, and the indicator variable <formula id="31">$s_i = 1$</formula> if <formula id="32">$\exists (i,j) \in s$</formula>, and <formula id="33">$s_i = 0$</formula> otherwise.</para>
<para><simplesect kind="pre"><para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> input parameter <computeroutput>fc</computeroutput> must contain a valid base pair probability matrix. This means that partition function and base pair probabilities must have been computed using <computeroutput>fc</computeroutput> before execution of this function!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, vrna_pairing_probs(), <ref refid="group__thermodynamics_1gaaf197722d1faa86af5e7b4240acafdee" kindref="member">vrna_ensemble_defect()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fold_compound with pre-computed base pair probabilities </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>A pair table representing a target structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble defect with respect to the target structure, or -1. upon failure, e.g. pre-conditions are not met</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000149"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>ensemble_defect()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ensemble_defect()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="110" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="110" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1gaaf197722d1faa86af5e7b4240acafdee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_ensemble_defect</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure)</argsstring>
        <name>vrna_ensemble_defect</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the Ensemble Defect for a given target structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a wrapper around <bold><ref refid="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" kindref="member">vrna_ensemble_defect_pt()</ref></bold>. Given a target structure <formula id="25">$s$</formula>, compute the average dissimilarity of a randomly drawn structure from the ensemble, i.e.:</para>
<para><formula id="26">\[ ED(s) = 1 - \frac{1}{n} \sum_{ij, (i,j) \in s} p_{ij} - \frac{1}{n} \sum_{i}(1 - s_i)q_i \]</formula></para>
<para>with sequence length <formula id="27">$n$</formula>, the probability <formula id="24">$p_{ij}$</formula> of a base pair <formula id="28">$(i,j)$</formula>, the probability <formula id="29">$q_i = 1 - \sum_j p_{ij}$</formula> of nucleotide <formula id="30">$i$</formula> being unpaired, and the indicator variable <formula id="31">$s_i = 1$</formula> if <formula id="32">$\exists (i,j) \in s$</formula>, and <formula id="33">$s_i = 0$</formula> otherwise.</para>
<para><simplesect kind="pre"><para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> input parameter <computeroutput>fc</computeroutput> must contain a valid base pair probability matrix. This means that partition function and base pair probabilities must have been computed using <computeroutput>fc</computeroutput> before execution of this function!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref>, vrna_pairing_probs(), <ref refid="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" kindref="member">vrna_ensemble_defect_pt()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fold_compound with pre-computed base pair probabilities </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>A target structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The ensemble defect with respect to the target structure, or -1. upon failure, e.g. pre-conditions are not met</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000150"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>ensemble_defect()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. Note that the SWIG wrapper takes a structure in dot-bracket notation and converts it into a pair table using <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>. The resulting pair table is then internally passed to <ref refid="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" kindref="member">vrna_ensemble_defect_pt()</ref>. To control which kind of matching brackets will be used during conversion, the optional argument <computeroutput>options</computeroutput> can be used. See also the description of <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> for available options. (default: <computeroutput>VRNA_BRACKETS_RND</computeroutput>). See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ensemble_defect()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="140" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="140" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1ga4ec346141028c7bcd15bc235c408b6e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * vrna_positional_entropy</definition>
        <argsstring>(vrna_fold_compound_t *fc)</argsstring>
        <name>vrna_positional_entropy</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <briefdescription>
<para>Compute a vector of positional entropies. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes the positional entropies from base pair probabilities as</para>
<para><formula id="34">\[ S(i) = - \sum_j p_{ij} \log(p_{ij}) - q_i \log(q_i) \]</formula></para>
<para>with unpaired probabilities <formula id="35">$ q_i = 1 - \sum_j p_{ij} $</formula>.</para>
<para>Low entropy regions have little structural flexibility and the reliability of the predicted structure is high. High entropy implies many structural alternatives. While these alternatives may be functionally important, they make structure prediction more difficult and thus less reliable.</para>
<para><simplesect kind="pre"><para>This function requires pre-computed base pair probabilities! Thus, <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> must be called beforehand.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>A fold_compound with pre-computed base pair probabilities </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A 1-based vector of positional entropies <formula id="36">$ S(i) $</formula>. (position 0 contains the sequence length)</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000151"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>positional_entropy()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.positional_entropy()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="169" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="169" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1gaa687ae9f56f5cedba1e863cd6d54af43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
        <definition>vrna_ep_t* vrna_stack_prob</definition>
        <argsstring>(vrna_fold_compound_t *fc, double cutoff)</argsstring>
        <name>vrna_stack_prob</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff</declname>
        </param>
        <briefdescription>
<para>Compute stacking probabilities. </para>
        </briefdescription>
        <detaileddescription>
<para>For each possible base pair <formula id="28">$(i,j)$</formula>, compute the probability of a stack <formula id="28">$(i,j)$</formula>, <formula id="37">$(i+1, j-1)$</formula>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold compound data structure with precomputed base pair probabilities </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cutoff</parametername>
</parameternamelist>
<parameterdescription>
<para>A cutoff value that limits the output to stacks with <formula id="38">$ p &gt; \textrm{cutoff} $</formula>. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of stacks with enclosing base pair <formula id="28">$(i,j)$</formula> and probabiltiy <formula id="39">$ p $</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="183" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="183" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Multimer probabilities computations</header>
      <memberdef kind="function" id="group__thermodynamics_1gaa1e39e73afb51fbaf4ae38f0c066c46b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_pf_dimer_probs</definition>
        <argsstring>(double FAB, double FA, double FB, vrna_ep_t *prAB, const vrna_ep_t *prA, const vrna_ep_t *prB, int Alength, const vrna_exp_param_t *exp_params)</argsstring>
        <name>vrna_pf_dimer_probs</name>
        <param>
          <type>double</type>
          <declname>FAB</declname>
        </param>
        <param>
          <type>double</type>
          <declname>FA</declname>
        </param>
        <param>
          <type>double</type>
          <declname>FB</declname>
        </param>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prAB</declname>
        </param>
        <param>
          <type>const <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prA</declname>
        </param>
        <param>
          <type>const <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>prB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Alength</declname>
        </param>
        <param>
          <type>const <ref refid="group__energy__parameters_1ga01d8b92fe734df8d79a6169482c7d8d8" kindref="member">vrna_exp_param_t</ref> *</type>
          <declname>exp_params</declname>
        </param>
        <briefdescription>
<para>Compute Boltzmann probabilities of dimerization without homodimers. </para>
        </briefdescription>
        <detaileddescription>
<para>Given the pair probabilities and free energies (in the null model) for a dimer AB and the two constituent monomers A and B, compute the conditional pair probabilities given that a dimer AB actually forms. Null model pair probabilities are given as a list as produced by <ref refid="group__part__func__global_1ga3d2a1167543c90edac4c95507e9d3383" kindref="member">vrna_plist_from_probs()</ref>, the dimer probabilities &apos;prAB&apos; are modified in place.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>FAB</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of dimer AB </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FA</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of monomer A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FB</parametername>
</parameternamelist>
<parameterdescription>
<para>free energy of monomer B </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prAB</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities for dimer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prA</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities monomer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prB</parametername>
</parameternamelist>
<parameterdescription>
<para>pair probabilities monomer </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Alength</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of molecule A </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exp_params</parametername>
</parameternamelist>
<parameterdescription>
<para>The precomputed Boltzmann factors </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="214" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="214" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Structure probability computations</header>
      <memberdef kind="function" id="group__thermodynamics_1ga882c35d9dd775c1275593b3b6a966bec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_pr_structure</definition>
        <argsstring>(vrna_fold_compound_t *fc, const char *structure)</argsstring>
        <name>vrna_pr_structure</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Compute the equilibrium probability of a particular secondary structure. </para>
        </briefdescription>
        <detaileddescription>
<para>The probability <formula id="40">$p(s)$</formula> of a particular secondary structure <formula id="25">$s$</formula> can be computed as</para>
<para><formula id="41">\[ p(s) = \frac{exp(-\beta E(s)}{Z} \]</formula></para>
<para>from the structures free energy <formula id="42">$E(s)$</formula> and the partition function</para>
<para><formula id="43">\[ Z = \sum_s exp(-\beta E(s)),\quad\mathrm{with}\quad\beta = \frac{1}{RT} \]</formula></para>
<para>where <formula id="44">$R$</formula> is the gas constant and <formula id="45">$T$</formula> the thermodynamic temperature.</para>
<para><simplesect kind="pre"><para>The fold compound <computeroutput>fc</computeroutput> must have went through a call to <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf()</ref> to fill the dynamic programming matrices with the corresponding partition function.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The fold compound data structure with precomputed partition function </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure to compute the probability for in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The probability of the input structure (range <formula id="46">$[0:1]$</formula>)</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000152"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>pr_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pr_structure()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="259" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="259" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1ga6a1e8a85e6fab2380ce235180beb85f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double vrna_pr_energy</definition>
        <argsstring>(vrna_fold_compound_t *fc, double e)</argsstring>
        <name>vrna_pr_energy</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="wrappers_1_wrappers000153"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>pr_energy()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pr_energy()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/equilibrium_probs.h" line="264" column="1" declfile="ViennaRNA/equilibrium_probs.h" declline="264" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basic heat capacity function interface</header>
      <memberdef kind="function" id="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__thermodynamics_1ga99dc703d840310177ecf7aedf72b4409" kindref="member">vrna_heat_capacity_t</ref> *</type>
        <definition>vrna_heat_capacity_t * vrna_heat_capacity</definition>
        <argsstring>(vrna_fold_compound_t *fc, float T_min, float T_max, float T_increment, unsigned int mpoints)</argsstring>
        <name>vrna_heat_capacity</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_max</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_increment</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mpoints</declname>
        </param>
        <briefdescription>
<para>Compute the specific heat for an RNA. </para>
        </briefdescription>
        <detaileddescription>
<para>This function computes an RNAs specific heat in a given temperature range from the partition function by numeric differentiation. The result is returned as a list of pairs of temperature in <deg/>C and specific heat in Kcal/(Mol*K).</para>
<para>Users can specify the temperature range for the computation from <computeroutput>T_min</computeroutput> to <computeroutput>T_max</computeroutput>, as well as the increment step size <computeroutput>T_increment</computeroutput>. The latter also determines how many times the partition function is computed. Finally, the parameter <computeroutput>mpoints</computeroutput> determines how smooth the curve should be. The algorithm itself fits a parabola to <formula id="51">$ 2 \cdot mpoints + 1 $</formula> data points to calculate 2nd derivatives. Increasing this parameter produces a smoother curve.</para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1ga19ef508fcc66ab80833aa2fe402d8927" kindref="member">vrna_heat_capacity_cb()</ref>, <ref refid="group__thermodynamics_1ga99dc703d840310177ecf7aedf72b4409" kindref="member">vrna_heat_capacity_t</ref>, <ref refid="structvrna__heat__capacity__s" kindref="compound">vrna_heat_capacity_s</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> with the RNA sequence to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Highest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_increment</parametername>
</parameternamelist>
<parameterdescription>
<para>Stepsize for temperature incrementation in <deg/>C (a reasonable choice might be 1<deg/>C) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of interpolation points to calculate 2nd derivative (a reasonable choice might be 2, min: 1, max: 100) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of pairs of temperatures and corresponding heat capacity or <emphasis>NULL</emphasis> upon any failure. The last entry of the list is indicated by a <bold>temperature</bold> field set to a value smaller than <computeroutput>T_min</computeroutput> </para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000107"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as overloaded method <computeroutput>heat_capacity()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. If the optional function arguments <computeroutput>T_min</computeroutput>, <computeroutput>T_max</computeroutput>, <computeroutput>T_increment</computeroutput>, and <computeroutput>mpoints</computeroutput> are omitted, they default to 0.0, 100.0, 1.0 and 2, respectively. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.heat_capacity()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="113" column="1" declfile="ViennaRNA/heat_capacity.h" declline="113" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__thermodynamics_1ga19ef508fcc66ab80833aa2fe402d8927" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_heat_capacity_cb</definition>
        <argsstring>(vrna_fold_compound_t *fc, float T_min, float T_max, float T_increment, unsigned int mpoints, vrna_heat_capacity_f cb, void *data)</argsstring>
        <name>vrna_heat_capacity_cb</name>
        <param>
          <type><ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> *</type>
          <declname>fc</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_max</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_increment</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mpoints</declname>
        </param>
        <param>
          <type><ref refid="group__thermodynamics_1gafa73325bee7e6b7c9d1732d70e67d65a" kindref="member">vrna_heat_capacity_f</ref></type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Compute the specific heat for an RNA (callback variant) </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity()</ref>, this function computes an RNAs specific heat in a given temperature range from the partition function by numeric differentiation. Instead of returning a list of temperature/specific heat pairs, however, this function returns the individual results through a callback mechanism. The provided function will be called for each result and passed the corresponding temperature and specific heat values along with the arbitrary data as provided through the <computeroutput>data</computeroutput> pointer argument.</para>
<para>Users can specify the temperature range for the computation from <computeroutput>T_min</computeroutput> to <computeroutput>T_max</computeroutput>, as well as the increment step size <computeroutput>T_increment</computeroutput>. The latter also determines how many times the partition function is computed. Finally, the parameter <computeroutput>mpoints</computeroutput> determines how smooth the curve should be. The algorithm itself fits a parabola to <formula id="51">$ 2 \cdot mpoints + 1 $</formula> data points to calculate 2nd derivatives. Increasing this parameter produces a smoother curve.</para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity()</ref>, <ref refid="group__thermodynamics_1gafa73325bee7e6b7c9d1732d70e67d65a" kindref="member">vrna_heat_capacity_f</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fc</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref> with the RNA sequence to analyze </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Highest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_increment</parametername>
</parameternamelist>
<parameterdescription>
<para>Stepsize for temperature incrementation in <deg/>C (a reasonable choice might be 1<deg/>C) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of interpolation points to calculate 2nd derivative (a reasonable choice might be 2, min: 1, max: 100) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>The user-defined callback function that receives the individual results </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>An arbitrary data structure that will be passed to the callback in conjunction with the results </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Returns 0 upon failure, and non-zero otherwise</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000108"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is attached as method <computeroutput>heat_capacity_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.heat_capacity_cb()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="150" column="1" declfile="ViennaRNA/heat_capacity.h" declline="150" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Simplified heat capacity computation</header>
      <memberdef kind="function" id="group__thermodynamics_1ga0c2664e15dded704d805a9d2a625ff21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__thermodynamics_1ga99dc703d840310177ecf7aedf72b4409" kindref="member">vrna_heat_capacity_t</ref> *</type>
        <definition>vrna_heat_capacity_t * vrna_heat_capacity_simple</definition>
        <argsstring>(const char *sequence, float T_min, float T_max, float T_increment, unsigned int mpoints)</argsstring>
        <name>vrna_heat_capacity_simple</name>
        <param>
          <type>const char *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_min</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_max</declname>
        </param>
        <param>
          <type>float</type>
          <declname>T_increment</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>mpoints</declname>
        </param>
        <briefdescription>
<para>Compute the specific heat for an RNA (simplified variant) </para>
        </briefdescription>
        <detaileddescription>
<para>Similar to <ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity()</ref>, this function computes an RNAs specific heat in a given temperature range from the partition function by numeric differentiation. This simplified version, however, only requires the RNA sequence as input instead of a vrna_fold_compound_t data structure. The result is returned as a list of pairs of temperature in <deg/>C and specific heat in Kcal/(Mol*K).</para>
<para>Users can specify the temperature range for the computation from <computeroutput>T_min</computeroutput> to <computeroutput>T_max</computeroutput>, as well as the increment step size <computeroutput>T_increment</computeroutput>. The latter also determines how many times the partition function is computed. Finally, the parameter <computeroutput>mpoints</computeroutput> determines how smooth the curve should be. The algorithm itself fits a parabola to <formula id="51">$ 2 \cdot mpoints + 1 $</formula> data points to calculate 2nd derivatives. Increasing this parameter produces a smoother curve.</para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity()</ref>, <ref refid="group__thermodynamics_1ga19ef508fcc66ab80833aa2fe402d8927" kindref="member">vrna_heat_capacity_cb()</ref>, <ref refid="group__thermodynamics_1ga99dc703d840310177ecf7aedf72b4409" kindref="member">vrna_heat_capacity_t</ref>, <ref refid="structvrna__heat__capacity__s" kindref="compound">vrna_heat_capacity_s</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>The RNA sequence input (must be uppercase) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_min</parametername>
</parameternamelist>
<parameterdescription>
<para>Lowest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Highest temperature in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T_increment</parametername>
</parameternamelist>
<parameterdescription>
<para>Stepsize for temperature incrementation in <deg/>C (a reasonable choice might be 1<deg/>C) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mpoints</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of interpolation points to calculate 2nd derivative (a reasonable choice might be 2, min: 1, max: 100) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A list of pairs of temperatures and corresponding heat capacity or <emphasis>NULL</emphasis> upon any failure. The last entry of the list is indicated by a <bold>temperature</bold> field set to a value smaller than <computeroutput>T_min</computeroutput> </para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000109"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as overloaded function <computeroutput>heat_capacity()</computeroutput>. If the optional function arguments <computeroutput>T_min</computeroutput>, <computeroutput>T_max</computeroutput>, <computeroutput>T_increment</computeroutput>, and <computeroutput>mpoints</computeroutput> are omitted, they default to 0.0, 100.0, 1.0 and 2, respectively. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.head_capacity()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="194" column="1" declfile="ViennaRNA/heat_capacity.h" declline="194" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__thermodynamics_1gafa73325bee7e6b7c9d1732d70e67d65a" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* vrna_heat_capacity_f) (float temp, float heat_capacity, void *data)</definition>
        <argsstring>)(float temp, float heat_capacity, void *data)</argsstring>
        <name>vrna_heat_capacity_f</name>
        <briefdescription>
<para>The callback for heat capacity predictions. </para>
        </briefdescription>
        <detaileddescription>
<para><xrefsect id="callbacks_1_callbacks000004"><xreftitle>Notes on Callback Functions</xreftitle><xrefdescription><para><parblock><para>This function will be called for each evaluated temperature in the heat capacity prediction. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
<para><simplesect kind="see"><para><ref refid="group__thermodynamics_1ga19ef508fcc66ab80833aa2fe402d8927" kindref="member">vrna_heat_capacity_cb()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>temp</parametername>
</parameternamelist>
<parameterdescription>
<para>The current temperature this results corresponds to in <deg/>C </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>heat_capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>The heat capacity in Kcal/(Mol * K) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>Some arbitrary data pointer passed through by the function executing the callback </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="54" column="9" bodyfile="ViennaRNA/heat_capacity.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__thermodynamics_1ga18316e4657502e9203931f924d93732f" prot="public" static="no">
        <type>void()</type>
        <definition>typedef void() vrna_heat_capacity_callback(float temp, float heat_capacity, void *data)</definition>
        <argsstring>(float temp, float heat_capacity, void *data)</argsstring>
        <name>vrna_heat_capacity_callback</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="61" column="10" bodyfile="ViennaRNA/heat_capacity.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__thermodynamics_1ga99dc703d840310177ecf7aedf72b4409" prot="public" static="no">
        <type>struct <ref refid="structvrna__heat__capacity__s" kindref="compound">vrna_heat_capacity_s</ref></type>
        <definition>typedef struct vrna_heat_capacity_s vrna_heat_capacity_t</definition>
        <argsstring></argsstring>
        <name>vrna_heat_capacity_t</name>
        <briefdescription>
<para>A single result from heat capacity computations. </para>
        </briefdescription>
        <detaileddescription>
<para>This is a convenience typedef for <ref refid="structvrna__heat__capacity__s" kindref="compound">vrna_heat_capacity_s</ref>, i.e. results as obtained from <ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/heat_capacity.h" line="61" column="10" bodyfile="ViennaRNA/heat_capacity.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
