<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="group__struct__utils__dot__bracket" kind="group">
    <compoundname>struct_utils_dot_bracket</compoundname>
    <title>Dot-Bracket Notation of Secondary Structures</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_pack</definition>
        <argsstring>(const char *struc)</argsstring>
        <name>vrna_db_pack</name>
        <param>
          <type>const char *</type>
          <declname>struc</declname>
        </param>
        <briefdescription>
<para>Pack secondary secondary structure, 5:1 compression using base 3 encoding. </para>
        </briefdescription>
        <detaileddescription>
<para>Returns a binary string encoding of the secondary structure using a 5:1 compression scheme. The string is NULL terminated and can therefore be used with standard string functions such as strcmp(). Useful for programs that need to keep many structures in memory.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" kindref="member">vrna_db_unpack()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>struc</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The binary encoded structure </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="137" column="1" declfile="ViennaRNA/utils/structures.h" declline="137" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga6490adff857d84ce06e6f379ae3a4512" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_unpack</definition>
        <argsstring>(const char *packed)</argsstring>
        <name>vrna_db_unpack</name>
        <param>
          <type>const char *</type>
          <declname>packed</declname>
        </param>
        <briefdescription>
<para>Unpack secondary structure previously packed with <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> </para>
        </briefdescription>
        <detaileddescription>
<para>Translate a compressed binary string produced by <ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref> back into the familiar dot-bracket notation.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga55c4783060a1464f862f858d5599c9e1" kindref="member">vrna_db_pack()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>packed</parametername>
</parameternamelist>
<parameterdescription>
<para>The binary encoded packed secondary structure </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The unpacked secondary structure in dot-bracket notation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="152" column="1" declfile="ViennaRNA/utils/structures.h" declline="152" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_db_flatten</definition>
        <argsstring>(char *structure, unsigned int options)</argsstring>
        <name>vrna_db_flatten</name>
        <param>
          <type>char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Substitute pairs of brackets in a string with parenthesis. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to replace brackets of unusual types, such as angular brackets <computeroutput>&lt;&gt;</computeroutput> , to dot-bracket format. The <computeroutput>options</computeroutput> parameter is used tpo specify which types of brackets will be replaced by round parenthesis <computeroutput></computeroutput>() .</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure string where brackets are flattened in-place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be flattened out</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="wrappers_1_wrappers000167"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function flattens an input structure string in-place! The second parameter is optional and defaults to <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>.</para>
<para>An overloaded version of this function exists, where an additional second parameter can be passed to specify the target brackets, i.e. the type of matching pair characters all brackets will be flattened to. Therefore, in the scripting language interface this function is a replacement for <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="171" column="1" declfile="ViennaRNA/utils/structures.h" declline="171" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_db_flatten_to</definition>
        <argsstring>(char *string, const char target[3], unsigned int options)</argsstring>
        <name>vrna_db_flatten_to</name>
        <param>
          <type>char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>const char</type>
          <declname>target</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Substitute pairs of brackets in a string with another type of pair characters. </para>
        </briefdescription>
        <detaileddescription>
<para>This function can be used to replace brackets in a structure annotation string, such as square brackets <computeroutput></computeroutput>[] , to another type of pair characters, e.g. angular brackets <computeroutput>&lt;&gt;</computeroutput> .</para>
<para>The <computeroutput>target</computeroutput> array must contain a character for the &apos;pair open&apos; annotation at position 0, and one for &apos;pair close&apos; at position 1. T<computeroutput>options</computeroutput> parameter is used to specify which types of brackets will be replaced by the new pairs.</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>The structure string where brackets are flattened in-place </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>The new pair characters the string will be flattened to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be flattened out</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<xrefsect id="wrappers_1_wrappers000168"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded version of <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="195" column="1" declfile="ViennaRNA/utils/structures.h" declline="195" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga4211b1925514adaf0b9ef29cf9144833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_ptable</definition>
        <argsstring>(const short *pt)</argsstring>
        <name>vrna_db_from_ptable</name>
        <param>
          <type>const short *</type>
          <declname>pt</declname>
        </param>
        <briefdescription>
<para>Convert a pair table into dot-parenthesis notation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function also converts pair table formatted structures that contain pseudoknots. Non-nested base pairs result in additional pairs of parenthesis and brackets within the resulting dot-parenthesis string. The following pairs are awailable: (), []. {}. &lt;&gt;, as well as pairs of matching upper-/lower-case characters from the alphabet A-Z.</para>
<para><simplesect kind="note"><para>In cases where the level of non-nested base pairs exceeds the maximum number of 30 different base pair indicators (4 parenthesis/brackets, 26 matching characters), a warning is printed and the remaining base pairs are left out from the conversion.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>The pair table to be copied </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A char pointer to the dot-bracket string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="218" column="1" declfile="ViennaRNA/utils/structures.h" declline="218" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga6a51a36b9245d0bac868c5cd172b9611" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_from_plist</definition>
        <argsstring>(vrna_ep_t *pairs, unsigned int n)</argsstring>
        <name>vrna_db_from_plist</name>
        <param>
          <type><ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> *</type>
          <declname>pairs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Convert a list of base pairs into dot-bracket notation. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__plist_1gaf002d69024d709744664a8b9ca3dd77d" kindref="member">vrna_plist()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pairs</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="group__struct__utils__plist_1gab9ac98ab55ded9fb90043b024b915aca" kindref="member">vrna_ep_t</ref> containing the pairs to be included in the dot-bracket string </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the structure (number of nucleotides) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The dot-bracket string containing the provided base pairs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="232" column="1" declfile="ViennaRNA/utils/structures.h" declline="232" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga45360c09fb6d04d96e42dcccbb66015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char* vrna_db_to_element_string</definition>
        <argsstring>(const char *structure)</argsstring>
        <name>vrna_db_to_element_string</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <briefdescription>
<para>Convert a secondary structure in dot-bracket notation to a nucleotide annotation of loop contexts. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>The secondary structure in dot-bracket notation </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A string annotating each nucleotide according to it&apos;s structural context </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="243" column="1" declfile="ViennaRNA/utils/structures.h" declline="243" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * vrna_db_pk_remove</definition>
        <argsstring>(const char *structure, unsigned int options)</argsstring>
        <name>vrna_db_pk_remove</name>
        <param>
          <type>const char *</type>
          <declname>structure</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Remove pseudo-knots from an input structure. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes pseudo-knots from an input structure by determining the minimum number of base pairs that need to be removed to make the structure pseudo-knot free.</para>
<para>To accomplish that, we use a dynamic programming algorithm similar to the Nussinov maxmimum matching approach.</para>
<para>The input structure must be in a dot-bracket string like form where crossing base pairs are denoted by the use of additional types of matching brackets, e.g. <computeroutput>&lt;&gt;</computeroutput>, <computeroutput>{}</computeroutput>, <computeroutput></computeroutput>[], <computeroutput>{}</computeroutput>. Furthermore, crossing pairs may be annotated by matching uppercase/lowercase letters from the alphabet <computeroutput>A-Z</computeroutput>. For the latter, the uppercase letter must be the 5&apos; and the lowercase letter the 3&apos; nucleotide of the base pair. The actual type of brackets to be recognized by this function must be specifed through the <computeroutput>options</computeroutput> parameter.</para>
<para><simplesect kind="note"><para>Brackets in the input structure string that are not covered by the <computeroutput>options</computeroutput> bitmask will be silently ignored!</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>, <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref>, <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref>, <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>, <ref refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" kindref="member">VRNA_BRACKETS_ALPHA</ref>, <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>, <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>structure</parametername>
</parameternamelist>
<parameterdescription>
<para>Input structure in dot-bracket format that may include pseudo-knots </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>A bitmask to specify which types of brackets should be processed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The input structure devoid of pseudo-knots in dot-bracket notation</para>
</simplesect>
<xrefsect id="wrappers_1_wrappers000169"><xreftitle>SWIG Wrapper Notes</xreftitle><xrefdescription><para><parblock><para>This function is available as an overloaded function <computeroutput>db_pk_remove()</computeroutput> where the optional second parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_pk_remove()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</xrefdescription></xrefsect></para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="278" column="1" declfile="ViennaRNA/utils/structures.h" declline="278" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" prot="public" static="no">
        <name>VRNA_BRACKETS_ALPHA</name>
        <initializer>4U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using uppercase/lowercase letters from the latin alphabet. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="52" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" prot="public" static="no">
        <name>VRNA_BRACKETS_RND</name>
        <initializer>8U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using round brackets (parenthesis), <computeroutput>()</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="60" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" prot="public" static="no">
        <name>VRNA_BRACKETS_CLY</name>
        <initializer>16U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using curly brackets, <computeroutput>{}</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="68" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" prot="public" static="no">
        <name>VRNA_BRACKETS_ANG</name>
        <initializer>32U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using angular brackets, <computeroutput>&lt;&gt;</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="76" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" prot="public" static="no">
        <name>VRNA_BRACKETS_SQR</name>
        <initializer>64U</initializer>
        <briefdescription>
<para>Bitflag to indicate secondary structure notations using square brackets, <computeroutput>[]</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="84" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" prot="public" static="no">
        <name>VRNA_BRACKETS_DEFAULT</name>
        <initializer>  (<ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref>)</initializer>
        <briefdescription>
<para>Default bitmask to indicate secondary structure notation using any pair of brackets. </para>
        </briefdescription>
        <detaileddescription>
<para>This set of matching brackets/parenthesis is always nested, i.e. pseudo-knot free, in WUSS format. However, in general different kinds of brackets are mostly used for annotating pseudo-knots. Thus special care has to be taken to remove pseudo-knots if this bitmask is used in functions that return secondary structures without pseudo-knots!</para>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove()</ref> <ref refid="group__struct__utils__pair__table_1gae8f31c859b48f97b8af889e914e4d040" kindref="member">vrna_pt_pk_remove()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="98" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" prot="public" static="no">
        <name>VRNA_BRACKETS_ANY</name>
        <initializer>  (<ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1gaf41be40e79cb756c4e0bb8edb4d803d2" kindref="member">VRNA_BRACKETS_CLY</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga863e03f7f73f10fc9bbcbefbdda4bec8" kindref="member">VRNA_BRACKETS_ANG</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga60525d61d7496eeea490a37f3d6bf757" kindref="member">VRNA_BRACKETS_SQR</ref> | \
   <ref refid="group__struct__utils__dot__bracket_1ga7e3f630af8d69bb0e917145aacf2f96d" kindref="member">VRNA_BRACKETS_ALPHA</ref>)</initializer>
        <briefdescription>
<para>Bitmask to indicate secondary structure notation using any pair of brackets or uppercase/lowercase alphabet letters. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove()</ref>, <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>, <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/utils/structures.h" line="111" column="9" bodyfile="ViennaRNA/utils/structures.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
