<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="wrappers" kind="page">
    <compoundname>wrappers</compoundname>
    <title>SWIG Wrapper Notes</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><variablelist>
<varlistentry><term>Global <ref refid="group__struct__utils__abstract__shapes_1gafca0add98ede22bf2c22608878c61b22" kindref="member">vrna_abstract_shapes</ref>  (const char *structure, unsigned int level)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000172"/> <parblock><para>This function is available as an overloaded function <computeroutput>abstract_shapes()</computeroutput> where the optional second parameter <computeroutput>level</computeroutput> defaults to 5. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.abstract_shapes()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__abstract__shapes_1ga2fd59087e1c4e3d460e5823ba6d693b4" kindref="member">vrna_abstract_shapes_pt</ref>  (const short *pt, unsigned int level)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000173"/> <parblock><para>This function is available as an overloaded function <computeroutput>abstract_shapes()</computeroutput> where the optional second parameter <computeroutput>level</computeroutput> defaults to 5. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.abstract_shapes()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga6c9d3bef3e92c6d423ffac9f981418c1" kindref="member">vrna_alifold</ref>  (const char **sequences, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000115"/> <parblock><para>This function is available as function <computeroutput><ref refid="group__mfe__global__deprecated_1ga4cf00f0659e5f0480335d69e797f05b1" kindref="member">alifold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.alifold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1gaa43d3de352753529a4578cb02cd8bc52" kindref="member">vrna_aliLfold</ref>  (const char **alignment, int maxdist, FILE *fp)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000126"/> <parblock><para>This function is available as overloaded function <computeroutput>aliLfold()</computeroutput> in the global namespace. The parameter <computeroutput>fp</computeroutput> defaults to <computeroutput>NULL</computeroutput> and may be omitted. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.aliLfold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1gae9b2e312c316961d4a067f9b789cc9d7" kindref="member">vrna_aliLfold_cb</ref>  (const char **alignment, int maxdist, vrna_mfe_window_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000127"/> <parblock><para>This function is available as overloaded function <computeroutput>aliLfold_cb()</computeroutput> in the global namespace. The parameter <computeroutput>data</computeroutput> defaults to <computeroutput>NULL</computeroutput> and may be omitted. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.aliLfold_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1gacd02c66d9e6f8dd5318f4fca0dc76cba" kindref="member">vrna_aln_consensus_mis</ref>  (const char **alignment, const vrna_md_t *md_p)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000004"/> <parblock><para>This function is available as overloaded function <computeroutput>aln_consensus_mis()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_consensus_mis()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1gac6a33fa856d66dcb6f5d40ce0b61d7c7" kindref="member">vrna_aln_consensus_sequence</ref>  (const char **alignment, const vrna_md_t *md_p)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000003"/> <parblock><para>This function is available as overloaded function <computeroutput>aln_consensus_sequence()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_consensus_sequence()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1gaa12b481a7e7b965ef2eb1bcc4399e759" kindref="member">vrna_aln_conservation_col</ref>  (const char **alignment, const vrna_md_t *md_p, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000002"/> <parblock><para>This function is available as overloaded function <computeroutput>aln_conservation_col()</computeroutput> where the last two parameters may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>, and <computeroutput>options</computeroutput> = <ref refid="group__aln__utils_1ga1e659227c9fc077d29989f576f129000" kindref="member">VRNA_MEASURE_SHANNON_ENTROPY</ref>, respectively. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.aln_conservation_col()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1gab6f16a2ea93f3bfd4d089cc8d448bb16" kindref="member">vrna_aln_conservation_struct</ref>  (const char **alignment, const char *structure, const vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000001"/> <parblock><para>This function is available as overloaded function <computeroutput>aln_conservation_struct()</computeroutput> where the last parameter <computeroutput>md</computeroutput> may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_conservation_struct()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1gade5a1f2d16e7fd9a57b37d8514f08e8e" kindref="member">vrna_aln_mpi</ref>  (const char **alignment)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000005"/> <parblock><para>This function is available as function <computeroutput>aln_mpi()</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_mpi()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__aln__utils_1ga697bf6f44356918cceeff4ed8ee885e1" kindref="member">vrna_aln_pscore</ref>  (const char **alignment, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000006"/> <parblock><para>This function is available as overloaded function <computeroutput>aln_pscore()</computeroutput> where the last parameter may be omitted, indicating <computeroutput>md</computeroutput> = <computeroutput>NULL</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:func:`RNA.aln_pscore()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__backtracking_1gaaee7355f060fe9eed8e687522567715e" kindref="member">vrna_backtrack5</ref>  (vrna_fold_compound_t *fc, unsigned int length, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000112"/> <parblock><para>This function is attached as overloaded method <computeroutput>backtrack()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>length</computeroutput> defaults to the total length of the RNA sequence and may be omitted. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.backtrack()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1ga6dbe173d4dbbe4faea0baaa6d03b3102" kindref="member">vrna_boustrophedon</ref>  (size_t start, size_t end)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000032"/> <parblock><para>This function is available as overloaded global function <computeroutput>boustrophedon()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.boustrophedon()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1ga9093b53bb7eaaa9b5a8972ac87082d32" kindref="member">vrna_boustrophedon_pos</ref>  (size_t start, size_t end, size_t pos)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000031"/> <parblock><para>This function is available as overloaded global function <computeroutput>boustrophedon()</computeroutput>. Omitting the <computeroutput>pos</computeroutput> argument yields the entire sequence from <computeroutput>start</computeroutput> to <computeroutput>end</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.boustrophedon()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__metrics_1ga65bdfbac6a16bf30286e8a3f7d15f60a" kindref="member">vrna_bp_distance</ref>  (const char *str1, const char *str2)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000175"/> <parblock><para>This function is available as an overloaded method <bold><ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance()</ref></bold>. Note that the SWIG wrapper takes two structure in dot-bracket notation and converts them into pair tables using <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>. The resulting pair tables are then internally passed to <ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt()</ref>. To control which kind of matching brackets will be used during conversion, the optional argument <computeroutput>options</computeroutput> can be used. See also the description of <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> for available options. (default: <bold>VRNA_BRACKETS_RND</bold>). See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.bp_distance()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__metrics_1gae08cbd5ff44b7d77a271ceb79c12cfef" kindref="member">vrna_bp_distance_pt</ref>  (const short *pt1, const short *pt2)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000174"/> <parblock><para>This function is available as an overloaded method <bold><ref refid="group__struct__utils__deprecated_1ga6ebbcd29a754f0e4f1a66d1fd84184db" kindref="member">bp_distance()</ref></bold>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.bp_distance()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga17a1be7490468c29c335ba9bffacba53" kindref="member">vrna_circalifold</ref>  (const char **sequences, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000116"/> <parblock><para>This function is available as function <computeroutput><ref refid="group__mfe__global__deprecated_1gadbd3b0b1c144cbfb4efe704b2b260f96" kindref="member">circalifold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.circalifold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1gaf973483d8acbc8cc9aacfc8a9b7f0074" kindref="member">vrna_circfold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000114"/> <parblock><para>This function is available as function <computeroutput><ref refid="group__mfe__global__deprecated_1ga4ac63ab3e8d9a80ced28b8052d94e423" kindref="member">circfold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.circfold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga9ef3a297201dbf838a8daff2b45c0c82" kindref="member">vrna_cofold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000117"/> <parblock><para>This function is available as function <computeroutput><ref refid="group__mfe__global__deprecated_1gabc8517f22cfe70595ee81fc837910d52" kindref="member">cofold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.cofold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__command__files_1ga9232cb0efe364086a8a5ee1449e537ba" kindref="member">vrna_commands_apply</ref>  (vrna_fold_compound_t *fc, vrna_cmd_t commands, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000035"/> <parblock><para>This function is attached as method <computeroutput>commands_apply()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.commands_apply()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten</ref>  (char *structure, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000167"/> <parblock><para>This function flattens an input structure string in-place! The second parameter is optional and defaults to <ref refid="group__struct__utils__dot__bracket_1ga559ebf76b1b289f85309f4206e99aa1a" kindref="member">VRNA_BRACKETS_DEFAULT</ref>.</para>
<para>An overloaded version of this function exists, where an additional second parameter can be passed to specify the target brackets, i.e. the type of matching pair characters all brackets will be flattened to. Therefore, in the scripting language interface this function is a replacement for <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__dot__bracket_1ga690425199c8b71545e7196e3af1436f8" kindref="member">vrna_db_flatten_to</ref>  (char *string, const char target[3], unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000168"/> <parblock><para>This function is available as an overloaded version of <ref refid="group__struct__utils__dot__bracket_1gafd1304f5a86e2e3f1425e725cde44fa2" kindref="member">vrna_db_flatten()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_flatten()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils_1gacb5f1fafaf20eaf6a63052153499f0bb" kindref="member">vrna_db_from_probs</ref>  (const FLT_OR_DBL *pr, unsigned int length)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000176"/> <parblock><para>This function is available as parameter-less method <bold>db_from_probs()</bold> bound to objects of type <emphasis>fold_compound</emphasis>. Parameters <computeroutput>pr</computeroutput> and <computeroutput>length</computeroutput> are implicitely taken from the <emphasis>fold_compound</emphasis> object the method is bound to. Upon missing base pair probabilities, this method returns an empty string. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_from_probs()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__dot__bracket_1ga97dbebaa3fc49524cf5afa338a6c52ee" kindref="member">vrna_db_pk_remove</ref>  (const char *structure, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000169"/> <parblock><para>This function is available as an overloaded function <computeroutput>db_pk_remove()</computeroutput> where the optional second parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__struct__utils__dot__bracket_1ga013a9da903462d2f2b037f0c6ffb46e4" kindref="member">VRNA_BRACKETS_ANY</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.db_pk_remove()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1gaaf197722d1faa86af5e7b4240acafdee" kindref="member">vrna_ensemble_defect</ref>  (vrna_fold_compound_t *fc, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000150"/> <parblock><para>This function is attached as method <computeroutput>ensemble_defect()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. Note that the SWIG wrapper takes a structure in dot-bracket notation and converts it into a pair table using <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref>. The resulting pair table is then internally passed to <ref refid="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" kindref="member">vrna_ensemble_defect_pt()</ref>. To control which kind of matching brackets will be used during conversion, the optional argument <computeroutput>options</computeroutput> can be used. See also the description of <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string()</ref> for available options. (default: <computeroutput>VRNA_BRACKETS_RND</computeroutput>). See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ensemble_defect()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga20b7a56fa9e451461805fd968c6cd909" kindref="member">vrna_ensemble_defect_pt</ref>  (vrna_fold_compound_t *fc, const short *pt)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000149"/> <parblock><para>This function is attached as overloaded method <computeroutput>ensemble_defect()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ensemble_defect()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1gae081ac655a76bd5c4b3d86c60b096b75" kindref="member">vrna_enumerate_necklaces</ref>  (const unsigned int *type_counts)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000024"/> <parblock><para>This function is available as global function <computeroutput>enumerate_necklaces()</computeroutput> which accepts lists input, an produces list of lists output. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.enumerate_necklaces()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gac96577cf232c71160f762737a994b7c6" kindref="member">vrna_eval_circ_consensus_structure</ref>  (const char **alignment, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000081"/> <parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gae89240c230e4740b22a703ee953396b9" kindref="member">vrna_eval_circ_consensus_structure_v</ref>  (const char **alignment, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000089"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gac673ebb9ae2a29f54d201e2ac5b85540" kindref="member">vrna_eval_circ_gquad_consensus_structure</ref>  (const char **alignment, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000083"/> <parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gaecd3e17292a0b3927277434019a5e187" kindref="member">vrna_eval_circ_gquad_consensus_structure_v</ref>  (const char **alignment, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000091"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000079"/> <parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" kindref="member">vrna_eval_circ_gquad_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gab96a6c59923ff06c35f8c2fd2c239727" kindref="member">vrna_eval_circ_gquad_structure_v</ref>  (const char *string, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000087"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga9dba2fc5d7e6ad1359a7c2f350589c0e" kindref="member">vrna_eval_circ_gquad_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000077"/> <parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" kindref="member">vrna_eval_circ_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gac3fb44e0773a51be8efc5f4f595a94a7" kindref="member">vrna_eval_circ_structure_v</ref>  (const char *string, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000085"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3e05a23ddf9b083f4e69881e440d4866" kindref="member">vrna_eval_circ_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_circ_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gabbb4d2a7aa324ec9cce8f47ce61ab8af" kindref="member">vrna_eval_consensus_structure_pt_simple</ref>  (const char **alignment, const short *pt)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000093"/> <parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gaf2d227b3d54bf9b693a3df52faf5e2e4" kindref="member">vrna_eval_consensus_structure_pt_simple_v</ref>  (const char **alignment, const short *pt, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000094"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga7762c3a7bdcbc3a14ef93259d322c7d6" kindref="member">vrna_eval_consensus_structure_simple</ref>  (const char **alignment, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000080"/> <parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gad88927c62ab0a8b534e078e44be1b36e" kindref="member">vrna_eval_consensus_structure_simple_v</ref>  (const char **alignment, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000088"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga40ebcb27ac05241944b570bc7ffd8409" kindref="member">vrna_eval_covar_structure</ref>  (vrna_fold_compound_t *fc, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000070"/> <parblock><para>This function is attached as method <computeroutput>eval_covar_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_covar_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gaf09a326b3d57a4b30c27bd0e216198ac" kindref="member">vrna_eval_gquad_consensus_structure</ref>  (const char **alignment, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000082"/> <parblock><para>This function is available through an overloadeded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga8abc794fc48d43268ced5e8cde017baa" kindref="member">vrna_eval_gquad_consensus_structure_v</ref>  (const char **alignment, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000090"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. Simply pass a sequence alignment as list of strings (including gaps) as first, and the consensus structure as second argument. The last two arguments are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000078"/> <parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" kindref="member">vrna_eval_gquad_structure_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gaeaa2bdbc1b5d78c667e735fbdff87fff" kindref="member">vrna_eval_gquad_structure_v</ref>  (const char *string, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000086"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga3263504825ef4b523eba797c99921df4" kindref="member">vrna_eval_gquad_structure()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_gquad_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__loops__hp_1gad0bb844f8dc704c71737ae1d7e32b975" kindref="member">vrna_eval_hp_loop</ref>  (vrna_fold_compound_t *fc, int i, int j)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000074"/> <parblock><para>This function is attached as method <computeroutput>eval_hp_loop()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_hp_loop()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__loops__int_1gaab3547bfcdc39d89babbc7ed2a1a4b65" kindref="member">vrna_eval_int_loop</ref>  (vrna_fold_compound_t *fc, int i, int j, int k, int l)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000075"/> <parblock><para>This function is attached as method <computeroutput>eval_int_loop()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_int_loop()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__loops_1ga5f9fe7c27d0b628a3efc2d725f52853e" kindref="member">vrna_eval_loop_pt</ref>  (vrna_fold_compound_t *fc, int i, const short *pt)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000071"/> <parblock><para>This function is attached as method <computeroutput>eval_loop_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_loop_pt()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__move_1ga2e542ea644f28d33b05ec81b7cd60ae5" kindref="member">vrna_eval_move</ref>  (vrna_fold_compound_t *fc, const char *structure, int m1, int m2)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000072"/> <parblock><para>This function is attached as method <computeroutput>eval_move()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_move()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval__move_1ga03995d1cd83b3881af7c89dd4ddbdefc" kindref="member">vrna_eval_move_pt</ref>  (vrna_fold_compound_t *fc, short *pt, int m1, int m2)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000073"/> <parblock><para>This function is attached as method <computeroutput>eval_move_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_move_pt()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga06985672a4c73f0e56e1c5722e0aa88e" kindref="member">vrna_eval_structure</ref>  (vrna_fold_compound_t *fc, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000066"/> <parblock><para>This function is attached as method <computeroutput>eval_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gaf7227a536cfa4bfd35bf015c865863f6" kindref="member">vrna_eval_structure_pt</ref>  (vrna_fold_compound_t *fc, const short *pt)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000067"/> <parblock><para>This function is attached as method <computeroutput>eval_structure_pt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_pt()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga0bba59b4d6e53461088666ff4aece7b0" kindref="member">vrna_eval_structure_pt_simple</ref>  (const char *string, const short *pt)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000092"/> <parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1ga2573093f1546389c1d56cf7ee9d206fb" kindref="member">vrna_eval_structure_pt_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_pt_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga9e8775770750783304d24fe0c4b15293" kindref="member">vrna_eval_structure_pt_verbose</ref>  (vrna_fold_compound_t *fc, const short *pt, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000069"/> <parblock><para>This function is attached as method <computeroutput>eval_structure_pt_verbose()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_pt_verbose()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple</ref>  (const char *string, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000076"/> <parblock><para>In the target scripting language, this function serves as a wrapper for <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v()</ref> and, thus, allows for two additional, optional arguments, the verbosity level and a file handle which default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively.. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1gacd6278343e77d13f1d53588e50d303bc" kindref="member">vrna_eval_structure_simple_v</ref>  (const char *string, const char *structure, int verbosity_level, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000084"/> <parblock><para>This function is available through an overloaded version of <ref refid="group__eval_1ga7e5273464b775d4130245681312c1369" kindref="member">vrna_eval_structure_simple()</ref>. The last two arguments for this function are optional and default to <ref refid="group__eval_1gaf4afe19780b61b4962c613bde324128b" kindref="member">VRNA_VERBOSITY_QUIET</ref> and <computeroutput>NULL</computeroutput>, respectively. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.eval_structure_simple()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__eval_1ga4078d8889e54c1f2e832f6c558399498" kindref="member">vrna_eval_structure_verbose</ref>  (vrna_fold_compound_t *fc, const char *structure, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000068"/> <parblock><para>This function is attached as method <computeroutput>eval_structure_verbose()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.eval_structure_verbose()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1gac377cdd18c3a6da4e04683742fda3b7a" kindref="member">vrna_exp_params_rescale</ref>  (vrna_fold_compound_t *fc, double *mfe)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000132"/> <parblock><para>This function is attached to <ref refid="structvrna__fc__s" kindref="compound">vrna_fc_s</ref> objects as overloaded <computeroutput>exp_params_rescale()</computeroutput> method.</para>
<para>When no parameter is passed to this method, the resulting action is the same as passing <computeroutput>NULL</computeroutput> as second parameter to <ref refid="group__energy__parameters_1gac377cdd18c3a6da4e04683742fda3b7a" kindref="member">vrna_exp_params_rescale()</ref>, i.e. default scaling of the partition function. Passing an energy in kcal/mol, e.g. as retrieved by a previous call to the <computeroutput>mfe()</computeroutput> method, instructs all subsequent calls to scale the partition function accordingly. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.exp_params_rescale()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga8d7b65661accc3030bd3d7c2b014512b" kindref="member">vrna_exp_params_reset</ref>  (vrna_fold_compound_t *fc, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000134"/> <parblock><para>This function is attached to <ref refid="structvrna__fc__s" kindref="compound">vrna_fc_s</ref> objects as overloaded <computeroutput>exp_params_reset()</computeroutput> method.</para>
<para>When no parameter is passed to this method, the resulting action is the same as passing <computeroutput>NULL</computeroutput> as second parameter to <ref refid="group__energy__parameters_1ga8d7b65661accc3030bd3d7c2b014512b" kindref="member">vrna_exp_params_reset()</ref>, i.e. global default model settings are used. Passing an object of type <ref refid="structvrna__md__s" kindref="compound">vrna_md_s</ref> resets the fold compound according to the specifications stored within the <ref refid="structvrna__md__s" kindref="compound">vrna_md_s</ref> object. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.exp_params_reset()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst</ref>  (vrna_fold_compound_t *fc, vrna_exp_param_t *params)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000131"/> <parblock><para>This function is attached to <ref refid="structvrna__fc__s" kindref="compound">vrna_fc_s</ref> objects as overloaded <computeroutput>exp_params_subst()</computeroutput> method.</para>
<para>When no parameter is passed, the resulting action is the same as passing <computeroutput>NULL</computeroutput> as second parameter to <ref refid="group__energy__parameters_1ga4abbca93defd54fa0dc797ceca36d2f0" kindref="member">vrna_exp_params_subst()</ref>, i.e. resetting the parameters to the global defaults. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.exp_params_subst()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Class <ref refid="group__fold__compound" kindref="compound">vrna_fc_s</ref>  </term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000100"/> <parblock><para></para>
<para>This data structure is wrapped as class <computeroutput>fold_compound</computeroutput> with several related functions attached as methods.</para>
<para>A new <computeroutput>fold_compound</computeroutput> can be obtained by calling one of its constructors:<linebreak/>
<itemizedlist>
<listitem><para><computeroutput>fold_compound(seq)</computeroutput> - Initialize with a single sequence, or two concatenated sequences separated by an ampersand character <computeroutput>&amp;</computeroutput> (for cofolding)</para>
</listitem><listitem><para><computeroutput>fold_compound(aln)</computeroutput> - Initialize with a sequence alignment <emphasis>aln</emphasis> stored as a list of sequences (with gap characters).</para>
</listitem></itemizedlist>
</para>
<para>The resulting object has a list of attached methods which in most cases directly correspond to functions that mainly operate on the corresponding <computeroutput>C</computeroutput> data structure:<linebreak/>
<itemizedlist>
<listitem><para><computeroutput><ref refid="structvrna__fc__s_1a391bcf8ac5997784aaf780cdd251c464" kindref="member">type()</ref></computeroutput> - Get the type of the <emphasis>fold_compound</emphasis> (See <ref refid="group__fold__compound_1ga01a4ff86fa71deaaa5d1abbd95a1447d" kindref="member">vrna_fc_type_e</ref>)</para>
</listitem><listitem><para><computeroutput><ref refid="structvrna__fc__s_1a95fbfed770b858e50c766505dc4bf998" kindref="member">length()</ref></computeroutput> - Get the length of the sequence(s) or alignment stored within the <computeroutput>fold_compound</computeroutput>.</para>
</listitem></itemizedlist>
</para>
<para>See, e.g.  <verbatim>embed:rst:inline:py:class:`RNA.fold_compound` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__command__files_1ga3118909bd91ecaeb4663b2e3bc2d5edd" kindref="member">vrna_file_commands_apply</ref>  (vrna_fold_compound_t *fc, const char *filename, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000034"/> <parblock><para>This function is attached as method <computeroutput>file_commands_apply()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.file_commands_apply()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__command__files_1gae5f56400ed43683338f7bf1c1102655a" kindref="member">vrna_file_commands_read</ref>  (const char *filename, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000033"/> <parblock><para>This function is available as global function <computeroutput>file_commands_read()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.file_commands_read()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats__msa_1gade4fa8136ebb2d0f7eb3f8b59a8658e3" kindref="member">vrna_file_msa_detect_format</ref>  (const char *filename, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000096"/> <parblock><para>This function exists as an overloaded version where the <computeroutput>options</computeroutput> parameter may be omitted! In that case, the <computeroutput>options</computeroutput> parameter defaults to <ref refid="group__file__formats__msa_1ga4acc255373831856a8417b68de8a94c0" kindref="member">VRNA_FILE_FORMAT_MSA_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.file_msa_detect_format()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats__msa_1gad02d5d12bda54611c915a1019323b7be" kindref="member">vrna_file_msa_read</ref>  (const char *filename, char ***names, char ***aln, char **id, char **structure, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000097"/> <parblock><para>In the target scripting language, only the first and last argument, <computeroutput>filename</computeroutput> and <computeroutput>options</computeroutput>, are passed to the corresponding function. The other arguments, which serve as output in the C-library, are available as additional return values. This function exists as an overloaded version where the <computeroutput>options</computeroutput> parameter may be omitted! In that case, the <computeroutput>options</computeroutput> parameter defaults to <ref refid="group__file__formats__msa_1ga62be992445cd8ab2ad7a8fded944338b" kindref="member">VRNA_FILE_FORMAT_MSA_STOCKHOLM</ref>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.file_msa_read()` in the :doc:`/api_python` </verbatim> and  <verbatim>embed:rst:inline :ref:`examples/python:parsing alignments` </verbatim> in the Python examples.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats__msa_1gad4203a438622b2df7bc2f16578d54799" kindref="member">vrna_file_msa_read_record</ref>  (FILE *fp, char ***names, char ***aln, char **id, char **structure, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000098"/> <parblock><para>In the target scripting language, only the first and last argument, <computeroutput>fp</computeroutput> and <computeroutput>options</computeroutput>, are passed to the corresponding function. The other arguments, which serve as output in the C-library, are available as additional return values. This function exists as an overloaded version where the <computeroutput>options</computeroutput> parameter may be omitted! In that case, the <computeroutput>options</computeroutput> parameter defaults to <ref refid="group__file__formats__msa_1ga62be992445cd8ab2ad7a8fded944338b" kindref="member">VRNA_FILE_FORMAT_MSA_STOCKHOLM</ref>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.file_msa_read_record()` in the :doc:`/api_python` </verbatim> and  <verbatim>embed:rst:inline :ref:`examples/python:parsing alignments` </verbatim> in the Python examples.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__file__formats__msa_1gaccca55b71d34def88e18ed9a51ccb2bf" kindref="member">vrna_file_msa_write</ref>  (const char *filename, const char **names, const char **aln, const char *id, const char *structure, const char *source, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000099"/> <parblock><para>In the target scripting language, this function exists as a set of overloaded versions, where the last four parameters may be omitted. If the <computeroutput>options</computeroutput> parameter is missing the options default to (<ref refid="group__file__formats__msa_1ga62be992445cd8ab2ad7a8fded944338b" kindref="member">VRNA_FILE_FORMAT_MSA_STOCKHOLM</ref> | <ref refid="group__file__formats__msa_1ga1577ea0f497d9c501549c863a4f2c089" kindref="member">VRNA_FILE_FORMAT_MSA_APPEND</ref>). See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.file_msa_write()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__alignment__plots_1ga3bb7409f5b73c2273f9f76cf8b754034" kindref="member">vrna_file_PS_aln</ref>  (const char *filename, const char **seqs, const char **names, const char *structure, unsigned int columns)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000163"/> <parblock><para>This function is available as overloaded function <computeroutput>file_PS_aln()</computeroutput> with three additional parameters <computeroutput>start</computeroutput>, <computeroutput>end</computeroutput>, and <computeroutput>offset</computeroutput> before the <computeroutput>columns</computeroutput> argument. Thus, it resembles the <computeroutput><ref refid="group__alignment__plots_1ga2b132dddeb2044e52dc39cf0ad8afaee" kindref="member">vrna_file_PS_aln_slice()</ref></computeroutput> function. The last four arguments may be omitted, indicating the default of <computeroutput>start</computeroutput> = <emphasis>0</emphasis>, <computeroutput>end</computeroutput> = <emphasis>0</emphasis>, <computeroutput>offset</computeroutput> = <emphasis>0</emphasis>, and <computeroutput>columns</computeroutput> = <emphasis>60</emphasis>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.file_PS_aln()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__alignment__plots_1ga2b132dddeb2044e52dc39cf0ad8afaee" kindref="member">vrna_file_PS_aln_slice</ref>  (const char *filename, const char **seqs, const char **names, const char *structure, unsigned int start, unsigned int end, int offset, unsigned int columns)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000164"/> <parblock><para>This function is available as overloaded function <computeroutput>file_PS_aln()</computeroutput> where the last four parameter may be omitted, indicating <computeroutput>start</computeroutput> = <emphasis>0</emphasis>, <computeroutput>end</computeroutput> = <emphasis>0</emphasis>, <computeroutput>offset</computeroutput> = <emphasis>0</emphasis>, and <computeroutput>columns</computeroutput> = <emphasis>60</emphasis>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.file_PS_aln()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__hard__constraints_1gadfe1b73edc675a5c0363b81d55173144" kindref="member">vrna_hc_add_from_db</ref>  (vrna_fold_compound_t *fc, const char *constraint, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000040"/> <parblock><para>This function is attached as method <computeroutput>hc_add_from_db()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.hc_add_from_db()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1gafd95c2350d67d8f4374369c19cf111f1" kindref="member">vrna_heat_capacity</ref>  (vrna_fold_compound_t *fc, float T_min, float T_max, float T_increment, unsigned int mpoints)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000107"/> <parblock><para>This function is attached as overloaded method <computeroutput>heat_capacity()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. If the optional function arguments <computeroutput>T_min</computeroutput>, <computeroutput>T_max</computeroutput>, <computeroutput>T_increment</computeroutput>, and <computeroutput>mpoints</computeroutput> are omitted, they default to 0.0, 100.0, 1.0 and 2, respectively. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.heat_capacity()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga19ef508fcc66ab80833aa2fe402d8927" kindref="member">vrna_heat_capacity_cb</ref>  (vrna_fold_compound_t *fc, float T_min, float T_max, float T_increment, unsigned int mpoints, vrna_heat_capacity_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000108"/> <parblock><para>This function is attached as method <computeroutput>heat_capacity_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.heat_capacity_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga0c2664e15dded704d805a9d2a625ff21" kindref="member">vrna_heat_capacity_simple</ref>  (const char *sequence, float T_min, float T_max, float T_increment, unsigned int mpoints)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000109"/> <parblock><para>This function is available as overloaded function <computeroutput>heat_capacity()</computeroutput>. If the optional function arguments <computeroutput>T_min</computeroutput>, <computeroutput>T_max</computeroutput>, <computeroutput>T_increment</computeroutput>, and <computeroutput>mpoints</computeroutput> are omitted, they default to 0.0, 100.0, 1.0 and 2, respectively. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.head_capacity()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__utils_1ga940205dee1b00f94551cabbfbe6e654a" kindref="member">vrna_init_rand_seed</ref>  (unsigned int seed)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000181"/> This function is available as an overloaded function <bold><ref refid="utils_2basic_8h_1a8aaa6d9be6f803f496d9b97375c371f3" kindref="member">init_rand()</ref></bold> where the argument <computeroutput>seed</computeroutput> is optional. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.init_rand()` in the :doc:`/api_python`</verbatim>. </para>
</listitem>
<varlistentry><term>Global <ref refid="mm_8h_1a242e65bd5031f05fccd1133c5be0b75a" kindref="member">vrna_maximum_matching</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000008"/> <parblock><para>This function is attached as method <computeroutput>maximum_matching()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.maximum_matching()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="mm_8h_1a25e2bf03fe5711c9c3a3828a14ef961e" kindref="member">vrna_maximum_matching_simple</ref>  (const char *sequence)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000007"/> <parblock><para>This function is available as global function <computeroutput>maximum_matching()</computeroutput>. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.maximum_matching()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mea__fold_1ga26afeef667f7013a743d1d1ebe42666a" kindref="member">vrna_MEA_from_plist</ref>  (vrna_ep_t *plist, const char *sequence, double gamma, vrna_md_t *md, float *mea)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000155"/> <parblock><para>This function is available as overloaded function <computeroutput>MEA_from_plist</computeroutput>(gamma = 1., md = NULL). Note, that it returns the MEA structure and MEA value as a tuple (MEA_structure, MEA). See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.MEA_from_plist()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1gafd9ef9f1a5f0ab31540e4c3d78addc82" kindref="member">vrna_mean_bp_distance</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000148"/> <parblock><para>This function is attached as method <computeroutput><ref refid="group__part__func__global__deprecated_1ga79cbc375af65f11609feb6b055269e7d" kindref="member">mean_bp_distance()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mean_bp_distance()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga29a33b2895f4e67b0480271ff289afdc" kindref="member">vrna_fold</ref>  (const char *sequence, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000113"/> <parblock><para>This function is available as function <computeroutput><ref refid="group__mfe__global__deprecated_1gaadafcb0f140795ae62e5ca027e335a9b" kindref="member">fold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.fold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__hard__constraints_1ga4fdb1e98f0d1a2d5728dd3a3aae4a357" kindref="member">vrna_hc_init</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000036"/> <parblock><para>This function is attached as method <computeroutput>hc_init()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.hc_init()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1ga4918cce52bf69c1913cda503b2ac75d8" kindref="member">vrna_Lfold</ref>  (const char *string, int window_size, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000122"/> <parblock><para>This function is available as overloaded function <computeroutput><ref refid="group__mfe__window__deprecated_1gafdd1e11b5c7ad443b9f86b818e67bab4" kindref="member">Lfold()</ref></computeroutput> in the global namespace. The parameter <computeroutput>file</computeroutput> defaults to <computeroutput>NULL</computeroutput> and may be omitted. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.Lfold()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1ga84dcc36fd88063e1692c2e1e68a5f689" kindref="member">vrna_Lfold_cb</ref>  (const char *string, int window_size, vrna_mfe_window_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000123"/> <parblock><para>This function is available as overloaded function <computeroutput>Lfold_cb()</computeroutput> in the global namespace. The parameter <computeroutput>data</computeroutput> defaults to <computeroutput>NULL</computeroutput> and may be omitted. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.Lfold_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1gae982184f119219b616f3e5a8b3f558ec" kindref="member">vrna_Lfoldz_cb</ref>  (const char *string, int window_size, double min_z, vrna_mfe_window_zscore_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000125"/> <parblock><para>This function is available as overloaded function <computeroutput>Lfoldz_cb()</computeroutput> in the global namespace. The parameter <computeroutput>data</computeroutput> defaults to <computeroutput>NULL</computeroutput> and may be omitted. See e.g. <verbatim>embed:rst:inline:py:func:`RNA.Lfoldz_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Class <ref refid="group__model__details" kindref="compound">vrna_md_s</ref>  </term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000128"/> <parblock><para>This data structure is wrapped as an object <computeroutput>md</computeroutput> with multiple related functions attached as methods.</para>
<para>A new set of default parameters can be obtained by calling the constructure of <computeroutput>md:</computeroutput> <linebreak/>
<itemizedlist>
<listitem><para><computeroutput>md()</computeroutput> <ndash/> Initialize with default settings</para>
</listitem></itemizedlist>
</para>
<para>The resulting object has a list of attached methods which directly correspond to functions that mainly operate on the corresponding <emphasis>C</emphasis> data structure:<linebreak/>
<itemizedlist>
<listitem><para><computeroutput>reset()</computeroutput> - <ref refid="group__model__details_1ga8ac6ff84936282436f822644bf841f66" kindref="member">vrna_md_set_default()</ref></para>
</listitem><listitem><para><computeroutput>set_from_globals()</computeroutput> - <ref refid="group__model__details_1gabad896c3650d420f3f3ddefc69e2bceb" kindref="member">set_model_details()</ref></para>
</listitem><listitem><para><computeroutput>option_string()</computeroutput> - <ref refid="group__model__details_1ga3a7469f0725a849af6ba61a57dfd60ce" kindref="member">vrna_md_option_string()</ref></para>
</listitem></itemizedlist>
</para>
<para>Note, that default parameters can be modified by directly setting any of the following global variables. Internally, getting/setting default parameters using their global variable representative translates into calls of the following functions, therefore these wrappers for these functions do not exist in the scripting language interface(s):</para>
<para></para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mea__fold_1ga9b87b664ef014c1266aa50d5bc39f2ac" kindref="member">vrna_MEA</ref>  (vrna_fold_compound_t *fc, double gamma, float *mea)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000154"/> <parblock><para>This function is attached as overloaded method <computeroutput>MEA</computeroutput>(gamma = 1.) to objects of type <computeroutput>fold_compound</computeroutput>. Note, that it returns the MEA structure and MEA value as a tuple (MEA_structure, MEA). See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.MEA()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1ga5577af664e5b9056b44fa5df29e9befb" kindref="member">vrna_mfe</ref>  (vrna_fold_compound_t *fc, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000110"/> <parblock><para>This function is attached as method <computeroutput>mfe()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__global_1gaeefffa2179cebb6b8b30cb6ac52de2cd" kindref="member">vrna_mfe_dimer</ref>  (vrna_fold_compound_t *fc, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000111"/> <parblock><para>This function is attached as method <computeroutput>mfe_dimer()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>structure</computeroutput> is returned along with the MFE und must not be provided. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe_dimer()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1gacdbc049dcfc7a0e2eb37a327efab91e2" kindref="member">vrna_mfe_window</ref>  (vrna_fold_compound_t *fc, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000118"/> <parblock><para>This function is attached as overloaded method <computeroutput>mfe_window()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>FILE</computeroutput> has default value of <computeroutput>NULL</computeroutput> and can be omitted. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe_window()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1ga3ade396421340b0f2f989c7936fda3d9" kindref="member">vrna_mfe_window_cb</ref>  (vrna_fold_compound_t *fc, vrna_mfe_window_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000119"/> <parblock><para>This function is attached as overloaded method <computeroutput>mfe_window_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>data</computeroutput> has default value of <computeroutput>NULL</computeroutput> and can be omitted. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe_window_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1ga90d3756f07aa78a47ffac187ead3c0aa" kindref="member">vrna_mfe_window_zscore</ref>  (vrna_fold_compound_t *fc, double min_z, FILE *file)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000120"/> <parblock><para>This function is attached as overloaded method <computeroutput>mfe_window_zscore()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>FILE</computeroutput> has default value of <computeroutput>NULL</computeroutput> and can be omitted. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe_window_zscore()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__mfe__window_1ga5df4a67ce381ed329c289370b0c8adcb" kindref="member">vrna_mfe_window_zscore_cb</ref>  (vrna_fold_compound_t *fc, double min_z, vrna_mfe_window_zscore_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000121"/> <parblock><para>This function is attached as overloaded method <computeroutput>mfe_window_zscore_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The parameter <computeroutput>data</computeroutput> has default value of <computeroutput>NULL</computeroutput> and can be omitted. See e.g. <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.mfe_window_zscore()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__neighbors_1gab4a00163bbf8e8592284a6e82a81de87" kindref="member">vrna_neighbors</ref>  (vrna_fold_compound_t *fc, const short *pt, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000129"/> <parblock><para>This function is attached as an overloaded method <computeroutput>neighbors()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__neighbors_1gaa5ffec4dd0d02df320f123e6888154d1" kindref="member">VRNA_MOVESET_DEFAULT</ref> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.neighbors()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1gabb0583595c67094986ef90cb4f1c7555" kindref="member">vrna_params_load</ref>  (const char fname[], unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000135"/> <parblock><para>This function is available as overloaded function <computeroutput>params_load</computeroutput>(fname=&quot;&quot;, options=<ref refid="group__energy__parameters__rw_1ga2d46720ac5bf0e56ce0dbbff459667d2" kindref="member">VRNA_PARAMETER_FORMAT_DEFAULT</ref>). Here, the empty filename string indicates to load default RNA parameters, i.e. this is equivalent to calling <ref refid="group__energy__parameters__rw_1ga413bc688695c9a707dbcc678412d6792" kindref="member">vrna_params_load_defaults()</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.fold_compound.params_load()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga413bc688695c9a707dbcc678412d6792" kindref="member">vrna_params_load_defaults</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000138"/> <parblock><para>This function is available as overloaded function <computeroutput>params_load()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga4d897130a700f86b7d4035a95f25615a" kindref="member">vrna_params_load_DNA_Mathews1999</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000145"/> <parblock><para>This function is available as function <computeroutput>params_load_DNA_Mathews1999()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_DNA_Mathews1999()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1gafa45b5734355baa634ca0a2e2857563e" kindref="member">vrna_params_load_DNA_Mathews2004</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000144"/> <parblock><para>This function is available as function <computeroutput>params_load_DNA_Mathews2004()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_DNA_Mathews2004()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1gabcd9cc7040a6b633b56b1cbd6a14d68e" kindref="member">vrna_params_load_from_string</ref>  (const char *string, const char *name, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000137"/> <parblock><para>This function is available as overloaded function <computeroutput>params_load_from_string</computeroutput>(string, name=&quot;&quot;, options=<ref refid="group__energy__parameters__rw_1ga2d46720ac5bf0e56ce0dbbff459667d2" kindref="member">VRNA_PARAMETER_FORMAT_DEFAULT</ref>). See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_from_string()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga511a1c17c0fd10a1fbb0936674712ff8" kindref="member">vrna_params_load_RNA_Andronescu2007</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000141"/> <parblock><para>This function is available as function <computeroutput>params_load_RNA_Andronescu2007()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_RNA_Andronescu2007()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga3a87fe5e73eb906c0fa26f2c42c787fd" kindref="member">vrna_params_load_RNA_Langdon2018</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000142"/> <parblock><para>This function is available as function <computeroutput>params_load_RNA_Langdon2018()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_RNA_Langdon2018()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga00e07504d66dc24aca7befb4bdaa0db1" kindref="member">vrna_params_load_RNA_misc_special_hairpins</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000143"/> <parblock><para>This function is available as function <computeroutput>params_load_RNA_misc_special_hairpins()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_RNA_misc_special_hairpins()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga804393b6dfe06a2c6cae89219dffabb1" kindref="member">vrna_params_load_RNA_Turner1999</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000140"/> <parblock><para>This function is available as function <computeroutput>params_load_RNA_Turner1999()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_RNA_Turner1999()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga7327fe66ef60c33ba80a87c04db0ee83" kindref="member">vrna_params_load_RNA_Turner2004</ref>  (void)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000139"/> <parblock><para>This function is available as function <computeroutput>params_load_RNA_Turner2004()</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_load_RNA_Turner2004()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga033fea3322aeac71a260241e8ba6e773" kindref="member">vrna_params_reset</ref>  (vrna_fold_compound_t *fc, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000133"/> <parblock><para>This function is attached to <ref refid="structvrna__fc__s" kindref="compound">vrna_fc_s</ref> objects as overloaded <computeroutput>params_reset()</computeroutput> method.</para>
<para>When no parameter is passed to this method, the resulting action is the same as passing <computeroutput>NULL</computeroutput> as second parameter to <ref refid="group__energy__parameters_1ga033fea3322aeac71a260241e8ba6e773" kindref="member">vrna_params_reset()</ref>, i.e. global default model settings are used. Passing an object of type <ref refid="structvrna__md__s" kindref="compound">vrna_md_s</ref> resets the fold compound according to the specifications stored within the <ref refid="structvrna__md__s" kindref="compound">vrna_md_s</ref> object. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.params_reset()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters__rw_1ga0de3731b3e4017c52bd678549f6c4ae5" kindref="member">vrna_params_save</ref>  (const char fname[], unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000136"/> <parblock><para>This function is available as overloaded function <computeroutput>params_save</computeroutput>(fname, options=<ref refid="group__energy__parameters__rw_1ga2d46720ac5bf0e56ce0dbbff459667d2" kindref="member">VRNA_PARAMETER_FORMAT_DEFAULT</ref>). See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.params_save()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst</ref>  (vrna_fold_compound_t *fc, vrna_param_t *par)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000130"/> <parblock><para>This function is attached to <ref refid="structvrna__fc__s" kindref="compound">vrna_fc_s</ref> objects as overloaded <computeroutput>params_subst()</computeroutput> method.</para>
<para>When no parameter is passed, the resulting action is the same as passing <computeroutput>NULL</computeroutput> as second parameter to <ref refid="group__energy__parameters_1ga9202b803da6f5364f91db89ab3d8b048" kindref="member">vrna_params_subst()</ref>, i.e. resetting the parameters to the global defaults. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.params_subst()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__walk_1ga41a4fdfc4b5366ffb6afede85709c70a" kindref="member">vrna_path</ref>  (vrna_fold_compound_t *fc, short *pt, unsigned int steps, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000182"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__paths__walk_1gaf1bb1f8fec8d24e3b821f621b19f77b4" kindref="member">VRNA_PATH_DEFAULT</ref> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1gacba096caf9a6fe134f33a5afcf2248d8" kindref="member">vrna_path_direct</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, vrna_path_options_t options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000160"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_direct()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <computeroutput>NULL</computeroutput> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_direct()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1ga51d9edaeb42d1d178ea8ba46ccd4c8c0" kindref="member">vrna_path_direct_ub</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, int maxE, vrna_path_options_t options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000161"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_direct()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>maxE</computeroutput> defaults to #INT_MAX - 1 if it is omitted, while the optional parameter <computeroutput>options</computeroutput> defaults to <computeroutput>NULL</computeroutput>. In case the function did not find a path with <formula id="126">$E_{saddle} &lt; E_{max}$</formula> it returns an empty list. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_direct()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1ga2fed8ff126f5becd82cedd81a25c9bf0" kindref="member">vrna_path_findpath</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, int width)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000158"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_findpath()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 1 if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_findpath()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1gad77dbfa125158f534147c0015a849bc3" kindref="member">vrna_path_findpath_saddle</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, int width)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000156"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_findpath_saddle()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 1 if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_findpath_saddle()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1gaca6d3ab6f8b9463e3382bd1f474c26f1" kindref="member">vrna_path_findpath_saddle_ub</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, int width, int maxE)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000157"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_findpath_saddle()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 1 if it is omitted, while the optional parameter <computeroutput>maxE</computeroutput> defaults to <ref refid="constants_8h_1a12c2040f25d8e3a7b9e1c2024c618cb6" kindref="member">INF</ref>. In case the function did not find a path with <formula id="126">$E_{saddle} &lt; E_{max}$</formula> the function returns a <computeroutput>NULL</computeroutput> object, i.e. <computeroutput>undef</computeroutput> for Perl and <computeroutput>None</computeroutput> for Python. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_findpath_saddle()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1gad00765c2f269fddfa319310af22d4f67" kindref="member">vrna_path_findpath_ub</ref>  (vrna_fold_compound_t *fc, const char *s1, const char *s2, int width, int maxE)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000159"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_findpath()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 1 if it is omitted, while the optional parameter <computeroutput>maxE</computeroutput> defaults to <ref refid="constants_8h_1a12c2040f25d8e3a7b9e1c2024c618cb6" kindref="member">INF</ref>. In case the function did not find a path with <formula id="126">$E_{saddle} &lt; E_{max}$</formula> the function returns an empty list. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_findpath()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__walk_1ga1625c4e8859b5e9aadf78f3cab81f418" kindref="member">vrna_path_gradient</ref>  (vrna_fold_compound_t *fc, short *pt, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000183"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_gradient()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__paths__walk_1gaf1bb1f8fec8d24e3b821f621b19f77b4" kindref="member">VRNA_PATH_DEFAULT</ref> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_gradient()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__direct_1ga3790a24ca64d68acfa6e67b525151a5f" kindref="member">vrna_path_options_findpath</ref>  (int width, unsigned int type)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000162"/> <parblock><para>This function is available as overloaded function <computeroutput>path_options_findpath()</computeroutput>. The optional parameter <computeroutput>width</computeroutput> defaults to 10 if omitted, while the optional parameter <computeroutput>type</computeroutput> defaults to <ref refid="group__paths_1ga3e964156b52440b65fae5e2a48750d8e" kindref="member">VRNA_PATH_TYPE_DOT_BRACKET</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.path_options_findpath()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__paths__walk_1ga1f7fa62038eb40a3591f09c8fbb8b68b" kindref="member">vrna_path_random</ref>  (vrna_fold_compound_t *fc, short *pt, unsigned int steps, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000184"/> <parblock><para>This function is attached as an overloaded method <computeroutput>path_gradient()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The optional parameter <computeroutput>options</computeroutput> defaults to <ref refid="group__paths__walk_1gaf1bb1f8fec8d24e3b821f621b19f77b4" kindref="member">VRNA_PATH_DEFAULT</ref> if it is omitted. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.path_random()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga594844ac73c4e66e00d6791b31540634" kindref="member">vrna_pbacktrack</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000010"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga72ebbe45bcbce147a12f27f62b38db78" kindref="member">vrna_pbacktrack5</ref>  (vrna_fold_compound_t *fc, unsigned int length)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000009"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack5()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga0849bf555110d546ac81bc2aefdfe507" kindref="member">vrna_pbacktrack5_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int length, vrna_bs_result_f cb, void *data, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000015"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack5()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga30c3ddff868c44eecfdb07d99a2422ba" kindref="member">vrna_pbacktrack5_num</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int length, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000012"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack5()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga7917f94e9dfef04a7a2ca666ff4987fb" kindref="member">vrna_pbacktrack5_resume</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int length, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000018"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the list of structures, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack5()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga1c4cd7156224ef96147b22c5f7c4ddc3" kindref="member">vrna_pbacktrack5_resume_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int length, vrna_bs_result_f cb, void *data, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000021"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gaf2e614b8beb4ddf3e8751433b76f39db" kindref="member">pbacktrack5()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the number of structures backtraced, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack5()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1gad6d1de3371ebe6fd1db3c318e50e6488" kindref="member">vrna_pbacktrack_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, vrna_bs_result_f cb, void *data, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000016"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga596ed9bcd86f629a7c7c59c58b297db5" kindref="member">vrna_pbacktrack_num</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000013"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>. </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1gae175129ece546fe7c092f27072e039d1" kindref="member">vrna_pbacktrack_resume</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000019"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the list of structures, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1gabaaec8b80274f8e7b86d2b2226469d9f" kindref="member">vrna_pbacktrack_resume_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, vrna_bs_result_f cb, void *data, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000022"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the number of structures backtraced, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga4ae8e7ce0b1e6e45569d183af038c392" kindref="member">vrna_pbacktrack_sub</ref>  (vrna_fold_compound_t *fc, unsigned int start, unsigned int end)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000011"/> <parblock><para>This function is attached as overloaded method <computeroutput>pbacktrack_sub()</computeroutput> to objects of type <emphasis>fold_compound</emphasis>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack_sub()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga6a077de16b2d95dfd9c8f06ddef092b5" kindref="member">vrna_pbacktrack_sub_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int start, unsigned int end, vrna_bs_result_f cb, void *data, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000017"/> <parblock><para>This function is attached as overloaded method <computeroutput><ref refid="group__subopt__stochbt__deprecated_1gac03ca6db186bb3bf0a2a326d7fb3ba03" kindref="member">pbacktrack()</ref></computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga21000927ce498a1b17dff92bda4d996f" kindref="member">vrna_pbacktrack_sub_num</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int start, unsigned int end, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000014"/> <parblock><para>This function is attached as overloaded method <computeroutput>pbacktrack_sub()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack_sub()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>. </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1ga2b99a532c4e06b346bfab4111700976e" kindref="member">vrna_pbacktrack_sub_resume</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int start, unsigned int end, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000020"/> <parblock><para>This function is attached as overloaded method <computeroutput>pbacktrack_sub()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the list of structures, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack_sub()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__stochbt_1gaab6ee5d51be1723a2dda22f758da882c" kindref="member">vrna_pbacktrack_sub_resume_cb</ref>  (vrna_fold_compound_t *fc, unsigned int num_samples, unsigned int start, unsigned int end, vrna_bs_result_f cb, void *data, vrna_pbacktrack_mem_t *nr_mem, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000023"/> <parblock><para>This function is attached as overloaded method <computeroutput>pbacktrack_sub()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with optional last argument <computeroutput>options</computeroutput> = <ref refid="group__subopt__stochbt_1ga760aa2fb2d5e3d7521a11454a21e9b9f" kindref="member">VRNA_PBACKTRACK_DEFAULT</ref>. In addition to the number of structures backtraced, this function also returns the <computeroutput>nr_mem</computeroutput> data structure as first return value. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.pbacktrack_sub()` in the :doc:`/api_python` </verbatim> and the <verbatim>embed:rst:inline :ref:`examples/python:boltzmann sampling` Python examples </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global_1gaff6fe7a499a62d62d10cb850d5222f00" kindref="member">vrna_pf</ref>  (vrna_fold_compound_t *fc, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000146"/> <parblock><para>This function is attached as method <computeroutput>pf()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pf()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__part__func__global_1gae796019c176a158f0e9d7741a85c1743" kindref="member">vrna_pf_dimer</ref>  (vrna_fold_compound_t *fc, char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000147"/> <parblock><para>This function is attached as method <computeroutput>pf_dimer()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pf_dimer()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__plot__probabilities_1ga45e56b67e3f333f4335197737b5f9822" kindref="member">vrna_plot_dp_EPS</ref>  (const char *filename, const char *sequence, vrna_ep_t *upper, vrna_ep_t *lower, <ref refid="structvrna__dotplot__auxdata__t" kindref="compound">vrna_dotplot_auxdata_t</ref> *auxdata, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000165"/> <parblock><para>This function is available as overloaded function <computeroutput>plot_dp_EPS()</computeroutput> where the last three parameters may be omitted. The default values for these parameters are <computeroutput>lower</computeroutput> = NULL, <computeroutput>auxdata</computeroutput> = NULL, <computeroutput>options</computeroutput> = <ref refid="group__plot__probabilities_1gaa3a3d5cf87de5120a93eab3be788b6fb" kindref="member">VRNA_PLOT_PROBABILITIES_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.plot_dp_EPS()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga4ec346141028c7bcd15bc235c408b6e9" kindref="member">vrna_positional_entropy</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000151"/> <parblock><para>This function is attached as method <computeroutput>positional_entropy()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.positional_entropy()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga6a1e8a85e6fab2380ce235180beb85f8" kindref="member">vrna_pr_energy</ref>  (vrna_fold_compound_t *fc, double e)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000153"/> <parblock><para>This function is attached as method <computeroutput>pr_energy()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pr_energy()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__thermodynamics_1ga882c35d9dd775c1275593b3b6a966bec" kindref="member">vrna_pr_structure</ref>  (vrna_fold_compound_t *fc, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000152"/> <parblock><para>This function is attached as method <computeroutput>pr_structure()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.pr_structure()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__pair__table_1gab124ba58014a97d2fb8c21831e19f107" kindref="member">vrna_ptable</ref>  (const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000170"/> <parblock><para>This functions is wrapped as overloaded function <computeroutput>ptable()</computeroutput> that takes an optional argument <computeroutput>options</computeroutput> to specify which type of matching brackets should be considered during conversion. The default set is round brackets, i.e. <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.ptable()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__struct__utils__pair__table_1ga792503f8b2c6783248e5c8b3d56e9148" kindref="member">vrna_ptable_from_string</ref>  (const char *structure, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000171"/> <parblock><para>This functions is wrapped as overloaded function <computeroutput>ptable()</computeroutput> that takes an optional argument <computeroutput>options</computeroutput> to specify which type of matching brackets should be considered during conversion. The default set is round brackets, i.e. <ref refid="group__struct__utils__dot__bracket_1gac92d5fa7c6625bce2670ece510a24fbd" kindref="member">VRNA_BRACKETS_RND</ref>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.ptable()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1gae1dec02c4b63f303ce06a9293d316762" kindref="member">vrna_rotational_symmetry</ref>  (const char *string)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000027"/> <parblock><para>This function is available as global function <computeroutput>rotational_symmetry()</computeroutput>. See <ref refid="group__combinatorics__utils_1ga294d48935fcac87ab335d771fe289ecb" kindref="member">vrna_rotational_symmetry_pos()</ref> for details. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.rotational_symmetry()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1gad42ffd53025bed9d636d811748db7c5a" kindref="member">vrna_rotational_symmetry_db</ref>  (vrna_fold_compound_t *fc, const char *structure)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000029"/> <parblock><para>This function is attached as method <computeroutput>rotational_symmetry_db()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> (i.e. <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>). See <ref refid="group__combinatorics__utils_1ga2a4227ebe28dbc7ad55444a3a1bf7119" kindref="member">vrna_rotational_symmetry_db_pos()</ref> for details. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.rotational_symmetry_db()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1ga2a4227ebe28dbc7ad55444a3a1bf7119" kindref="member">vrna_rotational_symmetry_db_pos</ref>  (vrna_fold_compound_t *fc, const char *structure, unsigned int **positions)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000030"/> <parblock><para>This function is attached as method <computeroutput>rotational_symmetry_db()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> (i.e. <ref refid="group__fold__compound_1ga1b0cef17fd40466cef5968eaeeff6166" kindref="member">vrna_fold_compound_t</ref>). Thus, the first argument must be omitted. In contrast to our C-implementation, this function doesn&apos;t simply return the order of rotational symmetry of the secondary structure, but returns the list <computeroutput>position</computeroutput> of cyclic permutation shifts that result in a rotationally symmetric structure. The length of the list then determines the order of rotational symmetry. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.rotational_symmetry_db()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1gac51464b5281833a58c25f9447252c495" kindref="member">vrna_rotational_symmetry_num</ref>  (const unsigned int *string, size_t string_length)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000025"/> <parblock><para>This function is available as global function <computeroutput>rotational_symmetry()</computeroutput>. See <ref refid="group__combinatorics__utils_1ga294d48935fcac87ab335d771fe289ecb" kindref="member">vrna_rotational_symmetry_pos()</ref> for details. Note, that in the target language the length of the list <computeroutput>string</computeroutput> is always known a-priori, so the parameter <computeroutput>string_length</computeroutput> must be omitted. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.rotational_symmetry()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1ga294d48935fcac87ab335d771fe289ecb" kindref="member">vrna_rotational_symmetry_pos</ref>  (const char *string, unsigned int **positions)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000028"/> <parblock><para>This function is available as overloaded global function <computeroutput>rotational_symmetry()</computeroutput>. It merges the functionalities of <ref refid="group__combinatorics__utils_1gae1dec02c4b63f303ce06a9293d316762" kindref="member">vrna_rotational_symmetry()</ref>, <ref refid="group__combinatorics__utils_1ga294d48935fcac87ab335d771fe289ecb" kindref="member">vrna_rotational_symmetry_pos()</ref>, <ref refid="group__combinatorics__utils_1gac51464b5281833a58c25f9447252c495" kindref="member">vrna_rotational_symmetry_num()</ref>, and <ref refid="group__combinatorics__utils_1ga95b5a6ac35da982e2a766f8d2f98a2e1" kindref="member">vrna_rotational_symmetry_pos_num()</ref>. In contrast to our C-implementation, this function doesn&apos;t return the order of rotational symmetry as a single value, but returns a list of cyclic permutation shifts that result in a rotationally symmetric string. The length of the list then determines the order of rotational symmetry. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.rotational_symmetry()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__combinatorics__utils_1ga95b5a6ac35da982e2a766f8d2f98a2e1" kindref="member">vrna_rotational_symmetry_pos_num</ref>  (const unsigned int *string, size_t string_length, unsigned int **positions)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000026"/> <parblock><para>This function is available as global function <computeroutput>rotational_symmetry()</computeroutput>. See <ref refid="group__combinatorics__utils_1ga294d48935fcac87ab335d771fe289ecb" kindref="member">vrna_rotational_symmetry_pos()</ref> for details. Note, that in the target language the length of the list <computeroutput>string</computeroutput> is always known a-priori, so the parameter <computeroutput>string_length</computeroutput> must be omitted. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.rotational_symmetry()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gac91891f274fe03c2801b21a95fa1b12e" kindref="member">vrna_sc_add_bp</ref>  (vrna_fold_compound_t *fc, int i, int j, FLT_OR_DBL energy, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000048"/> <parblock><para>This function is attached as an overloaded method <computeroutput>sc_add_bp()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The method either takes arguments for a single base pair (i,j) with the corresponding energy value:  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gab0a2cbb121e1589f38144341ba4852bd" kindref="member">vrna_sc_add_bt</ref>  (vrna_fold_compound_t *fc, vrna_sc_bt_f f)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000053"/> <parblock><para>This function is attached as method <computeroutput>sc_add_bt()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_bt()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1ga0bab36ee5f9934b729778ec6f53cec3e" kindref="member">vrna_sc_add_data</ref>  (vrna_fold_compound_t *fc, void *data, vrna_auxdata_free_f free_data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000051"/> <parblock><para>This function is attached as method <computeroutput>sc_add_data()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_data()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1ga42ae58b56fb10e75a6ee3e131a6ae30e" kindref="member">vrna_sc_add_exp_f</ref>  (vrna_fold_compound_t *fc, vrna_sc_exp_f exp_f)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000054"/> <parblock><para>This function is attached as method <computeroutput>sc_add_exp_f()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_exp_f()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1ga4fdbb3b492d2343d827715a7a7a0f689" kindref="member">vrna_sc_add_f</ref>  (vrna_fold_compound_t *fc, vrna_sc_f f)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000052"/> <parblock><para>This function is attached as method <computeroutput>sc_add_f()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_f()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__constraints__ligand_1ga2bd49930c9695b2f4b85989d1daa62d3" kindref="member">vrna_sc_add_hi_motif</ref>  (vrna_fold_compound_t *fc, const char *seq, const char *structure, FLT_OR_DBL energy, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000041"/> <parblock><para>This function is attached as method <computeroutput>sc_add_hi_motif()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The last parameter is optional an defaults to <computeroutput>options</computeroutput> = <ref refid="group__fold__compound_1gacea5b7ee6181c485f36e2afa0e9089e4" kindref="member">VRNA_OPTION_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_hi_motif()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__SHAPE__reactivities_1gad609895467d59ea53faac4f98b71c099" kindref="member">vrna_sc_add_SHAPE_deigan</ref>  (vrna_fold_compound_t *fc, const double *reactivities, double m, double b, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000042"/> <parblock><para>This function is attached as method <computeroutput>sc_add_SHAPE_deigan()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_SHAPE_deigan()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__SHAPE__reactivities_1ga2a3fbf037d5e2844792997a92ef36285" kindref="member">vrna_sc_add_SHAPE_deigan_ali</ref>  (vrna_fold_compound_t *fc, const char **shape_files, const int *shape_file_association, double m, double b, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000043"/> <parblock><para>This function is attached as method <computeroutput>sc_add_SHAPE_deigan_ali()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_SHAPE_deigan_ali()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__SHAPE__reactivities_1ga5a673837ebe42d790bdf3ccf8982d3dc" kindref="member">vrna_sc_add_SHAPE_zarringhalam</ref>  (vrna_fold_compound_t *fc, const double *reactivities, double b, double default_value, const char *shape_conversion, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000044"/> <parblock><para>This function is attached as method <computeroutput>sc_add_SHAPE_zarringhalam()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_add_SHAPE_zarringhalam()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gaf99b2e63712bc47106d5b887c915375d" kindref="member">vrna_sc_add_up</ref>  (vrna_fold_compound_t *fc, int i, FLT_OR_DBL energy, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000050"/> <parblock><para>This function is attached as an overloaded method <computeroutput>sc_add_up()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. The method either takes arguments for a single nucleotide <formula id="161">$i $</formula> with the corresponding energy value:  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gab8e024c40f167496df65adfa0db9a9b3" kindref="member">vrna_sc_init</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000045"/> <parblock><para>This function is attached as method <computeroutput>sc_init()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_init()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1ga427d924951dd1a95b5828995208f96a9" kindref="member">vrna_sc_mod</ref>  (vrna_fold_compound_t *fc, const vrna_sc_mod_param_t params, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000057"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1ga0430986f89b8292c9bc3764474e83411" kindref="member">vrna_sc_mod_7DA</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000061"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_7DA()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_7DA()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gae90b06aaa16f9a6f519e4b75d4d0c13d" kindref="member">vrna_sc_mod_dihydrouridine</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000063"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_dihydrouridine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_dihydrouridine()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gab4aba61d48c1b1577612794d3e8cd2b2" kindref="member">vrna_sc_mod_inosine</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000060"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_inosine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_inosine()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gaae866f0f52a26ba3cc839b560c6f756b" kindref="member">vrna_sc_mod_json</ref>  (vrna_fold_compound_t *fc, const char *json, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000055"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_json()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_json()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gaf19a7af41b081f19cb28e9e132330eeb" kindref="member">vrna_sc_mod_jsonfile</ref>  (vrna_fold_compound_t *fc, const char *json_file, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000056"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_jsonfile()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_jsonfile()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1ga09398dbc2ad61f0fbbe6724c8c90ed98" kindref="member">vrna_sc_mod_m6A</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000058"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_m6A()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_m6A()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1ga95dd8b18dfc80c6f5826464292d40f52" kindref="member">vrna_sc_mod_pseudouridine</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000059"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_pseudouridine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_pseudouridine()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gab1bb84d9c5a95740a35ee65694b1fbe2" kindref="member">vrna_sc_mod_purine</ref>  (vrna_fold_compound_t *fc, const unsigned int *modification_sites, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000062"/> <parblock><para>This function is attached as overloaded method <computeroutput>sc_mod_purine()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput> with default <computeroutput>options</computeroutput> = <ref refid="group__modified__bases_1ga85bd7f50defa04f851e89a7554459d1e" kindref="member">VRNA_SC_MOD_DEFAULT</ref>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_mod_purine()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1ga73651701673a35080ff60ee156596da1" kindref="member">vrna_sc_mod_read_from_json</ref>  (const char *json, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000065"/> <parblock><para>This function is available as an overloaded function <computeroutput>sc_mod_read_from_json()</computeroutput> where the <computeroutput>md</computeroutput> parameter may be omitted and defaults to <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.sc_mod_read_from_json()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__modified__bases_1gae14753463c572d712363590b0b7e9a9a" kindref="member">vrna_sc_mod_read_from_jsonfile</ref>  (const char *filename, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000064"/> <parblock><para>This function is available as an overloaded function <computeroutput>sc_mod_read_from_jsonfile()</computeroutput> where the <computeroutput>md</computeroutput> parameter may be omitted and defaults to <computeroutput>NULL</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:func:`RNA.sc_mod_read_from_jsonfile()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gac81478a33880029ca9975bd89cc26fa9" kindref="member">vrna_sc_remove</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000046"/> <parblock><para>This function is attached as method <computeroutput>sc_remove()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_remove()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1ga68900a8a15c83ff352f576b8a298e371" kindref="member">vrna_sc_set_bp</ref>  (vrna_fold_compound_t *fc, const FLT_OR_DBL **constraints, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000047"/> <parblock><para>This function is attached as method <computeroutput>sc_set_bp()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_set_bp()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__soft__constraints_1gaf6634fa9249945b7cb0e325942d2771b" kindref="member">vrna_sc_set_up</ref>  (vrna_fold_compound_t *fc, const FLT_OR_DBL *constraints, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000049"/> <parblock><para>This function is attached as method <computeroutput>sc_set_up()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline :py:meth:`RNA.fold_compound.sc_set_up()` in the :doc:`/api_python` </verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__alphabet__utils_1gaa49a0ee0a2cbda1c863fa3a169d7bf8d" kindref="member">vrna_seq_encode</ref>  (const char *sequence, vrna_md_t *md)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000166"/> <parblock><para>In the target scripting language, this function is wrapped as overloaded function <computeroutput>seq_encode()</computeroutput> where the last parameter, the <computeroutput>model_details</computeroutput> data structure, is optional. If it is omitted, default model settings are applied, i.e. default nucleotide letter conversion. The wrapped function returns a list/tuple of integer representations of the input sequence. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.seq_encode()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__string__utils_1gad4a36bfad05f22ad5d33d00d45aa9b01" kindref="member">vrna_strtrim</ref>  (char *string, const char *delimiters, unsigned int keep, unsigned int options)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000180"/> <parblock><para>Since many scripting languages treat strings as immutable objects, this function does not modify the input string directly. Instead, it returns the modified string as second return value, together with the number of removed delimiters.</para>
<para>The scripting language interface provides an overloaded version of this function, with default parameters <computeroutput>delimiters=NULL</computeroutput>, <computeroutput>keep=0</computeroutput>, and <computeroutput>options=<ref refid="group__string__utils_1gab6272ec12f482870fa81d3d84d9b7370" kindref="member">VRNA_TRIM_DEFAULT</ref></computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:func:`RNA.strtrim()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__wuchty_1gad0cce16455fda0737873d8e1c5846480" kindref="member">vrna_subopt</ref>  (vrna_fold_compound_t *fc, int delta, int sorted, FILE *fp)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000177"/> <parblock><para>This function is attached as method <bold><ref refid="group__subopt__wuchty_1ga700f662506a233e42dd7fda74fafd40e" kindref="member">subopt()</ref></bold> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.subopt()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__wuchty_1ga92c2e415167f9e2b0341989a74d24e41" kindref="member">vrna_subopt_cb</ref>  (vrna_fold_compound_t *fc, int delta, vrna_subopt_result_f cb, void *data)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000178"/> <parblock><para>This function is attached as method <bold>subopt_cb()</bold> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.subopt_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__subopt__zuker_1gab8f5a02accffb385d921d96871aa13f4" kindref="member">vrna_subopt_zuker</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000179"/> <parblock><para>This function is attached as method <bold>subopt_zuker()</bold> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.subopt_zuker()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__domains__up_1ga35f92cdc7a7b75a19c46df14b992d517" kindref="member">vrna_ud_remove</ref>  (vrna_fold_compound_t *fc)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000102"/> <parblock><para>This function is attached as method <computeroutput>ud_remove()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ud_remove()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__domains__up_1gafb5dba76a97912e7b09174550015aa98" kindref="member">vrna_ud_set_data</ref>  (vrna_fold_compound_t *fc, void *data, vrna_auxdata_free_f free_cb)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000103"/> <parblock><para>This function is attached as method <computeroutput>ud_set_data()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ud_set_data()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__domains__up_1ga6518ec8abbeb4126f7f990f21d93a95f" kindref="member">vrna_ud_set_exp_prod_rule_cb</ref>  (vrna_fold_compound_t *fc, vrna_ud_exp_production_f pre_cb, vrna_ud_exp_f exp_e_cb)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000105"/> <parblock><para>This function is attached as method <computeroutput>ud_set_exp_prod_rule_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ud_set_exp_prod_rule_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="unstructured__domains_8h_1a7bec52f06e7a746d88e47cba8c959de2" kindref="member">vrna_ud_set_prob_cb</ref>  (vrna_fold_compound_t *fc, vrna_ud_add_probs_f setter, vrna_ud_get_probs_f getter)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000106"/> <parblock><para>This function is attached as method <computeroutput>ud_set_prob_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ud_set_prob_cb()` in the :doc:`/api_python`</verbatim>.  </para>
</parblock></para>
</listitem>
<varlistentry><term>Global <ref refid="group__domains__up_1gaeaa09aa8b60bc87d3ad92d446cb1b8c0" kindref="member">vrna_ud_set_prod_rule_cb</ref>  (vrna_fold_compound_t *fc, vrna_ud_production_f pre_cb, vrna_ud_f e_cb)</term></varlistentry>
<listitem><para><anchor id="wrappers_1_wrappers000104"/> <parblock><para>This function is attached as method <computeroutput>ud_set_prod_rule_cb()</computeroutput> to objects of type <computeroutput>fold_compound</computeroutput>. See, e.g.  <verbatim>embed:rst:inline:py:meth:`RNA.fold_compound.ud_set_prod_rule_cb()` in the :doc:`/api_python`</verbatim>. </para>
</parblock></para>
</listitem>
</variablelist>
</para>
    </detaileddescription>
    <location file="wrappers"/>
  </compounddef>
</doxygen>
