<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="hash__tables_8h" kind="file" language="C++">
    <compoundname>hash_tables.h</compoundname>
    <innerclass refid="structvrna__ht__entry__db__t" prot="public">vrna_ht_entry_db_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Abstract interface</header>
      <memberdef kind="typedef" id="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" prot="public" static="no">
        <type>struct vrna_hash_table_s *</type>
        <definition>typedef struct vrna_hash_table_s* vrna_hash_table_t</definition>
        <argsstring></argsstring>
        <name>vrna_hash_table_t</name>
        <briefdescription>
<para>A hash table object. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1ga479db024c70437aa2576d60b373c5262" kindref="member">vrna_ht_free()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="43" column="32" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1ga746d82b4363fda6a7997b83f49b7478d" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* vrna_ht_cmp_f) (void *x, void *y)</definition>
        <argsstring>)(void *x, void *y)</argsstring>
        <name>vrna_ht_cmp_f</name>
        <briefdescription>
<para>Callback function to compare two hash table entries. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" kindref="member">vrna_ht_db_comp()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if x is smaller, +1 if x is larger than y. 0 if <formula id="158">$x == y $</formula> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="55" column="9" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1gace4adf608f9dc246f66f6264d30c0f8d" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() vrna_callback_ht_compare_entries(void *x, void *y)</definition>
        <argsstring>(void *x, void *y)</argsstring>
        <name>vrna_callback_ht_compare_entries</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="60" column="10" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1gaf6e2d97e439b129651c95f28232215fb" prot="public" static="no">
        <type>unsigned int(*</type>
        <definition>typedef unsigned int(* vrna_ht_hashfunc_f) (void *x, unsigned long hashtable_size)</definition>
        <argsstring>)(void *x, unsigned long hashtable_size)</argsstring>
        <name>vrna_ht_hashfunc_f</name>
        <briefdescription>
<para>Callback function to generate a hash key, i.e. hash function. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" kindref="member">vrna_ht_db_hash_func()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashtable_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash table key for entry <computeroutput>x</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="73" column="18" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1ga8533dc0cb44035d5fdb05e3c28922d2b" prot="public" static="no">
        <type>unsigned int()</type>
        <definition>typedef unsigned int() vrna_callback_ht_hash_function(void *x, unsigned long hashtable_size)</definition>
        <argsstring>(void *x, unsigned long hashtable_size)</argsstring>
        <name>vrna_callback_ht_hash_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="78" column="19" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" prot="public" static="no">
        <type>int(*</type>
        <definition>typedef int(* vrna_ht_free_f) (void *x)</definition>
        <argsstring>)(void *x)</argsstring>
        <name>vrna_ht_free_f</name>
        <briefdescription>
<para>Callback function to free a hash table entry. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" kindref="member">vrna_ht_db_free_entry()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="89" column="9" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__hash__table__utils_1ga3ff18cc70db8bb6f8cfee2c2b1542afc" prot="public" static="no">
        <type>int()</type>
        <definition>typedef int() vrna_callback_ht_free_entry(void *x)</definition>
        <argsstring>(void *x)</argsstring>
        <name>vrna_callback_ht_free_entry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="92" column="10" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
        <definition>vrna_hash_table_t vrna_ht_init</definition>
        <argsstring>(unsigned int b, vrna_ht_cmp_f compare_function, vrna_ht_hashfunc_f hash_function, vrna_ht_free_f free_hash_entry)</argsstring>
        <name>vrna_ht_init</name>
        <param>
          <type>unsigned int</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="group__hash__table__utils_1ga746d82b4363fda6a7997b83f49b7478d" kindref="member">vrna_ht_cmp_f</ref></type>
          <declname>compare_function</declname>
        </param>
        <param>
          <type><ref refid="group__hash__table__utils_1gaf6e2d97e439b129651c95f28232215fb" kindref="member">vrna_ht_hashfunc_f</ref></type>
          <declname>hash_function</declname>
        </param>
        <param>
          <type><ref refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" kindref="member">vrna_ht_free_f</ref></type>
          <declname>free_hash_entry</declname>
        </param>
        <briefdescription>
<para>Get an initialized hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>This function returns a ready-to-use hash table with pre-allocated memory for a particular number of entries.</para>
<para><simplesect kind="note"><para><parblock><para>If all function pointers are <computeroutput>NULL</computeroutput>, this function initializes the hash table with <emphasis>default functions</emphasis>, i.e.<itemizedlist>
<listitem><para><ref refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" kindref="member">vrna_ht_db_comp()</ref> for the <computeroutput>compare_function</computeroutput>,</para>
</listitem><listitem><para><ref refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" kindref="member">vrna_ht_db_hash_func()</ref> for the <computeroutput>hash_function</computeroutput>, and</para>
</listitem><listitem><para><ref refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" kindref="member">vrna_ht_db_free_entry()</ref> for the <computeroutput>free_hash_entry</computeroutput> </para>
</listitem></itemizedlist>
</para>
<para>arguments. </para>
</parblock></para>
</simplesect>
</para>
<para><simplesect kind="warning"><para>If <computeroutput>hash_bits</computeroutput> is larger than 27 you have to compile it with the flag gcc -mcmodel=large.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bits for the hash table. This determines the size ( <formula id="159">$2^b -1$</formula>). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>compare_function</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to compare any two entries in the hash table (may be <computeroutput>NULL</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash_function</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to retrieve the hash value of any entry (may be <computeroutput>NULL</computeroutput>) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>free_hash_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>A function pointer to free the memory occupied by any entry (may be <computeroutput>NULL</computeroutput>) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>An initialized, empty hash table, or <computeroutput>NULL</computeroutput> on any error </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="122" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="122" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga1d7a50bb20b32275e742ec575966412b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long vrna_ht_size</definition>
        <argsstring>(vrna_hash_table_t ht)</argsstring>
        <name>vrna_ht_size</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <briefdescription>
<para>Get the size of the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the hash table, i.e. the maximum number of entries </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="135" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="135" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga928e7a27a9d34d254ce3855f1ab1d190" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned long</type>
        <definition>unsigned long vrna_ht_collisions</definition>
        <argsstring>(struct vrna_hash_table_s *ht)</argsstring>
        <name>vrna_ht_collisions</name>
        <param>
          <type>struct vrna_hash_table_s *</type>
          <declname>ht</declname>
        </param>
        <briefdescription>
<para>Get the number of collisions in the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of collisions in the hash table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="145" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="145" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga38f124472c8e7e75f067d3b27b43da09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* vrna_ht_get</definition>
        <argsstring>(vrna_hash_table_t ht, void *x)</argsstring>
        <name>vrna_ht_get</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Get an element from the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>This function takes an object <computeroutput>x</computeroutput> and performs a look-up whether the object is stored within the hash table <computeroutput>ht</computeroutput>. If the object is already stored in <computeroutput>ht</computeroutput>, the function simply returns the entry, otherwise it returns <computeroutput>NULL</computeroutput>.</para>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1ga4d2189ce8048f031a15ca5e4b290d494" kindref="member">vrna_ht_insert()</ref>, vrna_hash_delete(), <ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash entry to look-up </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The entry <computeroutput>x</computeroutput> if it is stored in <computeroutput>ht</computeroutput>, <computeroutput>NULL</computeroutput> otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="163" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="163" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga4d2189ce8048f031a15ca5e4b290d494" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_ht_insert</definition>
        <argsstring>(vrna_hash_table_t ht, void *x)</argsstring>
        <name>vrna_ht_insert</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Insert an object into a hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>Writes the pointer to your hash entry into the table.</para>
<para><simplesect kind="warning"><para>In case of collisions, this function simply increments the hash key until a free entry in the hash table is found.</para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, vrna_hash_delete(), <ref refid="group__hash__table__utils_1gab90583f8f7395e735c865ad2ebdb3c29" kindref="member">vrna_ht_clear()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, 1 if the value is already in the hash table, -1 on error. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="183" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="183" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga1162aa0d1bd82af7420bb727a87d3e2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_ht_remove</definition>
        <argsstring>(vrna_hash_table_t ht, void *x)</argsstring>
        <name>vrna_ht_remove</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Remove an object from the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>Deletes the pointer to your hash entry from the table.</para>
<para><simplesect kind="note"><para>This function doesn&apos;t free any memory occupied by the hash entry.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash entry </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="199" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="199" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1gab90583f8f7395e735c865ad2ebdb3c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_ht_clear</definition>
        <argsstring>(vrna_hash_table_t ht)</argsstring>
        <name>vrna_ht_clear</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <briefdescription>
<para>Clear the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes all entries from the hash table and automatically free&apos;s the memory occupied by each entry using the bound <ref refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" kindref="member">vrna_ht_free_f()</ref> function.</para>
<para><simplesect kind="see"><para><ref refid="group__hash__table__utils_1ga479db024c70437aa2576d60b373c5262" kindref="member">vrna_ht_free()</ref>, <ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="215" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="215" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1ga479db024c70437aa2576d60b373c5262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vrna_ht_free</definition>
        <argsstring>(vrna_hash_table_t ht)</argsstring>
        <name>vrna_ht_free</name>
        <param>
          <type><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></type>
          <declname>ht</declname>
        </param>
        <briefdescription>
<para>Free all memory occupied by the hash table. </para>
        </briefdescription>
        <detaileddescription>
<para>This function removes all entries from the hash table by calling the <ref refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" kindref="member">vrna_ht_free_f()</ref> function for each entry. Finally, the memory occupied by the hash table itself is free&apos;d as well.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ht</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="229" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="229" declcolumn="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Dot-Bracket / Free Energy entries</header>
      <memberdef kind="function" id="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_ht_db_comp</definition>
        <argsstring>(void *x, void *y)</argsstring>
        <name>vrna_ht_db_comp</name>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Default hash table entry comparison. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default comparison function for hash table entries. It assumes the both entries <computeroutput>x</computeroutput> and <computeroutput>y</computeroutput> are of type <ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref> and compares the <computeroutput>structure</computeroutput> attribute of both entries</para>
<para><simplesect kind="see"><para><ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref>, <ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" kindref="member">vrna_ht_db_hash_func()</ref>, <ref refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" kindref="member">vrna_ht_db_free_entry()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry of type <ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry of type <ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if x is smaller, +1 if x is larger than y. 0 if both are equal. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="265" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="265" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int vrna_ht_db_hash_func</definition>
        <argsstring>(void *x, unsigned long hashtable_size)</argsstring>
        <name>vrna_ht_db_hash_func</name>
        <param>
          <type>void *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>hashtable_size</declname>
        </param>
        <briefdescription>
<para>Default hash function. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the default hash function for hash table insertion/lookup. It assumes that entries are of type <ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref> and uses the Bob Jenkins 1996 mix function to create a hash key from the <computeroutput>structure</computeroutput> attribute of the hash entry.</para>
<para><simplesect kind="see"><para><ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref>, <ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" kindref="member">vrna_ht_db_comp()</ref>, <ref refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" kindref="member">vrna_ht_db_free_entry()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>A hash table entry to compute the key for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashtable_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the hash table </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The hash key for entry <computeroutput>x</computeroutput> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="284" column="1" declfile="ViennaRNA/datastructures/hash_tables.h" declline="284" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int vrna_ht_db_free_entry</definition>
        <argsstring>(void *hash_entry)</argsstring>
        <name>vrna_ht_db_free_entry</name>
        <param>
          <type>void *</type>
          <declname>hash_entry</declname>
        </param>
        <briefdescription>
<para>Default function to free memory occupied by a hash entry. </para>
        </briefdescription>
        <detaileddescription>
<para>This function assumes that hash entries are of type <ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref> and free&apos;s the memory occupied by that entry.</para>
<para><simplesect kind="see"><para><ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref>, <ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init()</ref>, <ref refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" kindref="member">vrna_ht_db_comp()</ref>, <ref refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" kindref="member">vrna_ht_db_hash_func()</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash_entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The hash entry to remove from memory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="299" column="5" declfile="ViennaRNA/datastructures/hash_tables.h" declline="299" declcolumn="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="hash__tables_8h_1aab347a3c03fbe8e7319551b9fa0cce4a" prot="public" static="no">
        <name>DEPRECATED</name>
        <param><defname>func   </defname></param>
        <param><defname>msg</defname></param>
        <initializer>func</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ViennaRNA/datastructures/hash_tables.h" line="18" column="11" bodyfile="ViennaRNA/datastructures/hash_tables.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementations of hash table functions. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>VIENNA_RNA_PACKAGE_HASH_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VIENNA_RNA_PACKAGE_HASH_UTIL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Taken<sp/>from<sp/>the<sp/>barriers<sp/>tool<sp/>and<sp/>modified<sp/>by<sp/>GE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>VRNA_WARN_DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(DEPRECATED)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/>undef<sp/>DEPRECATED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(&quot;&quot;</highlight><highlight class="normal">,<sp/>msg)))</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>elif<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func<sp/>__attribute__<sp/>((deprecated(msg)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>define<sp/>DEPRECATED(func,<sp/>msg)<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">vrna_hash_table_s<sp/>*<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group__hash__table__utils_1ga746d82b4363fda6a7997b83f49b7478d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__hash__table__utils_1ga746d82b4363fda6a7997b83f49b7478d" kindref="member">vrna_ht_cmp_f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">DEPRECATED(</highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(vrna_callback_ht_compare_entries)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*y),</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ht_cmp_f<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="group__hash__table__utils_1gaf6e2d97e439b129651c95f28232215fb" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__hash__table__utils_1gaf6e2d97e439b129651c95f28232215fb" kindref="member">vrna_ht_hashfunc_f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x,</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hashtable_size);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal">DEPRECATED(</highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(vrna_callback_ht_hash_function)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hashtable_size),</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ht_hashfunc_f<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>int<sp/>(*<ref refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" kindref="member">vrna_ht_free_f</ref>)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">DEPRECATED(</highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>(vrna_callback_ht_free_entry)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*x),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Use<sp/>vrna_ht_free_f<sp/>instead!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref></highlight></codeline>
<codeline lineno="122" refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1gaa15b43574b54d1e8d4309b18c29834d6" kindref="member">vrna_ht_init</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hash__table__utils_1ga746d82b4363fda6a7997b83f49b7478d" kindref="member">vrna_ht_cmp_f</ref><sp/>compare_function,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hash__table__utils_1gaf6e2d97e439b129651c95f28232215fb" kindref="member">vrna_ht_hashfunc_f</ref><sp/><sp/><sp/>hash_function,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hash__table__utils_1ga306abe71fe6a6515b6f2eba5e27187ca" kindref="member">vrna_ht_free_f</ref><sp/><sp/><sp/><sp/><sp/><sp/>free_hash_entry);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group__hash__table__utils_1ga1d7a50bb20b32275e742ec575966412b" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga1d7a50bb20b32275e742ec575966412b" kindref="member">vrna_ht_size</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/>ht);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="group__hash__table__utils_1ga928e7a27a9d34d254ce3855f1ab1d190" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga928e7a27a9d34d254ce3855f1ab1d190" kindref="member">vrna_ht_collisions</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>vrna_hash_table_s<sp/>*ht);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="163" refid="group__hash__table__utils_1ga38f124472c8e7e75f067d3b27b43da09" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga38f124472c8e7e75f067d3b27b43da09" kindref="member">vrna_ht_get</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/>ht,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183" refid="group__hash__table__utils_1ga4d2189ce8048f031a15ca5e4b290d494" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga4d2189ce8048f031a15ca5e4b290d494" kindref="member">vrna_ht_insert</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/><sp/>ht,</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="group__hash__table__utils_1ga1162aa0d1bd82af7420bb727a87d3e2f" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga1162aa0d1bd82af7420bb727a87d3e2f" kindref="member">vrna_ht_remove</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/><sp/>ht,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="group__hash__table__utils_1gab90583f8f7395e735c865ad2ebdb3c29" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1gab90583f8f7395e735c865ad2ebdb3c29" kindref="member">vrna_ht_clear</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/>ht);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group__hash__table__utils_1ga479db024c70437aa2576d60b373c5262" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1ga479db024c70437aa2576d60b373c5262" kindref="member">vrna_ht_free</ref>(<ref refid="group__hash__table__utils_1gabc7c6f41b718c8e23929e528891a89c4" kindref="member">vrna_hash_table_t</ref><sp/>ht);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>abstract<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="structvrna__ht__entry__db__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="246" refid="structvrna__ht__entry__db__t_1a094ce43244eced065ea0e5fa50287a25" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/>*<ref refid="structvrna__ht__entry__db__t_1a094ce43244eced065ea0e5fa50287a25" kindref="member">structure</ref>;<sp/></highlight></codeline>
<codeline lineno="247" refid="structvrna__ht__entry__db__t_1afffab6040a5cfc3ac465d94d8538d88a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structvrna__ht__entry__db__t_1afffab6040a5cfc3ac465d94d8538d88a" kindref="member">energy</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="248"><highlight class="normal">}<sp/><ref refid="structvrna__ht__entry__db__t" kindref="compound">vrna_ht_entry_db_t</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1gac4ec0b8372d50d7347a63f140f340962" kindref="member">vrna_ht_db_comp</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*x,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>*y);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" refkind="member"><highlight class="normal"><ref refid="group__hash__table__utils_1gad133721a3cd2f8ca259fe315d86035a7" kindref="member">vrna_ht_db_hash_func</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*x,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><sp/>hashtable_size);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="299" refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__hash__table__utils_1gabcdcd0d070b3dfd2634a09e7838acf66" kindref="member">vrna_ht_db_free_entry</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*hash_entry);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>End<sp/>of<sp/>dot-bracket<sp/>interface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ViennaRNA/datastructures/hash_tables.h"/>
  </compounddef>
</doxygen>
