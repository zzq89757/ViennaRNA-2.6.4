# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _RNAxplorer
else:
    import _RNAxplorer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _RNAxplorer.delete_SwigPyIterator

    def value(self) -> "PyObject *":
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _RNAxplorer.SwigPyIterator_value(self)

    def incr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RNAxplorer.SwigPyIterator_incr(self, n)

    def decr(self, n: "size_t"=1) -> "swig::SwigPyIterator *":
        r"""
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        """
        return _RNAxplorer.SwigPyIterator_decr(self, n)

    def distance(self, x: "SwigPyIterator") -> "ptrdiff_t":
        r"""
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RNAxplorer.SwigPyIterator_distance(self, x)

    def equal(self, x: "SwigPyIterator") -> "bool":
        r"""
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RNAxplorer.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _RNAxplorer.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _RNAxplorer.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _RNAxplorer.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _RNAxplorer.SwigPyIterator_previous(self)

    def advance(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RNAxplorer.SwigPyIterator_advance(self, n)

    def __eq__(self, x: "SwigPyIterator") -> "bool":
        r"""
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RNAxplorer.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: "SwigPyIterator") -> "bool":
        r"""
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RNAxplorer.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RNAxplorer.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator &":
        r"""
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RNAxplorer.SwigPyIterator___isub__(self, n)

    def __add__(self, n: "ptrdiff_t") -> "swig::SwigPyIterator *":
        r"""
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _RNAxplorer.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _RNAxplorer.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _RNAxplorer:
_RNAxplorer.SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(StringVector self) -> SwigPyIterator"""
        return _RNAxplorer.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(StringVector self) -> bool"""
        return _RNAxplorer.StringVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(StringVector self) -> bool"""
        return _RNAxplorer.StringVector___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        r"""__len__(StringVector self) -> std::vector< std::string >::size_type"""
        return _RNAxplorer.StringVector___len__(self)

    def __getslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "std::vector< std::string,std::allocator< std::string > > *":
        r"""
        __getslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StringVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _RNAxplorer.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StringVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _RNAxplorer.StringVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< std::string >::difference_type", j: "std::vector< std::string >::difference_type") -> "void":
        r"""
        __delslice__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _RNAxplorer.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(StringVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RNAxplorer.StringVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        r"""
        __getitem__(StringVector self, PySliceObject * slice) -> StringVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StringVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _RNAxplorer.StringVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(StringVector self, PySliceObject * slice, StringVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StringVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StringVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        r"""pop(StringVector self) -> std::vector< std::string >::value_type"""
        return _RNAxplorer.StringVector_pop(self)

    def append(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        append(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(StringVector self) -> bool"""
        return _RNAxplorer.StringVector_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        r"""size(StringVector self) -> std::vector< std::string >::size_type"""
        return _RNAxplorer.StringVector_size(self)

    def swap(self, v: "StringVector") -> "void":
        r"""
        swap(StringVector self, StringVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _RNAxplorer.StringVector_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        r"""begin(StringVector self) -> std::vector< std::string >::iterator"""
        return _RNAxplorer.StringVector_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        r"""end(StringVector self) -> std::vector< std::string >::iterator"""
        return _RNAxplorer.StringVector_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rbegin(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _RNAxplorer.StringVector_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        r"""rend(StringVector self) -> std::vector< std::string >::reverse_iterator"""
        return _RNAxplorer.StringVector_rend(self)

    def clear(self) -> "void":
        r"""clear(StringVector self)"""
        return _RNAxplorer.StringVector_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        r"""get_allocator(StringVector self) -> std::vector< std::string >::allocator_type"""
        return _RNAxplorer.StringVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(StringVector self)"""
        return _RNAxplorer.StringVector_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        r"""
        erase(StringVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StringVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _RNAxplorer.StringVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(StringVector self) -> StringVector
        __init__(StringVector self, StringVector other) -> StringVector

        Parameters
        ----------
        other: std::vector< std::string > const &

        __init__(StringVector self, std::vector< std::string >::size_type size) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(StringVector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StringVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        _RNAxplorer.StringVector_swiginit(self, _RNAxplorer.new_StringVector(*args))

    def push_back(self, x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        push_back(StringVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        r"""front(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _RNAxplorer.StringVector_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        r"""back(StringVector self) -> std::vector< std::string >::value_type const &"""
        return _RNAxplorer.StringVector_back(self)

    def assign(self, n: "std::vector< std::string >::size_type", x: "std::vector< std::string >::value_type const &") -> "void":
        r"""
        assign(StringVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(StringVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StringVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StringVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _RNAxplorer.StringVector_insert(self, *args)

    def reserve(self, n: "std::vector< std::string >::size_type") -> "void":
        r"""
        reserve(StringVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _RNAxplorer.StringVector_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        r"""capacity(StringVector self) -> std::vector< std::string >::size_type"""
        return _RNAxplorer.StringVector_capacity(self)
    __swig_destroy__ = _RNAxplorer.delete_StringVector

# Register StringVector in _RNAxplorer:
_RNAxplorer.StringVector_swigregister(StringVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        r"""iterator(DoubleVector self) -> SwigPyIterator"""
        return _RNAxplorer.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        r"""__nonzero__(DoubleVector self) -> bool"""
        return _RNAxplorer.DoubleVector___nonzero__(self)

    def __bool__(self) -> "bool":
        r"""__bool__(DoubleVector self) -> bool"""
        return _RNAxplorer.DoubleVector___bool__(self)

    def __len__(self) -> "std::vector< double >::size_type":
        r"""__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _RNAxplorer.DoubleVector___len__(self)

    def __getslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "std::vector< double,std::allocator< double > > *":
        r"""
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _RNAxplorer.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        r"""
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _RNAxplorer.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i: "std::vector< double >::difference_type", j: "std::vector< double >::difference_type") -> "void":
        r"""
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _RNAxplorer.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        r"""
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _RNAxplorer.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        r"""
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _RNAxplorer.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        r"""
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector___setitem__(self, *args)

    def pop(self) -> "std::vector< double >::value_type":
        r"""pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _RNAxplorer.DoubleVector_pop(self)

    def append(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector_append(self, x)

    def empty(self) -> "bool":
        r"""empty(DoubleVector self) -> bool"""
        return _RNAxplorer.DoubleVector_empty(self)

    def size(self) -> "std::vector< double >::size_type":
        r"""size(DoubleVector self) -> std::vector< double >::size_type"""
        return _RNAxplorer.DoubleVector_size(self)

    def swap(self, v: "DoubleVector") -> "void":
        r"""
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _RNAxplorer.DoubleVector_swap(self, v)

    def begin(self) -> "std::vector< double >::iterator":
        r"""begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _RNAxplorer.DoubleVector_begin(self)

    def end(self) -> "std::vector< double >::iterator":
        r"""end(DoubleVector self) -> std::vector< double >::iterator"""
        return _RNAxplorer.DoubleVector_end(self)

    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        r"""rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _RNAxplorer.DoubleVector_rbegin(self)

    def rend(self) -> "std::vector< double >::reverse_iterator":
        r"""rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _RNAxplorer.DoubleVector_rend(self)

    def clear(self) -> "void":
        r"""clear(DoubleVector self)"""
        return _RNAxplorer.DoubleVector_clear(self)

    def get_allocator(self) -> "std::vector< double >::allocator_type":
        r"""get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _RNAxplorer.DoubleVector_get_allocator(self)

    def pop_back(self) -> "void":
        r"""pop_back(DoubleVector self)"""
        return _RNAxplorer.DoubleVector_pop_back(self)

    def erase(self, *args) -> "std::vector< double >::iterator":
        r"""
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _RNAxplorer.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(DoubleVector self) -> DoubleVector
        __init__(DoubleVector self, DoubleVector other) -> DoubleVector

        Parameters
        ----------
        other: std::vector< double > const &

        __init__(DoubleVector self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(DoubleVector self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        _RNAxplorer.DoubleVector_swiginit(self, _RNAxplorer.new_DoubleVector(*args))

    def push_back(self, x: "std::vector< double >::value_type const &") -> "void":
        r"""
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector_push_back(self, x)

    def front(self) -> "std::vector< double >::value_type const &":
        r"""front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _RNAxplorer.DoubleVector_front(self)

    def back(self) -> "std::vector< double >::value_type const &":
        r"""back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _RNAxplorer.DoubleVector_back(self)

    def assign(self, n: "std::vector< double >::size_type", x: "std::vector< double >::value_type const &") -> "void":
        r"""
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector_assign(self, n, x)

    def resize(self, *args) -> "void":
        r"""
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector_resize(self, *args)

    def insert(self, *args) -> "void":
        r"""
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _RNAxplorer.DoubleVector_insert(self, *args)

    def reserve(self, n: "std::vector< double >::size_type") -> "void":
        r"""
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _RNAxplorer.DoubleVector_reserve(self, n)

    def capacity(self) -> "std::vector< double >::size_type":
        r"""capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _RNAxplorer.DoubleVector_capacity(self)
    __swig_destroy__ = _RNAxplorer.delete_DoubleVector

# Register DoubleVector in _RNAxplorer:
_RNAxplorer.DoubleVector_swigregister(DoubleVector)


def barrier_estimate_2D(seq: "char *", md_p: "vrna_md_t *", s1: "char *", s2: "char *", maximum_distance1: "int", maximum_distance2: "int") -> "float":
    r"""
    barrier_estimate_2D(char * seq, vrna_md_t * md_p, char * s1, char * s2, int maximum_distance1, int maximum_distance2) -> float

    Parameters
    ----------
    seq: char *
    md_p: vrna_md_t *
    s1: char *
    s2: char *
    maximum_distance1: int
    maximum_distance2: int

    """
    return _RNAxplorer.barrier_estimate_2D(seq, md_p, s1, s2, maximum_distance1, maximum_distance2)

def computeInitialDistortion(vc: "vrna_fold_compound_t *", s1: "char const *", s2: "char const *") -> "double *, double *":
    r"""
    computeInitialDistortion(vrna_fold_compound_t * vc, char const * s1, char const * s2)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    s1: char const *
    s2: char const *

    """
    return _RNAxplorer.computeInitialDistortion(vc, s1, s2)

def computeDistortion(vc: "vrna_fold_compound_t *", s0: "char const *", s1: "char const *", s2: "char const *") -> "double *, double *":
    r"""
    computeDistortion(vrna_fold_compound_t * vc, char const * s0, char const * s1, char const * s2)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    s0: char const *
    s1: char const *
    s2: char const *

    """
    return _RNAxplorer.computeDistortion(vc, s0, s1, s2)

def rescaleEnergy(vc: "vrna_fold_compound_t *", rescale: "double") -> "void":
    r"""
    rescaleEnergy(vrna_fold_compound_t * vc, double rescale)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    rescale: double

    """
    return _RNAxplorer.rescaleEnergy(vc, rescale)

def convertGrid_toList(grid: "gridLandscapeT") -> "gridLandscapeT *":
    r"""
    convertGrid_toList(gridLandscapeT grid) -> gridLandscapeT

    Parameters
    ----------
    grid: gridLandscapeT *

    """
    return _RNAxplorer.convertGrid_toList(grid)

def addStructuresToGrid(grid: "gridLandscapeT", structures: "StringVector") -> "void":
    r"""
    addStructuresToGrid(gridLandscapeT grid, StringVector structures)

    Parameters
    ----------
    grid: gridLandscapeT *
    structures: std::vector< std::string,std::allocator< std::string > >

    """
    return _RNAxplorer.addStructuresToGrid(grid, structures)
class gridpointT(object):
    r"""Proxy of C++ gridpointT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    k = property(_RNAxplorer.gridpointT_k_get, _RNAxplorer.gridpointT_k_set, doc=r"""k : int""")
    l = property(_RNAxplorer.gridpointT_l_get, _RNAxplorer.gridpointT_l_set, doc=r"""l : int""")
    num_structs = property(_RNAxplorer.gridpointT_num_structs_get, _RNAxplorer.gridpointT_num_structs_set, doc=r"""num_structs : int""")
    max_structs = property(_RNAxplorer.gridpointT_max_structs_get, _RNAxplorer.gridpointT_max_structs_set, doc=r"""max_structs : int""")
    structures = property(_RNAxplorer.gridpointT_structures_get, _RNAxplorer.gridpointT_structures_set, doc=r"""structures : p.p.char""")
    pf = property(_RNAxplorer.gridpointT_pf_get, _RNAxplorer.gridpointT_pf_set, doc=r"""pf : double""")
    mfe = property(_RNAxplorer.gridpointT_mfe_get, _RNAxplorer.gridpointT_mfe_set, doc=r"""mfe : double""")

    def __init__(self):
        r"""__init__(gridpointT self) -> gridpointT"""
        _RNAxplorer.gridpointT_swiginit(self, _RNAxplorer.new_gridpointT())
    __swig_destroy__ = _RNAxplorer.delete_gridpointT

# Register gridpointT in _RNAxplorer:
_RNAxplorer.gridpointT_swigregister(gridpointT)

class gridLandscapeT(object):
    r"""Proxy of C++ gridLandscapeT class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def addStructure(self, structure: "char *") -> "void":
        r"""
        addStructure(gridLandscapeT self, char * structure)

        Parameters
        ----------
        structure: char *

        """
        return _RNAxplorer.gridLandscapeT_addStructure(self, structure)
    size1 = property(_RNAxplorer.gridLandscapeT_size1_get, _RNAxplorer.gridLandscapeT_size1_set, doc=r"""size1 : unsigned int""")
    size2 = property(_RNAxplorer.gridLandscapeT_size2_get, _RNAxplorer.gridLandscapeT_size2_set, doc=r"""size2 : unsigned int""")
    firstReference = property(_RNAxplorer.gridLandscapeT_firstReference_get, _RNAxplorer.gridLandscapeT_firstReference_set, doc=r"""firstReference : p.char""")
    secondReference = property(_RNAxplorer.gridLandscapeT_secondReference_get, _RNAxplorer.gridLandscapeT_secondReference_set, doc=r"""secondReference : p.char""")
    landscape = property(_RNAxplorer.gridLandscapeT_landscape_get, _RNAxplorer.gridLandscapeT_landscape_set, doc=r"""landscape : p.p.gridpointT""")

    def __init__(self):
        r"""__init__(gridLandscapeT self) -> gridLandscapeT"""
        _RNAxplorer.gridLandscapeT_swiginit(self, _RNAxplorer.new_gridLandscapeT())
    __swig_destroy__ = _RNAxplorer.delete_gridLandscapeT

# Register gridLandscapeT in _RNAxplorer:
_RNAxplorer.gridLandscapeT_swigregister(gridLandscapeT)

class kl_soft_constraints(object):
    r"""Proxy of C++ kl_soft_constraints class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    kT = property(_RNAxplorer.kl_soft_constraints_kT_get, _RNAxplorer.kl_soft_constraints_kT_set, doc=r"""kT : double""")
    idx = property(_RNAxplorer.kl_soft_constraints_idx_get, _RNAxplorer.kl_soft_constraints_idx_set, doc=r"""idx : p.int""")
    ref1 = property(_RNAxplorer.kl_soft_constraints_ref1_get, _RNAxplorer.kl_soft_constraints_ref1_set, doc=r"""ref1 : p.char""")
    ref2 = property(_RNAxplorer.kl_soft_constraints_ref2_get, _RNAxplorer.kl_soft_constraints_ref2_set, doc=r"""ref2 : p.char""")
    x = property(_RNAxplorer.kl_soft_constraints_x_get, _RNAxplorer.kl_soft_constraints_x_set, doc=r"""x : double""")
    y = property(_RNAxplorer.kl_soft_constraints_y_get, _RNAxplorer.kl_soft_constraints_y_set, doc=r"""y : double""")
    referenceBPs1 = property(_RNAxplorer.kl_soft_constraints_referenceBPs1_get, _RNAxplorer.kl_soft_constraints_referenceBPs1_set, doc=r"""referenceBPs1 : p.unsigned int""")
    referenceBPs2 = property(_RNAxplorer.kl_soft_constraints_referenceBPs2_get, _RNAxplorer.kl_soft_constraints_referenceBPs2_set, doc=r"""referenceBPs2 : p.unsigned int""")
    reference_pt1 = property(_RNAxplorer.kl_soft_constraints_reference_pt1_get, _RNAxplorer.kl_soft_constraints_reference_pt1_set, doc=r"""reference_pt1 : p.short""")
    reference_pt2 = property(_RNAxplorer.kl_soft_constraints_reference_pt2_get, _RNAxplorer.kl_soft_constraints_reference_pt2_set, doc=r"""reference_pt2 : p.short""")

    def __init__(self):
        r"""__init__(kl_soft_constraints self) -> kl_soft_constraints"""
        _RNAxplorer.kl_soft_constraints_swiginit(self, _RNAxplorer.new_kl_soft_constraints())
    __swig_destroy__ = _RNAxplorer.delete_kl_soft_constraints

# Register kl_soft_constraints in _RNAxplorer:
_RNAxplorer.kl_soft_constraints_swigregister(kl_soft_constraints)


def kl_init_datastructures(vc: "vrna_fold_compound_t *", s1: "char const *", s2: "char const *", x: "double", y: "double") -> "kl_soft_constraints *":
    r"""
    kl_init_datastructures(vrna_fold_compound_t * vc, char const * s1, char const * s2, double x, double y) -> kl_soft_constraints

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    s1: char const *
    s2: char const *
    x: double
    y: double

    """
    return _RNAxplorer.kl_init_datastructures(vc, s1, s2, x, y)

def free_kl_soft_constraints(data: "void *") -> "void":
    r"""
    free_kl_soft_constraints(void * data)

    Parameters
    ----------
    data: void *

    """
    return _RNAxplorer.free_kl_soft_constraints(data)

def kl_pseudo_energy(i: "int", j: "int", k: "int", l: "int", decomp: "unsigned char", data: "void *") -> "FLT_OR_DBL":
    r"""
    kl_pseudo_energy(int i, int j, int k, int l, unsigned char decomp, void * data) -> FLT_OR_DBL

    Parameters
    ----------
    i: int
    j: int
    k: int
    l: int
    decomp: unsigned char
    data: void *

    """
    return _RNAxplorer.kl_pseudo_energy(i, j, k, l, decomp, data)

def kl_exp_pseudo_energy(i: "int", j: "int", k: "int", l: "int", decomp: "unsigned char", data: "void *") -> "FLT_OR_DBL":
    r"""
    kl_exp_pseudo_energy(int i, int j, int k, int l, unsigned char decomp, void * data) -> FLT_OR_DBL

    Parameters
    ----------
    i: int
    j: int
    k: int
    l: int
    decomp: unsigned char
    data: void *

    """
    return _RNAxplorer.kl_exp_pseudo_energy(i, j, k, l, decomp, data)

def fillGridWithSamples(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", s1: "char const *", s2: "char const *", maxIterations: "int") -> "void":
    r"""
    fillGridWithSamples(vrna_fold_compound_t * vc, gridLandscapeT grid, char const * s1, char const * s2, int maxIterations)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    s1: char const *
    s2: char const *
    maxIterations: int

    """
    return _RNAxplorer.fillGridWithSamples(vc, grid, s1, s2, maxIterations)

def fillGridStepwiseBothRef(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", relaxFactor: "float", relax: "int", shift: "int", shift_to_first: "int", verbose: "int", maxIterations: "int", maxSteps: "int") -> "void":
    r"""
    fillGridStepwiseBothRef(vrna_fold_compound_t * vc, gridLandscapeT grid, float relaxFactor, int relax, int shift, int shift_to_first, int verbose, int maxIterations, int maxSteps)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    relaxFactor: float
    relax: int
    shift: int
    shift_to_first: int
    verbose: int
    maxIterations: int
    maxSteps: int

    """
    return _RNAxplorer.fillGridStepwiseBothRef(vc, grid, relaxFactor, relax, shift, shift_to_first, verbose, maxIterations, maxSteps)

def fillGridStepwiseFirstRef(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", relaxFactor: "float", relax: "int", verbose: "int", maxIterations: "int", maxSteps: "int") -> "void":
    r"""
    fillGridStepwiseFirstRef(vrna_fold_compound_t * vc, gridLandscapeT grid, float relaxFactor, int relax, int verbose, int maxIterations, int maxSteps)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    relaxFactor: float
    relax: int
    verbose: int
    maxIterations: int
    maxSteps: int

    """
    return _RNAxplorer.fillGridStepwiseFirstRef(vc, grid, relaxFactor, relax, verbose, maxIterations, maxSteps)

def fillGridStepwiseSecondRef(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", relaxFactor: "float", relax: "int", verbose: "int", maxIterations: "int", maxSteps: "int") -> "void":
    r"""
    fillGridStepwiseSecondRef(vrna_fold_compound_t * vc, gridLandscapeT grid, float relaxFactor, int relax, int verbose, int maxIterations, int maxSteps)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    relaxFactor: float
    relax: int
    verbose: int
    maxIterations: int
    maxSteps: int

    """
    return _RNAxplorer.fillGridStepwiseSecondRef(vc, grid, relaxFactor, relax, verbose, maxIterations, maxSteps)

def initLandscape(s: "char const *", s1: "char const *", s2: "char const *") -> "gridLandscapeT *":
    r"""
    initLandscape(char const * s, char const * s1, char const * s2) -> gridLandscapeT

    Parameters
    ----------
    s: char const *
    s1: char const *
    s2: char const *

    """
    return _RNAxplorer.initLandscape(s, s1, s2)

def addSoftconstraints(vc: "vrna_fold_compound_t *", s1: "char const *", s2: "char const *", distortion_x: "double", distortion_y: "double") -> "void":
    r"""
    addSoftconstraints(vrna_fold_compound_t * vc, char const * s1, char const * s2, double distortion_x, double distortion_y)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    s1: char const *
    s2: char const *
    distortion_x: double
    distortion_y: double

    """
    return _RNAxplorer.addSoftconstraints(vc, s1, s2, distortion_x, distortion_y)

def estimate_landscape(vc: "vrna_fold_compound_t *", s1: "char const *", s2: "char const *", maxIterations: "int", extended_options: "char *") -> "gridLandscapeT *":
    r"""
    estimate_landscape(vrna_fold_compound_t * vc, char const * s1, char const * s2, int maxIterations, char * extended_options) -> gridLandscapeT

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    s1: char const *
    s2: char const *
    maxIterations: int
    extended_options: char *

    """
    return _RNAxplorer.estimate_landscape(vc, s1, s2, maxIterations, extended_options)

def addStructure(grid: "gridLandscapeT", structure: "char *") -> "void":
    r"""
    addStructure(gridLandscapeT grid, char * structure)

    Parameters
    ----------
    grid: gridLandscapeT *
    structure: char *

    """
    return _RNAxplorer.addStructure(grid, structure)

def createModelDetails(circ: "int", uniq_ML: "int", compute_bpp: "int", betaScale: "double") -> "vrna_md_t":
    r"""
    createModelDetails(int circ, int uniq_ML, int compute_bpp, double betaScale) -> vrna_md_t

    Parameters
    ----------
    circ: int
    uniq_ML: int
    compute_bpp: int
    betaScale: double

    """
    return _RNAxplorer.createModelDetails(circ, uniq_ML, compute_bpp, betaScale)

def printLandscape(grid: "gridLandscapeT", vc: "vrna_fold_compound_t *") -> "void":
    r"""
    printLandscape(gridLandscapeT grid, vrna_fold_compound_t * vc)

    Parameters
    ----------
    grid: gridLandscapeT *
    vc: vrna_fold_compound_t *

    """
    return _RNAxplorer.printLandscape(grid, vc)

def free_gridLandscape(grid: "gridLandscapeT") -> "void":
    r"""
    free_gridLandscape(gridLandscapeT grid)

    Parameters
    ----------
    grid: gridLandscapeT *

    """
    return _RNAxplorer.free_gridLandscape(grid)

def computeDistortions(fc: "vrna_fold_compound_t *", structures: "char const **", numberOfStructures: "size_t") -> "std::vector< double,std::allocator< double > >":
    r"""
    computeDistortions(vrna_fold_compound_t * fc, char const ** structures, size_t numberOfStructures) -> DoubleVector

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structures: char const **
    numberOfStructures: size_t

    """
    return _RNAxplorer.computeDistortions(fc, structures, numberOfStructures)

def computeDistortionsMaxDist(fc: "vrna_fold_compound_t *", structures: "char const **", numberOfStructures: "size_t", distances: "double *") -> "std::vector< double,std::allocator< double > >":
    r"""
    computeDistortionsMaxDist(vrna_fold_compound_t * fc, char const ** structures, size_t numberOfStructures, double * distances) -> DoubleVector

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structures: char const **
    numberOfStructures: size_t
    distances: double *

    """
    return _RNAxplorer.computeDistortionsMaxDist(fc, structures, numberOfStructures, distances)

def getMaximalPossibleBPdistance(sequence: "char const *", structure: "char const *") -> "unsigned int":
    r"""
    getMaximalPossibleBPdistance(char const * sequence, char const * structure) -> unsigned int

    Parameters
    ----------
    sequence: char const *
    structure: char const *

    """
    return _RNAxplorer.getMaximalPossibleBPdistance(sequence, structure)

def rxp_computeDistortionsWRTMaxDistance(fc: "vrna_fold_compound_t *", structures: "char const **", numberOfStructures: "size_t", maxDistances: "double *") -> "double *":
    r"""
    rxp_computeDistortionsWRTMaxDistance(vrna_fold_compound_t * fc, char const ** structures, size_t numberOfStructures, double * maxDistances) -> double *

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structures: char const **
    numberOfStructures: size_t
    maxDistances: double *

    """
    return _RNAxplorer.rxp_computeDistortionsWRTMaxDistance(fc, structures, numberOfStructures, maxDistances)

def rxp_computeDistortions(fc: "vrna_fold_compound_t *", structures: "char const **", numberOfStructures: "size_t", mfe: "float", mfeStructure: "char const *") -> "double *":
    r"""
    rxp_computeDistortions(vrna_fold_compound_t * fc, char const ** structures, size_t numberOfStructures, float mfe, char const * mfeStructure) -> double *

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structures: char const **
    numberOfStructures: size_t
    mfe: float
    mfeStructure: char const *

    """
    return _RNAxplorer.rxp_computeDistortions(fc, structures, numberOfStructures, mfe, mfeStructure)

def rxp_computeDistortionsWithMFE(fc: "vrna_fold_compound_t *", structures: "char const **", numberOfStructures: "size_t") -> "double *":
    r"""
    rxp_computeDistortionsWithMFE(vrna_fold_compound_t * fc, char const ** structures, size_t numberOfStructures) -> double *

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structures: char const **
    numberOfStructures: size_t

    """
    return _RNAxplorer.rxp_computeDistortionsWithMFE(fc, structures, numberOfStructures)

def print_matrix(desc: "char *", m: "int", n: "int", a: "double *", lda: "int") -> "void":
    r"""
    print_matrix(char * desc, int m, int n, double * a, int lda)

    Parameters
    ----------
    desc: char *
    m: int
    n: int
    a: double *
    lda: int

    """
    return _RNAxplorer.print_matrix(desc, m, n, a, lda)

def fillGridStepwiseFirstRef_MD(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", relaxFactor: "float", relax: "int", verbose: "int", maxIterations: "int", maxSteps: "int") -> "void":
    r"""
    fillGridStepwiseFirstRef_MD(vrna_fold_compound_t * vc, gridLandscapeT grid, float relaxFactor, int relax, int verbose, int maxIterations, int maxSteps)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    relaxFactor: float
    relax: int
    verbose: int
    maxIterations: int
    maxSteps: int

    """
    return _RNAxplorer.fillGridStepwiseFirstRef_MD(vc, grid, relaxFactor, relax, verbose, maxIterations, maxSteps)

def fillGridStepwiseSecondRef_MD(vc: "vrna_fold_compound_t *", grid: "gridLandscapeT", relaxFactor: "float", relax: "int", verbose: "int", maxIterations: "int", maxSteps: "int") -> "void":
    r"""
    fillGridStepwiseSecondRef_MD(vrna_fold_compound_t * vc, gridLandscapeT grid, float relaxFactor, int relax, int verbose, int maxIterations, int maxSteps)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    grid: gridLandscapeT *
    relaxFactor: float
    relax: int
    verbose: int
    maxIterations: int
    maxSteps: int

    """
    return _RNAxplorer.fillGridStepwiseSecondRef_MD(vc, grid, relaxFactor, relax, verbose, maxIterations, maxSteps)

def estimate_landscapeMD(vc: "vrna_fold_compound_t *", refStructures: "char const **", numberOfReferences: "size_t", maxIterations: "int", extended_options: "char *", indicesAndPercentages: "double *", lengthIndices: "size_t") -> "gridLandscapeT *":
    r"""
    estimate_landscapeMD(vrna_fold_compound_t * vc, char const ** refStructures, size_t numberOfReferences, int maxIterations, char * extended_options, double * indicesAndPercentages, size_t lengthIndices) -> gridLandscapeT

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    refStructures: char const **
    numberOfReferences: size_t
    maxIterations: int
    extended_options: char *
    indicesAndPercentages: double *
    lengthIndices: size_t

    """
    return _RNAxplorer.estimate_landscapeMD(vc, refStructures, numberOfReferences, maxIterations, extended_options, indicesAndPercentages, lengthIndices)

def addSoftconstraintsMD(vc: "vrna_fold_compound_t *", structures: "char const **", numberOfReferences: "int", distortions: "double *", repel: "int") -> "void":
    r"""
    addSoftconstraintsMD(vrna_fold_compound_t * vc, char const ** structures, int numberOfReferences, double * distortions, int repel)

    Parameters
    ----------
    vc: vrna_fold_compound_t *
    structures: char const **
    numberOfReferences: int
    distortions: double *
    repel: int

    """
    return _RNAxplorer.addSoftconstraintsMD(vc, structures, numberOfReferences, distortions, repel)
class sc_dist_class_s(object):
    r"""Proxy of C++ sc_dist_class_s class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ref_num = property(_RNAxplorer.sc_dist_class_s_ref_num_get, _RNAxplorer.sc_dist_class_s_ref_num_set, doc=r"""ref_num : unsigned int""")
    references = property(_RNAxplorer.sc_dist_class_s_references_get, _RNAxplorer.sc_dist_class_s_references_set, doc=r"""references : p.p.char""")
    ref_bps = property(_RNAxplorer.sc_dist_class_s_ref_bps_get, _RNAxplorer.sc_dist_class_s_ref_bps_set, doc=r"""ref_bps : p.p.unsigned int""")
    ref_pts = property(_RNAxplorer.sc_dist_class_s_ref_pts_get, _RNAxplorer.sc_dist_class_s_ref_pts_set, doc=r"""ref_pts : p.p.short""")
    f = property(_RNAxplorer.sc_dist_class_s_f_get, _RNAxplorer.sc_dist_class_s_f_set, doc=r"""f : p.dist_class_func""")
    f_data = property(_RNAxplorer.sc_dist_class_s_f_data_get, _RNAxplorer.sc_dist_class_s_f_data_set, doc=r"""f_data : p.void""")
    f_free = property(_RNAxplorer.sc_dist_class_s_f_free_get, _RNAxplorer.sc_dist_class_s_f_free_set, doc=r"""f_free : p.dist_class_free""")
    kT = property(_RNAxplorer.sc_dist_class_s_kT_get, _RNAxplorer.sc_dist_class_s_kT_set, doc=r"""kT : double""")
    idx = property(_RNAxplorer.sc_dist_class_s_idx_get, _RNAxplorer.sc_dist_class_s_idx_set, doc=r"""idx : p.int""")

    def __init__(self):
        r"""__init__(sc_dist_class_s self) -> sc_dist_class_s"""
        _RNAxplorer.sc_dist_class_s_swiginit(self, _RNAxplorer.new_sc_dist_class_s())
    __swig_destroy__ = _RNAxplorer.delete_sc_dist_class_s

# Register sc_dist_class_s in _RNAxplorer:
_RNAxplorer.sc_dist_class_s_swigregister(sc_dist_class_s)


def sc_exp_f_dist_class(i: "int", j: "int", k: "int", l: "int", decomp: "unsigned char", data: "void *") -> "FLT_OR_DBL":
    r"""
    sc_exp_f_dist_class(int i, int j, int k, int l, unsigned char decomp, void * data) -> FLT_OR_DBL

    Parameters
    ----------
    i: int
    j: int
    k: int
    l: int
    decomp: unsigned char
    data: void *

    """
    return _RNAxplorer.sc_exp_f_dist_class(i, j, k, l, decomp, data)

def sc_f_dist_class(i: "int", j: "int", k: "int", l: "int", decomp: "unsigned char", data: "void *") -> "int":
    r"""
    sc_f_dist_class(int i, int j, int k, int l, unsigned char decomp, void * data) -> int

    Parameters
    ----------
    i: int
    j: int
    k: int
    l: int
    decomp: unsigned char
    data: void *

    """
    return _RNAxplorer.sc_f_dist_class(i, j, k, l, decomp, data)

def sc_dist_class_init(fc: "vrna_fold_compound_t *") -> "sc_dist_class_t *":
    r"""
    sc_dist_class_init(vrna_fold_compound_t * fc) -> sc_dist_class_s

    Parameters
    ----------
    fc: vrna_fold_compound_t *

    """
    return _RNAxplorer.sc_dist_class_init(fc)

def sc_dist_class_destroy(data: "void *") -> "void":
    r"""
    sc_dist_class_destroy(void * data)

    Parameters
    ----------
    data: void *

    """
    return _RNAxplorer.sc_dist_class_destroy(data)

def sc_dist_class_add_ref(d: "sc_dist_class_s", ref_struct: "char const *") -> "void":
    r"""
    sc_dist_class_add_ref(sc_dist_class_s d, char const * ref_struct)

    Parameters
    ----------
    d: sc_dist_class_t *
    ref_struct: char const *

    """
    return _RNAxplorer.sc_dist_class_add_ref(d, ref_struct)
class neighbor(object):
    r"""Proxy of C++ neighbor class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    i = property(_RNAxplorer.neighbor_i_get, _RNAxplorer.neighbor_i_set, doc=r"""i : int""")
    j = property(_RNAxplorer.neighbor_j_get, _RNAxplorer.neighbor_j_set, doc=r"""j : int""")
    en = property(_RNAxplorer.neighbor_en_get, _RNAxplorer.neighbor_en_set, doc=r"""en : float""")

    def __init__(self):
        r"""__init__(neighbor self) -> neighbor"""
        _RNAxplorer.neighbor_swiginit(self, _RNAxplorer.new_neighbor())
    __swig_destroy__ = _RNAxplorer.delete_neighbor

# Register neighbor in _RNAxplorer:
_RNAxplorer.neighbor_swigregister(neighbor)

class meshpoint(object):
    r"""Proxy of C++ meshpoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    s = property(_RNAxplorer.meshpoint_s_get, _RNAxplorer.meshpoint_s_set, doc=r"""s : p.char""")
    en = property(_RNAxplorer.meshpoint_en_get, _RNAxplorer.meshpoint_en_set, doc=r"""en : float""")
    struct_en = property(_RNAxplorer.meshpoint_struct_en_get, _RNAxplorer.meshpoint_struct_en_set, doc=r"""struct_en : float""")
    neighbor_cnt = property(_RNAxplorer.meshpoint_neighbor_cnt_get, _RNAxplorer.meshpoint_neighbor_cnt_set, doc=r"""neighbor_cnt : int""")
    bestNeighborEn = property(_RNAxplorer.meshpoint_bestNeighborEn_get, _RNAxplorer.meshpoint_bestNeighborEn_set, doc=r"""bestNeighborEn : float""")
    bestNeighborIdx = property(_RNAxplorer.meshpoint_bestNeighborIdx_get, _RNAxplorer.meshpoint_bestNeighborIdx_set, doc=r"""bestNeighborIdx : int""")
    neighbor_list = property(_RNAxplorer.meshpoint_neighbor_list_get, _RNAxplorer.meshpoint_neighbor_list_set, doc=r"""neighbor_list : p.neighbor""")
    next = property(_RNAxplorer.meshpoint_next_get, _RNAxplorer.meshpoint_next_set, doc=r"""next : p.meshpoint""")

    def __init__(self):
        r"""__init__(meshpoint self) -> meshpoint"""
        _RNAxplorer.meshpoint_swiginit(self, _RNAxplorer.new_meshpoint())
    __swig_destroy__ = _RNAxplorer.delete_meshpoint

# Register meshpoint in _RNAxplorer:
_RNAxplorer.meshpoint_swigregister(meshpoint)

class meshpoint_list(object):
    r"""Proxy of C++ meshpoint_list class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_RNAxplorer.meshpoint_list_count_get, _RNAxplorer.meshpoint_list_count_set, doc=r"""count : int""")
    worstEnergy = property(_RNAxplorer.meshpoint_list_worstEnergy_get, _RNAxplorer.meshpoint_list_worstEnergy_set, doc=r"""worstEnergy : float""")
    worstStructureEnergy = property(_RNAxplorer.meshpoint_list_worstStructureEnergy_get, _RNAxplorer.meshpoint_list_worstStructureEnergy_set, doc=r"""worstStructureEnergy : float""")
    first = property(_RNAxplorer.meshpoint_list_first_get, _RNAxplorer.meshpoint_list_first_set, doc=r"""first : p.meshpoint""")

    def __init__(self):
        r"""__init__(meshpoint_list self) -> meshpoint_list"""
        _RNAxplorer.meshpoint_list_swiginit(self, _RNAxplorer.new_meshpoint_list())
    __swig_destroy__ = _RNAxplorer.delete_meshpoint_list

# Register meshpoint_list in _RNAxplorer:
_RNAxplorer.meshpoint_list_swigregister(meshpoint_list)

class structure_queue(object):
    r"""Proxy of C++ structure_queue class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    count = property(_RNAxplorer.structure_queue_count_get, _RNAxplorer.structure_queue_count_set, doc=r"""count : int""")
    first = property(_RNAxplorer.structure_queue_first_get, _RNAxplorer.structure_queue_first_set, doc=r"""first : p.meshpoint""")
    last = property(_RNAxplorer.structure_queue_last_get, _RNAxplorer.structure_queue_last_set, doc=r"""last : p.meshpoint""")

    def __init__(self):
        r"""__init__(structure_queue self) -> structure_queue"""
        _RNAxplorer.structure_queue_swiginit(self, _RNAxplorer.new_structure_queue())
    __swig_destroy__ = _RNAxplorer.delete_structure_queue

# Register structure_queue in _RNAxplorer:
_RNAxplorer.structure_queue_swigregister(structure_queue)


def insert_meshpoint(s: "char *", en: "float", list: "meshpoint_list", maxEntries: "int") -> "int":
    r"""
    insert_meshpoint(char * s, float en, meshpoint_list list, int maxEntries) -> int

    Parameters
    ----------
    s: char *
    en: float
    list: meshpoint_list *
    maxEntries: int

    """
    return _RNAxplorer.insert_meshpoint(s, en, list, maxEntries)

def insert_meshpoint_with_struct_energy(s: "char *", en: "float", struct_en: "float", list: "meshpoint_list", maxEntries: "int") -> "int":
    r"""
    insert_meshpoint_with_struct_energy(char * s, float en, float struct_en, meshpoint_list list, int maxEntries) -> int

    Parameters
    ----------
    s: char *
    en: float
    struct_en: float
    list: meshpoint_list *
    maxEntries: int

    """
    return _RNAxplorer.insert_meshpoint_with_struct_energy(s, en, struct_en, list, maxEntries)

def clear_meshpoints(list: "meshpoint_list") -> "void":
    r"""
    clear_meshpoints(meshpoint_list list)

    Parameters
    ----------
    list: meshpoint_list *

    """
    return _RNAxplorer.clear_meshpoints(list)

def init_meshpoint_list(list: "meshpoint_list") -> "void":
    r"""
    init_meshpoint_list(meshpoint_list list)

    Parameters
    ----------
    list: meshpoint_list *

    """
    return _RNAxplorer.init_meshpoint_list(list)

def init_structure_queue(queue: "structure_queue") -> "void":
    r"""
    init_structure_queue(structure_queue queue)

    Parameters
    ----------
    queue: structure_queue *

    """
    return _RNAxplorer.init_structure_queue(queue)

def clear_structure_queue(queue: "structure_queue") -> "void":
    r"""
    clear_structure_queue(structure_queue queue)

    Parameters
    ----------
    queue: structure_queue *

    """
    return _RNAxplorer.clear_structure_queue(queue)

def insert_structure_in_queue(queue: "structure_queue", s: "char *", en: "float", neighbor_list: "neighbor", neighbor_cnt: "int", bestNeighborEn: "float", bestNeighborIdx: "int", maxStructs: "int") -> "void":
    r"""
    insert_structure_in_queue(structure_queue queue, char * s, float en, neighbor neighbor_list, int neighbor_cnt, float bestNeighborEn, int bestNeighborIdx, int maxStructs)

    Parameters
    ----------
    queue: structure_queue *
    s: char *
    en: float
    neighbor_list: neighbor *
    neighbor_cnt: int
    bestNeighborEn: float
    bestNeighborIdx: int
    maxStructs: int

    """
    return _RNAxplorer.insert_structure_in_queue(queue, s, en, neighbor_list, neighbor_cnt, bestNeighborEn, bestNeighborIdx, maxStructs)

def is_in_queue(s: "char *", queue: "structure_queue") -> "meshpoint *":
    r"""
    is_in_queue(char * s, structure_queue queue) -> meshpoint

    Parameters
    ----------
    s: char *
    queue: structure_queue *

    """
    return _RNAxplorer.is_in_queue(s, queue)

def sort_neighbors_by_energy_asc(p1: "void const *", p2: "void const *") -> "int":
    r"""
    sort_neighbors_by_energy_asc(void const * p1, void const * p2) -> int

    Parameters
    ----------
    p1: void const *
    p2: void const *

    """
    return _RNAxplorer.sort_neighbors_by_energy_asc(p1, p2)

def initRNAWalk(seq: "char const *", md: "vrna_md_t *") -> "void":
    r"""
    initRNAWalk(char const * seq, vrna_md_t * md)

    Parameters
    ----------
    seq: char const *
    md: vrna_md_t *

    """
    return _RNAxplorer.initRNAWalk(seq, md)

def freeRNAWalkArrays() -> "void":
    r"""freeRNAWalkArrays()"""
    return _RNAxplorer.freeRNAWalkArrays()
GRADIENT_WALK = _RNAxplorer.GRADIENT_WALK

MC_METROPOLIS = _RNAxplorer.MC_METROPOLIS


def structureWalk(seq: "char const *", structure: "char const *", method: "int") -> "char *":
    r"""
    structureWalk(char const * seq, char const * structure, int method) -> char *

    Parameters
    ----------
    seq: char const *
    structure: char const *
    method: int

    """
    return _RNAxplorer.structureWalk(seq, structure, method)

def getPosition(array: "float *", value: "float", array_size: "int") -> "int":
    r"""
    getPosition(float * array, float value, int array_size) -> int

    Parameters
    ----------
    array: float *
    value: float
    array_size: int

    """
    return _RNAxplorer.getPosition(array, value, array_size)

def convertVRNA_PATH_toList(path: "vrna_path_t *") -> "vrna_path_t *":
    r"""
    convertVRNA_PATH_toList(vrna_path_t * path) -> vrna_path_t *

    Parameters
    ----------
    path: vrna_path_t *

    """
    return _RNAxplorer.convertVRNA_PATH_toList(path)
RNAX_PATHFINDER_SADDLE_GRADIENT_WALK = _RNAxplorer.RNAX_PATHFINDER_SADDLE_GRADIENT_WALK

RNAX_PATHFINDER_SADDLE_MONTE_CARLO = _RNAxplorer.RNAX_PATHFINDER_SADDLE_MONTE_CARLO

RNAX_PATHFINDER_SADDLE_MONTE_CARLO_SA = _RNAxplorer.RNAX_PATHFINDER_SADDLE_MONTE_CARLO_SA

RNAX_PATHFINDER_TWO_D_REPRESENTATIVES = _RNAxplorer.RNAX_PATHFINDER_TWO_D_REPRESENTATIVES

class rnax_path_finder_opt_t(object):
    r"""Proxy of C++ rnax_path_finder_opt_t class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    method = property(_RNAxplorer.rnax_path_finder_opt_t_method_get, _RNAxplorer.rnax_path_finder_opt_t_method_set, doc=r"""method : unsigned int""")
    iterations = property(_RNAxplorer.rnax_path_finder_opt_t_iterations_get, _RNAxplorer.rnax_path_finder_opt_t_iterations_set, doc=r"""iterations : unsigned int""")
    max_keep = property(_RNAxplorer.rnax_path_finder_opt_t_max_keep_get, _RNAxplorer.rnax_path_finder_opt_t_max_keep_set, doc=r"""max_keep : int""")
    storage_size = property(_RNAxplorer.rnax_path_finder_opt_t_storage_size_get, _RNAxplorer.rnax_path_finder_opt_t_storage_size_set, doc=r"""storage_size : unsigned int""")
    max_paths = property(_RNAxplorer.rnax_path_finder_opt_t_max_paths_get, _RNAxplorer.rnax_path_finder_opt_t_max_paths_set, doc=r"""max_paths : unsigned int""")
    max_d1 = property(_RNAxplorer.rnax_path_finder_opt_t_max_d1_get, _RNAxplorer.rnax_path_finder_opt_t_max_d1_set, doc=r"""max_d1 : int""")
    max_d2 = property(_RNAxplorer.rnax_path_finder_opt_t_max_d2_get, _RNAxplorer.rnax_path_finder_opt_t_max_d2_set, doc=r"""max_d2 : int""")
    md = property(_RNAxplorer.rnax_path_finder_opt_t_md_get, _RNAxplorer.rnax_path_finder_opt_t_md_set, doc=r"""md : vrna_md_t""")

    def __init__(self):
        r"""__init__(rnax_path_finder_opt_t self) -> rnax_path_finder_opt_t"""
        _RNAxplorer.rnax_path_finder_opt_t_swiginit(self, _RNAxplorer.new_rnax_path_finder_opt_t())
    __swig_destroy__ = _RNAxplorer.delete_rnax_path_finder_opt_t

# Register rnax_path_finder_opt_t in _RNAxplorer:
_RNAxplorer.rnax_path_finder_opt_t_swigregister(rnax_path_finder_opt_t)
cvar = _RNAxplorer.cvar


def rnax_path_finder_options() -> "rnax_path_finder_opt_t *":
    r"""rnax_path_finder_options() -> rnax_path_finder_opt_t"""
    return _RNAxplorer.rnax_path_finder_options()

def rnax_path_finder(seq: "char const *", s_source: "char const *", s_target: "char const *", options: "rnax_path_finder_opt_t") -> "vrna_path_t *":
    r"""
    rnax_path_finder(char const * seq, char const * s_source, char const * s_target, rnax_path_finder_opt_t options) -> vrna_path_t *

    Parameters
    ----------
    seq: char const *
    s_source: char const *
    s_target: char const *
    options: rnax_path_finder_opt_t *

    """
    return _RNAxplorer.rnax_path_finder(seq, s_source, s_target, options)

def levelSaddlePoint(seq: "char const *", s1: "char const *", s2: "char const *", maxIterations: "int", maxKeep: "int", method: "int", maxStorage: "int") -> "void":
    r"""
    levelSaddlePoint(char const * seq, char const * s1, char const * s2, int maxIterations, int maxKeep, int method, int maxStorage)

    Parameters
    ----------
    seq: char const *
    s1: char const *
    s2: char const *
    maxIterations: int
    maxKeep: int
    method: int
    maxStorage: int

    """
    return _RNAxplorer.levelSaddlePoint(seq, s1, s2, maxIterations, maxKeep, method, maxStorage)

def levelSaddlePoint2(seq: "char const *", s1: "char const *", s2: "char const *", iteration: "int", maxIterations: "int", maxKeep: "int", maxStorage: "int", maximum_distance1: "int", maximum_distance2: "int") -> "vrna_path_t *":
    r"""
    levelSaddlePoint2(char const * seq, char const * s1, char const * s2, int iteration, int maxIterations, int maxKeep, int maxStorage, int maximum_distance1, int maximum_distance2) -> vrna_path_t *

    Parameters
    ----------
    seq: char const *
    s1: char const *
    s2: char const *
    iteration: int
    maxIterations: int
    maxKeep: int
    maxStorage: int
    maximum_distance1: int
    maximum_distance2: int

    """
    return _RNAxplorer.levelSaddlePoint2(seq, s1, s2, iteration, maxIterations, maxKeep, maxStorage, maximum_distance1, maximum_distance2)

def getSaddlePoint(foldingPath: "vrna_path_t *") -> "vrna_path_t *":
    r"""
    getSaddlePoint(vrna_path_t * foldingPath) -> vrna_path_t *

    Parameters
    ----------
    foldingPath: vrna_path_t *

    """
    return _RNAxplorer.getSaddlePoint(foldingPath)

def add_repulsion(fc: "vrna_fold_compound_t *", structure: "char const *", strength: "double") -> "int":
    r"""
    add_repulsion(vrna_fold_compound_t * fc, char const * structure, double strength) -> int

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    structure: char const *
    strength: double

    """
    return _RNAxplorer.add_repulsion(fc, structure, strength)

def change_repulsion(fc: "vrna_fold_compound_t *", id: "int", strength: "double") -> "int":
    r"""
    change_repulsion(vrna_fold_compound_t * fc, int id, double strength) -> int

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    id: int
    strength: double

    """
    return _RNAxplorer.change_repulsion(fc, id, strength)

def repellant_sampling(fc: "vrna_fold_compound_t *") -> "void":
    r"""
    repellant_sampling(vrna_fold_compound_t * fc)

    Parameters
    ----------
    fc: vrna_fold_compound_t *

    """
    return _RNAxplorer.repellant_sampling(fc)

def rnax_change_repulsion(fc: "vrna_fold_compound_t *", id: "int", strength: "double") -> "int":
    r"""
    rnax_change_repulsion(vrna_fold_compound_t * fc, int id, double strength) -> int

    Parameters
    ----------
    fc: vrna_fold_compound_t *
    id: int
    strength: double

    """
    return _RNAxplorer.rnax_change_repulsion(fc, id, strength)


